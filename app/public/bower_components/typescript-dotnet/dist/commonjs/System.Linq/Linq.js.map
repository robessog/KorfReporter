{"version":3,"sources":["System.Linq/Linq.ts","System.Linq/Linq.js"],"names":[],"mappings":"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","file":"System.Linq/Linq.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../System/Primitive.d.ts\"/>\r\n///<reference path=\"../System/FunctionTypes.d.ts\"/>\r\n///<reference path=\"../System/Collections/Array/IArray.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerator.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerable.d.ts\"/>\r\n///<reference path=\"../System/Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../System/IComparer.d.ts\"/>\r\n///<reference path=\"../System/Collections/Sorting/Order.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as Values from '../System/Compare';\r\nimport * as Arrays from '../System/Collections/Array/Compare';\r\nimport * as ArrayUtility from '../System/Collections/Array/Utility';\r\nimport {from as enumeratorFrom, forEach as enumeratorForEach, isEnumerable} from '../System/Collections/Enumeration/Enumerator';\r\nimport Type from '../System/Types';\r\nimport Integer from '../System/Integer';\r\nimport BaseFunctions from '../System/Functions';\r\nimport ArrayEnumerator from '../System/Collections/Enumeration/ArrayEnumerator';\r\nimport EnumeratorBase from '../System/Collections/Enumeration/EnumeratorBase';\r\nimport Dictionary from '../System/Collections/Dictionaries/Dictionary';\r\nimport Queue from '../System/Collections/Queue';\r\nimport {dispose, disposeThese, using} from '../System/Disposable/Utility';\r\nimport DisposableBase from '../System/Disposable/DisposableBase';\r\nimport Exception from \"../System/Exception\";\r\nimport ArgumentException from '../System/Exceptions/ArgumentException';\r\nimport ObjectDisposedException from '../System/Disposable/ObjectDisposedException';\r\nimport KeySortedContext from \"../System/Collections/Sorting/KeySortedContext\";\r\ntype Comparable = Primitive|IComparable<any>;\r\n\r\n// #region Local Constants.\r\n\r\nconst VOID0:any = void 0;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// #endregion\r\n\r\nclass UnsupportedEnumerableException extends Exception\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(\"Unsupported enumerable.\");\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Defined values for doAction.\r\n */\r\nexport const enum EnumerableAction\r\n{\r\n\tBreak  = 0,\r\n\tReturn = 1,\r\n\tSkip   = 2\r\n}\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends DisposableBase implements IEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t}\r\n\r\n\t/**\r\n\t * Static shortcut for creating an ArrayEnumerable.\r\n\t */\r\n\tstatic fromArray<T>(array:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(array);\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(source:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(Type.isObject(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Array.isArray(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable(()=>source.getEnumerator());\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\tstatic toArray<T>(source:IEnumerable<T> | IArray<T>):T[]\r\n\t{\r\n\t\tif(Type.isObject(source))\r\n\t\t{\r\n\t\t\tif(Array.isArray(source))\r\n\t\t\t\treturn source.slice();\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\tsource = new ArrayEnumerable<T>(<IArray<T>>source);\r\n\r\n\t\t\tif(source instanceof  Enumerable)\r\n\t\t\t\treturn source.toArray();\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t{\r\n\t\t\t\tvar result:T[] = [];\r\n\t\t\t\tenumeratorForEach<T>(\r\n\t\t\t\t\tsource.getEnumerator(), (e, i) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult[i] = e;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\tthis._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(values[Integer.random(values.length)])\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0; // Let the compiler know this is an int.\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic empty<T>():Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\tFunctions.False\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element)\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration does not break.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic make<T>(element:T):Enumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\tstatic range(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\t\t\t\tvar c:number = count; // Force integer evaluation.\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.range(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.rangeDown(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number = 0,\r\n\t\tto:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(to))\r\n\t\t\tthrow new Error(\"Must have a valid 'to' value.\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\t// Range to infinity has a more efficient mechanism.\r\n\t\tif(!isFinite(to))\r\n\t\t\treturn Enumerable.range(start, Infinity, (start<to) ? (+step) : (-step));\r\n\r\n\t\treturn new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn start<to\r\n\r\n\t\t\t\t\t? new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t: new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:any, flags:string = \"\"):Enumerable<RegExpExecArray>\r\n\t{\r\n\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof  RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new Enumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tvar match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = index++;\r\n\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++))\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(seed:T, valueFactory:Selector<T, T>, skipSeed:Boolean = false):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic defer<T>(enumerableFactory:() => IEnumerable<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = enumerableFactory().getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> enumerator.moveNext() && yielder.yieldReturn(enumerator.current),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerable<T> | IArray<T>,\r\n\t\taction:(element:T, index?:number) => any):void\r\n\t{\r\n\t\tif(enumerable)\r\n\t\t{\r\n\t\t\tusing(enumeratorFrom(enumerable), e=>\r\n\t\t\t{\r\n\t\t\t\tenumeratorForEach(e, action);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tstatic map<T,TResult>(\r\n\t\tenumerable:IEnumerable<T> | IArray<T>,\r\n\t\tselector:Selector<T,TResult>):TResult[]\r\n\t{\r\n\r\n\t\treturn enumerable && using(enumeratorFrom(enumerable), e=>\r\n\t\t\t{\r\n\t\t\t\tvar result:TResult[] = [];\r\n\t\t\t\tenumeratorForEach(e, (e, i)=>\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = selector(e);\r\n\t\t\t\t});\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tstatic min(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Instance methods...\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(<any>action(e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\tvar result:T[] = [];\r\n\r\n\t\tif(predicate) return this.where(predicate).toArray();\r\n\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\tresult[i] = x\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar key = keySelector(x);\r\n\t\t\t\tvar element = elementSelector(x);\r\n\r\n\t\t\t\tvar array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach(x=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x)] = elementSelector(x);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Dictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach(x=> dict.addByKeyValue(keySelector(x), elementSelector(x)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this.select(selector).toArray().join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar actionResult = <any>action(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tforce(defaultAction:EnumerableAction = EnumerableAction.Break):void\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.doAction(element => defaultAction);\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Simply return this.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\tvar c:number = count;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<c\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\tskipWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar skipping:boolean = true;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(skipping)\r\n\t\t\t\t\tskipping = predicate(element, index);\r\n\r\n\t\t\t\treturn skipping\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttake(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals no limit.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn _.doAction((element:T, index?:number) => index<c);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return\r\n\t\t\t);\r\n\r\n\t\tvar found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all in reverse.\r\n\t\t\treturn _.reverse();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn _.reverse().take(count);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar nestLevel:number = 0;\r\n\t\t\t\tvar buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tvar next = Enumerable\r\n\t\t\t\t\t\t\t\t.fromArray<T>(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(func);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tvar enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar value = resultSelector(enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tenumerator = func(enumerator.current).getEnumerator();\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdisposeThese(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\t\t\t\tif(Array.isArray(c))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = Enumerable.fromArray<any>(c)\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar prev = enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext() && yielder.yieldReturn(value\r\n\t\t\t\t\t\t\t\t= enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(selector.length<2)\r\n\t\t\treturn new WhereSelectEnumerable(_, null, selector);\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(enumerator.current, index++))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tselectMany<TResult>(collectionSelector:Selector<T, IEnumerable<TResult | IArray<TResult>>>):Enumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerable<TElement> | IArray<TResult>> | Selector<T, IArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, any>,\r\n\t\tresultSelector?:(collection:any, middle:any) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a, b) => b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = undefined;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar middleSeq = collectionSelector(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumeratorFrom(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t\t\t\tenumerator.current, middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tchoose<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = selector(enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(predicate.length<2)\r\n\t\t\treturn new WhereEnumerable(_, predicate);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(predicate(enumerator.current, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (): TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <Enumerable<any>>this\r\n\t\t\t\t\t.where(x=>x instanceof  type);\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.where(x=>typeof x===typeName);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerable<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tEnumerable.forEach(second, key => keys.addByKeyValue(key, true));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):Enumerable<T>\r\n\t{\r\n\t\treturn this.except(null, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0] results in [0,1,2,0];\r\n\tdistinctUntilChanged<TCompare>(compareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar key = compareSelector(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(compareKey===key)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tindex>0\r\n\t\t\t\t\t&& yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar capacity:number;\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tvar selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = null; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar count:number = 0;\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\t_.forEach((x, i) =>\r\n\t\t\t{\r\n\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\t++count;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = true;\r\n\t\tthis.forEach(x =>\r\n\t\t{\r\n\t\t\tif(!predicate(x))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = false;\r\n\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\tthis.forEach(x =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\tresult = true;\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true)) result\r\n\t\t\t\t\t= i;\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tdefaultIfEmpty(defaultValue:T = null):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerable<TSecond> | IArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tfirstEnumerator.moveNext() && secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerable<TSecond> | IArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar secondTemp:Queue<any>;\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(firstEnumerator.current, secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerable<TInner> | IArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tvar innerElements:TInner[] = null;\r\n\t\t\t\tvar innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElement = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar key = outerKeySelector(outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerable<TInner> | IArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey, TInner> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\tenumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcatWith(other:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator!=null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(firstEnumerator.moveNext()) return yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\t\tfirstEnumerator.dispose();\r\n\t\t\t\t\t\t\tfirstEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(secondEnumerator.moveNext()) return yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerable<T> | IArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!enumerables.length)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar queue:Queue<IEnumerable<T> | IArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerable<T> | IArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerable<T> | IArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn _.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tinsertAt(index:number, other:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tvar count:number = 0;\r\n\t\t\t\tvar isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tvar hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tvar another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T,boolean>;\r\n\t\t\t\tvar outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tEnumerable.from<T>(second)\r\n\t\t\t\t\t\t\t.forEach(key=>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);  // Should Dictionary be IDisposable?\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tEnumerable.from<T>(second).getEnumerator(),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerable<T> | IArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = Enumerable.from<T>(second).getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\r\n\tgroupBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => _.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar key:TKey;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar group:TElement[];\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkey = keySelector(enumerator.current);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(enumerator.current)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):IEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tvar _ = this, len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T\r\n\t{\r\n\t\treturn this.scan(func, seed).lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tvar count = 0; // No need to make integer if the result could be a float.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tfunction(x)\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(sumInfinite) // Not zero?\r\n\t\t\treturn sumInfinite*Infinity;\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"first:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"single:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tshare():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar sharedEnumerator:IEnumerator<T>;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// assertIsNotDisposed(disposed);  This doesn't need an assertion since disposing the underlying enumerable disposes the enumerator.\r\n\r\n\t\t\t\t\t\tif(!sharedEnumerator)\r\n\t\t\t\t\t\t\tsharedEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tsharedEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(sharedEnumerator.current)\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmemoize():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tvar i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = null;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:Error) => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:() => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass ArrayEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Could possibly be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = <any>null;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar s = this.source;\r\n\t\tif(!s)\r\n\t\t\treturn [];\r\n\r\n\t\tif(Array.isArray(s))\r\n\t\t\treturn (<any>s).slice();\r\n\r\n\t\tvar len = s.length, result:T[] = ArrayUtility.initialize<T>(len);\r\n\t\tfor(let i = 0; i<len; ++i)\r\n\t\t{\r\n\t\t\tresult[i] = s[i];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tasEnumerable():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\tif(source)\r\n\t\t{\r\n\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\tfor(let i = 0; i<source.length; ++i)\r\n\t\t\t{\r\n\t\t\t\t// _.assertIsNotDisposed(); // Assertion here is unnecessary since we already have a reference to the source array.\r\n\t\t\t\tif(<any>action(source[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: super.elementAt(index);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: super.first();\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || count<0) // Out of bounds? Simply return a unfiltered enumerable.\r\n\t\t\treturn _.asEnumerable();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, len = _._source ? _._source.length : 0;\r\n\t\treturn _.take(len - count);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || count<0) return Enumerable.empty<T>();\r\n\r\n\t\tvar _   = this,\r\n\t\t    len = _._source\r\n\t\t\t    ? _._source.length\r\n\t\t\t    : 0;\r\n\r\n\t\treturn _.skip(len - count);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(Array.isArray(second))\r\n\t\t\treturn Arrays.areEqual(this.source, <IArray<T>>second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof  ArrayEnumerable)\r\n\t\t\treturn (<ArrayEnumerable<T>>second).sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport interface IGrouping<TKey, TElement>\r\nextends Enumerable<TElement>\r\n{\r\n\tkey: TKey;\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\n\r\nexport interface ILookup<TKey, TElement>\r\nextends IEnumerable<IGrouping<TKey, TElement>>\r\n{\r\n\tcount: number;\r\n\tget(key:TKey): TElement[];\r\n\tcontains(key:TKey): boolean;\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:Dictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tvar current = enumerator.current;\r\n\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass WhereEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<T>,\r\n\t\tprivate prevPredicate:Predicate<T>  // predicate.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\tvar prevPredicate = this.prevPredicate;\r\n\t\tvar composedPredicate = (x:T) => prevPredicate(x) && predicate(x);\r\n\t\treturn new WhereEnumerable<T>(this.prevSource, composedPredicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\treturn new WhereSelectEnumerable<T, TSelect>(\r\n\t\t\tthis.prevSource,\r\n\t\t\tthis.prevPredicate,\r\n\t\t\tselector\r\n\t\t);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar predicate = this.prevPredicate;\r\n\t\tvar source = this.prevSource;\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(enumerator.current))\r\n\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.prevPredicate = null;\r\n\t\tthis.prevSource = null;\r\n\t}\r\n}\r\n\r\nclass WhereSelectEnumerable<TSource, T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<TSource>,\r\n\t\tprivate prevPredicate:Predicate<TSource>,  // predicate.length always <= 1\r\n\t\tprivate prevSelector:Selector<TSource, T> // selector.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:(value:T, index?:number) => boolean):Enumerable<T>\r\n\t{\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\treturn new WhereEnumerable<T>(this, predicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t// if selector use index, can't compose\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\tvar _ = this;\r\n\t\tvar prevSelector = _.prevSelector;\r\n\t\tvar composedSelector = (x:TSource) => selector(prevSelector(x));\r\n\t\treturn new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _                             = this,\r\n\t\t    predicate                     = _.prevPredicate,\r\n\t\t    source                        = _.prevSource,\r\n\t\t    selector:Selector<TSource, T> = _.prevSelector, // Type definition needed for correct inference.\r\n\t\t    enumerator:IEnumerator<TSource>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\tif(predicate==null || predicate(c))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selector(c));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.prevPredicate = null;\r\n\t\t_.prevSource = null;\r\n\t\t_.prevSelector = null;\r\n\t}\r\n}\r\n\r\nexport interface IOrderedEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>;\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n}\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends Enumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:(value:T) => TOrderBy,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>,\r\n\t\tpublic comparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:(value:T) => TOrderBy,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_).generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = null;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.source = null;\r\n\t\tthis.keySelector = null;\r\n\t\tthis.order = null;\r\n\t\tthis.parent = null;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T> = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean, className:string = \"Enumerable\"):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(className);\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst Values = require('../System/Compare');\nconst Arrays = require('../System/Collections/Array/Compare');\nconst ArrayUtility = require('../System/Collections/Array/Utility');\nconst Enumerator_1 = require('../System/Collections/Enumeration/Enumerator');\nconst Types_1 = require('../System/Types');\nconst Integer_1 = require('../System/Integer');\nconst Functions_1 = require('../System/Functions');\nconst ArrayEnumerator_1 = require('../System/Collections/Enumeration/ArrayEnumerator');\nconst EnumeratorBase_1 = require('../System/Collections/Enumeration/EnumeratorBase');\nconst Dictionary_1 = require('../System/Collections/Dictionaries/Dictionary');\nconst Queue_1 = require('../System/Collections/Queue');\nconst Utility_1 = require('../System/Disposable/Utility');\nconst DisposableBase_1 = require('../System/Disposable/DisposableBase');\nconst Exception_1 = require(\"../System/Exception\");\nconst ObjectDisposedException_1 = require('../System/Disposable/ObjectDisposedException');\nconst KeySortedContext_1 = require(\"../System/Collections/Sorting/KeySortedContext\");\nconst VOID0 = void 0;\nclass LinqFunctions extends Functions_1.default {\n    Greater(a, b) {\n        return a > b ? a : b;\n    }\n    Lesser(a, b) {\n        return a < b ? a : b;\n    }\n}\nvar Functions = new LinqFunctions();\nObject.freeze(Functions);\nclass UnsupportedEnumerableException extends Exception_1.default {\n    constructor() {\n        super(\"Unsupported enumerable.\");\n    }\n}\nclass Enumerable extends DisposableBase_1.default {\n    constructor(_enumeratorFactory, finalizer) {\n        super(finalizer);\n        this._enumeratorFactory = _enumeratorFactory;\n    }\n    static fromArray(array) {\n        return new ArrayEnumerable(array);\n    }\n    static from(source) {\n        if (Types_1.default.isObject(source)) {\n            if (source instanceof Enumerable)\n                return source;\n            if (Array.isArray(source))\n                return new ArrayEnumerable(source);\n            if (Enumerator_1.isEnumerable(source))\n                return new Enumerable(() => source.getEnumerator());\n            if (Types_1.default.isArrayLike(source))\n                return new ArrayEnumerable(source);\n        }\n        throw new UnsupportedEnumerableException();\n    }\n    static toArray(source) {\n        if (Types_1.default.isObject(source)) {\n            if (Array.isArray(source))\n                return source.slice();\n            if (Types_1.default.isArrayLike(source))\n                source = new ArrayEnumerable(source);\n            if (source instanceof Enumerable)\n                return source.toArray();\n            if (Enumerator_1.isEnumerable(source)) {\n                var result = [];\n                Enumerator_1.forEach(source.getEnumerator(), (e, i) => {\n                    result[i] = e;\n                });\n                return result;\n            }\n        }\n        throw new UnsupportedEnumerableException();\n    }\n    getEnumerator() {\n        this.throwIfDisposed();\n        return this._enumeratorFactory();\n    }\n    _onDispose() {\n        super._onDispose();\n        this._enumeratorFactory = null;\n    }\n    static choice(values) {\n        return new Enumerable(() => new EnumeratorBase_1.default(null, (yielder) => yielder.yieldReturn(values[Integer_1.default.random(values.length)])));\n    }\n    static cycle(values) {\n        return new Enumerable(() => {\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                index = 0;\n            }, (yielder) => {\n                if (index >= values.length)\n                    index = 0;\n                return yielder.yieldReturn(values[index++]);\n            });\n        });\n    }\n    static empty() {\n        return new Enumerable(() => new EnumeratorBase_1.default(null, Functions.False));\n    }\n    static repeat(element, count = Infinity) {\n        if (isNaN(count) || count <= 0)\n            return Enumerable.empty();\n        return isFinite(count) && Integer_1.default.assert(count, \"count\")\n            ? new Enumerable(() => {\n                var c = count;\n                var index = 0;\n                return new EnumeratorBase_1.default(() => {\n                    index = 0;\n                }, (yielder) => (index++ < c) && yielder.yieldReturn(element));\n            })\n            : new Enumerable(() => new EnumeratorBase_1.default(null, (yielder) => yielder.yieldReturn(element)));\n    }\n    static repeatWithFinalize(initializer, finalizer) {\n        return new Enumerable(() => {\n            var element;\n            return new EnumeratorBase_1.default(() => {\n                element = initializer();\n            }, (yielder) => yielder.yieldReturn(element), () => {\n                finalizer(element);\n            });\n        });\n    }\n    static make(element) {\n        return Enumerable.repeat(element, 1);\n    }\n    static range(start = 0, count = Infinity, step = 1) {\n        if (!isFinite(start))\n            throw new Error(\"Must have a valid 'start' value.\");\n        if (isNaN(count) || count <= 0)\n            return Enumerable.empty();\n        if (!isFinite(step))\n            throw new Error(\"Must have a valid 'step' value.\");\n        return isFinite(count) && Integer_1.default.assert(count, \"count\")\n            ? new Enumerable(() => {\n                var value;\n                var c = count;\n                var index = 0;\n                return new EnumeratorBase_1.default(() => {\n                    index = 0;\n                    value = start;\n                }, (yielder) => {\n                    var result = index++ < c\n                        && yielder.yieldReturn(value);\n                    if (result && index < count)\n                        value += step;\n                    return result;\n                });\n            })\n            : new Enumerable(() => {\n                var value;\n                return new EnumeratorBase_1.default(() => {\n                    value = start;\n                }, (yielder) => {\n                    var current = value;\n                    value += step;\n                    return yielder.yieldReturn(current);\n                });\n            });\n    }\n    static rangeDown(start = 0, count = Infinity, step = 1) {\n        step = Math.abs(step) * -1;\n        return Enumerable.range(start, count, step);\n    }\n    static toInfinity(start = 0, step = 1) {\n        return Enumerable.range(start, Infinity, step);\n    }\n    static toNegativeInfinity(start = 0, step = 1) {\n        return Enumerable.rangeDown(start, Infinity, step);\n    }\n    static rangeTo(start = 0, to = Infinity, step = 1) {\n        if (!isFinite(start))\n            throw new Error(\"Must have a valid 'start' value.\");\n        if (isNaN(to))\n            throw new Error(\"Must have a valid 'to' value.\");\n        if (!isFinite(step))\n            throw new Error(\"Must have a valid 'step' value.\");\n        step = Math.abs(step);\n        if (!isFinite(to))\n            return Enumerable.range(start, Infinity, (start < to) ? (+step) : (-step));\n        return new Enumerable(() => {\n            var value;\n            return start < to\n                ? new EnumeratorBase_1.default(() => {\n                    value = start;\n                }, (yielder) => {\n                    var result = value <= to && yielder.yieldReturn(value);\n                    if (result)\n                        value += step;\n                    return result;\n                })\n                : new EnumeratorBase_1.default(() => {\n                    value = start;\n                }, (yielder) => {\n                    var result = value >= to && yielder.yieldReturn(value);\n                    if (result)\n                        value -= step;\n                    return result;\n                });\n        });\n    }\n    static matches(input, pattern, flags = \"\") {\n        var type = typeof input;\n        if (type != Types_1.default.STRING)\n            throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\n        if (pattern instanceof RegExp) {\n            flags += (pattern.ignoreCase) ? \"i\" : \"\";\n            flags += (pattern.multiline) ? \"m\" : \"\";\n            pattern = pattern.source;\n        }\n        if (flags.indexOf(\"g\") === -1)\n            flags += \"g\";\n        return new Enumerable(() => {\n            var regex;\n            return new EnumeratorBase_1.default(() => {\n                regex = new RegExp(pattern, flags);\n            }, (yielder) => {\n                var match = regex.exec(input);\n                return (match !== null) ? yielder.yieldReturn(match) : false;\n            });\n        });\n    }\n    static generate(factory, count = Infinity) {\n        if (isNaN(count) || count <= 0)\n            return Enumerable.empty();\n        return isFinite(count) && Integer_1.default.assert(count, \"count\")\n            ? new Enumerable(() => {\n                var c = count;\n                var index = 0;\n                return new EnumeratorBase_1.default(() => {\n                    index = 0;\n                }, (yielder) => {\n                    var current = index++;\n                    return current < c && yielder.yieldReturn(factory(current));\n                });\n            })\n            : new Enumerable(() => {\n                var index = 0;\n                return new EnumeratorBase_1.default(() => {\n                    index = 0;\n                }, (yielder) => yielder.yieldReturn(factory(index++)));\n            });\n    }\n    static unfold(seed, valueFactory, skipSeed = false) {\n        return new Enumerable(() => {\n            var index = 0;\n            var value;\n            var isFirst;\n            return new EnumeratorBase_1.default(() => {\n                index = 0;\n                value = seed;\n                isFirst = !skipSeed;\n            }, (yielder) => {\n                var i = index++;\n                if (isFirst)\n                    isFirst = false;\n                else\n                    value = valueFactory(value, i);\n                return yielder.yieldReturn(value);\n            });\n        });\n    }\n    static defer(enumerableFactory) {\n        return new Enumerable(() => {\n            var enumerator;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = enumerableFactory().getEnumerator();\n            }, (yielder) => enumerator.moveNext() && yielder.yieldReturn(enumerator.current), () => {\n                Utility_1.dispose(enumerator);\n            });\n        });\n    }\n    static forEach(enumerable, action) {\n        if (enumerable) {\n            Utility_1.using(Enumerator_1.from(enumerable), e => {\n                Enumerator_1.forEach(e, action);\n            });\n        }\n    }\n    static map(enumerable, selector) {\n        return enumerable && Utility_1.using(Enumerator_1.from(enumerable), e => {\n            var result = [];\n            Enumerator_1.forEach(e, (e, i) => {\n                result[i] = selector(e);\n            });\n            return result;\n        });\n    }\n    static max(values) {\n        return values\n            .takeUntil(v => v == +Infinity, true)\n            .aggregate(Functions.Greater);\n    }\n    static min(values) {\n        return values\n            .takeUntil(v => v == -Infinity, true)\n            .aggregate(Functions.Lesser);\n    }\n    forEach(action) {\n        var _ = this;\n        _.throwIfDisposed();\n        var index = 0;\n        Utility_1.using(_.getEnumerator(), e => {\n            while (_.throwIfDisposed() && e.moveNext()) {\n                if (action(e.current, index++) === false)\n                    break;\n            }\n        });\n    }\n    toArray(predicate) {\n        var result = [];\n        if (predicate)\n            return this.where(predicate).toArray();\n        this.forEach((x, i) => {\n            result[i] = x;\n        });\n        return result;\n    }\n    asEnumerable() {\n        var _ = this;\n        return new Enumerable(() => _.getEnumerator());\n    }\n    toLookup(keySelector, elementSelector = Functions.Identity, compareSelector = Functions.Identity) {\n        var dict = new Dictionary_1.default(compareSelector);\n        this.forEach(x => {\n            var key = keySelector(x);\n            var element = elementSelector(x);\n            var array = dict.getValue(key);\n            if (array !== VOID0)\n                array.push(element);\n            else\n                dict.addByKeyValue(key, [element]);\n        });\n        return new Lookup(dict);\n    }\n    toMap(keySelector, elementSelector) {\n        var obj = {};\n        this.forEach(x => {\n            obj[keySelector(x)] = elementSelector(x);\n        });\n        return obj;\n    }\n    toDictionary(keySelector, elementSelector, compareSelector = Functions.Identity) {\n        var dict = new Dictionary_1.default(compareSelector);\n        this.forEach(x => dict.addByKeyValue(keySelector(x), elementSelector(x)));\n        return dict;\n    }\n    toJoinedString(separator = \"\", selector = Functions.Identity) {\n        return this.select(selector).toArray().join(separator);\n    }\n    doAction(action) {\n        var _ = this, disposed = !_.throwIfDisposed();\n        return new Enumerable(() => {\n            var enumerator;\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                index = 0;\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                throwIfDisposed(disposed);\n                while (enumerator.moveNext()) {\n                    var actionResult = action(enumerator.current, index++);\n                    if (actionResult === false || actionResult === 0)\n                        return yielder.yieldBreak();\n                    if (actionResult !== 2)\n                        return yielder.yieldReturn(enumerator.current);\n                }\n                return false;\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        }, () => {\n            disposed = true;\n        });\n    }\n    force(defaultAction = 0) {\n        this.throwIfDisposed();\n        this.doAction(element => defaultAction);\n    }\n    skip(count) {\n        var _ = this;\n        _.throwIfDisposed();\n        if (!count || isNaN(count) || count < 0)\n            return _;\n        if (!isFinite(count))\n            return Enumerable.empty();\n        Integer_1.default.assert(count, \"count\");\n        var c = count;\n        return this.doAction((element, index) => index < c\n            ? 2\n            : 1);\n    }\n    skipWhile(predicate) {\n        this.throwIfDisposed();\n        var skipping = true;\n        return this.doAction((element, index) => {\n            if (skipping)\n                skipping = predicate(element, index);\n            return skipping\n                ? 2\n                : 1;\n        });\n    }\n    take(count) {\n        if (!count || isNaN(count) || count < 0)\n            return Enumerable.empty();\n        var _ = this;\n        _.throwIfDisposed();\n        if (!isFinite(count))\n            return _;\n        Integer_1.default.assert(count, \"count\");\n        var c = count;\n        return _.doAction((element, index) => index < c);\n    }\n    takeWhile(predicate) {\n        this.throwIfDisposed();\n        return this.doAction((element, index) => predicate(element, index)\n            ? 1\n            : 0);\n    }\n    takeUntil(predicate, includeUntilValue) {\n        this.throwIfDisposed();\n        if (!includeUntilValue)\n            return this.doAction((element, index) => predicate(element, index)\n                ? 0\n                : 1);\n        var found = false;\n        return this.doAction((element, index) => {\n            if (found)\n                return 0;\n            found = predicate(element, index);\n            return 1;\n        });\n    }\n    takeExceptLast(count = 1) {\n        var _ = this;\n        if (!count || isNaN(count) || count <= 0)\n            return _;\n        if (!isFinite(count))\n            return Enumerable.empty();\n        Integer_1.default.assert(count, \"count\");\n        var c = count;\n        return new Enumerable(() => {\n            var enumerator;\n            var q;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n                q = new Queue_1.default();\n            }, (yielder) => {\n                while (enumerator.moveNext()) {\n                    q.enqueue(enumerator.current);\n                    if (q.count > c)\n                        return yielder.yieldReturn(q.dequeue());\n                }\n                return false;\n            }, () => {\n                Utility_1.dispose(enumerator, q);\n            });\n        });\n    }\n    takeFromLast(count) {\n        if (!count || isNaN(count) || count <= 0)\n            return Enumerable.empty();\n        var _ = this;\n        if (!isFinite(count))\n            return _.reverse();\n        Integer_1.default.assert(count, \"count\");\n        return _.reverse().take(count);\n    }\n    traverseBreadthFirst(func, resultSelector) {\n        var _ = this;\n        return new Enumerable(() => {\n            var enumerator;\n            var nestLevel = 0;\n            var buffer, len;\n            return new EnumeratorBase_1.default(() => {\n                nestLevel = 0;\n                buffer = [];\n                len = 0;\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                while (true) {\n                    if (enumerator.moveNext()) {\n                        buffer[len++] = enumerator.current;\n                        return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\n                    }\n                    if (!len)\n                        return yielder.yieldBreak();\n                    var next = Enumerable\n                        .fromArray(buffer)\n                        .selectMany(func);\n                    if (!next.any()) {\n                        return yielder.yieldBreak();\n                    }\n                    else {\n                        nestLevel++;\n                        buffer = [];\n                        len = 0;\n                        enumerator.dispose();\n                        enumerator = next.getEnumerator();\n                    }\n                }\n            }, () => {\n                Utility_1.dispose(enumerator);\n                buffer.length = 0;\n            });\n        });\n    }\n    traverseDepthFirst(func, resultSelector) {\n        var _ = this;\n        return new Enumerable(() => {\n            var enumeratorStack = [];\n            var enumerator;\n            var len;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n                len = 0;\n            }, (yielder) => {\n                while (true) {\n                    if (enumerator.moveNext()) {\n                        var value = resultSelector(enumerator.current, len);\n                        enumeratorStack[len++] = enumerator;\n                        enumerator = func(enumerator.current).getEnumerator();\n                        return yielder.yieldReturn(value);\n                    }\n                    if (len == 0)\n                        return false;\n                    enumerator.dispose();\n                    enumerator = enumeratorStack[--len];\n                    enumeratorStack.length = len;\n                }\n            }, () => {\n                try {\n                    Utility_1.dispose(enumerator);\n                }\n                finally {\n                    Utility_1.disposeThese(enumeratorStack);\n                }\n            });\n        });\n    }\n    flatten() {\n        var _ = this;\n        return new Enumerable(() => {\n            var enumerator;\n            var middleEnumerator = null;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                while (true) {\n                    if (middleEnumerator != null) {\n                        if (middleEnumerator.moveNext()) {\n                            return yielder.yieldReturn(middleEnumerator.current);\n                        }\n                        else {\n                            middleEnumerator = null;\n                        }\n                    }\n                    if (enumerator.moveNext()) {\n                        var c = enumerator.current;\n                        if (Array.isArray(c)) {\n                            middleEnumerator.dispose();\n                            middleEnumerator = Enumerable.fromArray(c)\n                                .selectMany(Functions.Identity)\n                                .flatten()\n                                .getEnumerator();\n                            continue;\n                        }\n                        else {\n                            return yielder.yieldReturn(enumerator.current);\n                        }\n                    }\n                    return false;\n                }\n            }, () => {\n                Utility_1.dispose(enumerator, middleEnumerator);\n            });\n        });\n    }\n    pairwise(selector) {\n        var _ = this;\n        return new Enumerable(() => {\n            var enumerator;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n                enumerator.moveNext();\n            }, (yielder) => {\n                var prev = enumerator.current;\n                return enumerator.moveNext()\n                    && yielder.yieldReturn(selector(prev, enumerator.current));\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        });\n    }\n    scan(func, seed) {\n        var isUseSeed = seed !== VOID0;\n        var _ = this;\n        return new Enumerable(() => {\n            var enumerator;\n            var value;\n            var isFirst;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n                isFirst = true;\n            }, (yielder) => {\n                if (isFirst) {\n                    isFirst = false;\n                    return isUseSeed\n                        ? yielder.yieldReturn(value = seed)\n                        : enumerator.moveNext() && yielder.yieldReturn(value\n                            = enumerator.current);\n                }\n                return (enumerator.moveNext())\n                    ? yielder.yieldReturn(value = func(value, enumerator.current))\n                    : false;\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        });\n    }\n    select(selector) {\n        var _ = this, disposed = !_.throwIfDisposed();\n        if (selector.length < 2)\n            return new WhereSelectEnumerable(_, null, selector);\n        return new Enumerable(() => {\n            var enumerator;\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                index = 0;\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                throwIfDisposed(disposed);\n                return enumerator.moveNext()\n                    ? yielder.yieldReturn(selector(enumerator.current, index++))\n                    : false;\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        }, () => {\n            disposed = true;\n        });\n    }\n    selectMany(collectionSelector, resultSelector) {\n        var _ = this;\n        if (!resultSelector)\n            resultSelector = (a, b) => b;\n        return new Enumerable(() => {\n            var enumerator;\n            var middleEnumerator;\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n                middleEnumerator = undefined;\n                index = 0;\n            }, (yielder) => {\n                if (middleEnumerator === VOID0 && !enumerator.moveNext())\n                    return false;\n                do {\n                    if (!middleEnumerator) {\n                        var middleSeq = collectionSelector(enumerator.current, index++);\n                        if (!middleSeq)\n                            continue;\n                        middleEnumerator = Enumerator_1.from(middleSeq);\n                    }\n                    if (middleEnumerator.moveNext())\n                        return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\n                    middleEnumerator.dispose();\n                    middleEnumerator = null;\n                } while (enumerator.moveNext());\n                return false;\n            }, () => {\n                Utility_1.dispose(enumerator, middleEnumerator);\n                enumerator = null;\n                middleEnumerator = null;\n            });\n        });\n    }\n    choose(selector) {\n        var _ = this, disposed = !_.throwIfDisposed();\n        return new Enumerable(() => {\n            var enumerator;\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                index = 0;\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                throwIfDisposed(disposed);\n                while (enumerator.moveNext()) {\n                    var result = selector(enumerator.current, index++);\n                    if (result !== null && result !== VOID0)\n                        return yielder.yieldReturn(result);\n                }\n                return false;\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        }, () => {\n            disposed = true;\n        });\n    }\n    where(predicate) {\n        var _ = this, disposed = !_.throwIfDisposed();\n        if (predicate.length < 2)\n            return new WhereEnumerable(_, predicate);\n        return new Enumerable(() => {\n            var enumerator;\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                index = 0;\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                throwIfDisposed(disposed);\n                while (enumerator.moveNext()) {\n                    if (predicate(enumerator.current, index++))\n                        return yielder.yieldReturn(enumerator.current);\n                }\n                return false;\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        }, () => {\n            disposed = true;\n        });\n    }\n    ofType(type) {\n        var typeName;\n        switch (type) {\n            case Number:\n                typeName = Types_1.default.NUMBER;\n                break;\n            case String:\n                typeName = Types_1.default.STRING;\n                break;\n            case Boolean:\n                typeName = Types_1.default.BOOLEAN;\n                break;\n            case Function:\n                typeName = Types_1.default.FUNCTION;\n                break;\n            default:\n                return this\n                    .where(x => x instanceof type);\n        }\n        return this\n            .where(x => typeof x === typeName);\n    }\n    except(second, compareSelector) {\n        var _ = this, disposed = !_.throwIfDisposed();\n        return new Enumerable(() => {\n            var enumerator;\n            var keys;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                enumerator = _.getEnumerator();\n                keys = new Dictionary_1.default(compareSelector);\n                if (second)\n                    Enumerable.forEach(second, key => keys.addByKeyValue(key, true));\n            }, (yielder) => {\n                throwIfDisposed(disposed);\n                while (enumerator.moveNext()) {\n                    var current = enumerator.current;\n                    if (!keys.containsKey(current)) {\n                        keys.addByKeyValue(current, true);\n                        return yielder.yieldReturn(current);\n                    }\n                }\n                return false;\n            }, () => {\n                Utility_1.dispose(enumerator);\n                keys.clear();\n            });\n        }, () => {\n            disposed = true;\n        });\n    }\n    distinct(compareSelector) {\n        return this.except(null, compareSelector);\n    }\n    distinctUntilChanged(compareSelector) {\n        var _ = this, disposed = !_.throwIfDisposed();\n        return new Enumerable(() => {\n            var enumerator;\n            var compareKey;\n            var initial = true;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                throwIfDisposed(disposed);\n                while (enumerator.moveNext()) {\n                    var key = compareSelector(enumerator.current);\n                    if (initial) {\n                        initial = false;\n                    }\n                    else if (compareKey === key) {\n                        continue;\n                    }\n                    compareKey = key;\n                    return yielder.yieldReturn(enumerator.current);\n                }\n                return false;\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        }, () => {\n            disposed = true;\n        });\n    }\n    reverse() {\n        var _ = this, disposed = !_.throwIfDisposed();\n        return new Enumerable(() => {\n            var buffer;\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                buffer = _.toArray();\n                index = buffer.length;\n            }, (yielder) => index > 0\n                && yielder.yieldReturn(buffer[--index]), () => {\n                buffer.length = 0;\n            });\n        }, () => {\n            disposed = true;\n        });\n    }\n    shuffle() {\n        var _ = this, disposed = !_.throwIfDisposed();\n        return new Enumerable(() => {\n            var buffer;\n            var capacity;\n            var len;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                buffer = _.toArray();\n                capacity = len = buffer.length;\n            }, (yielder) => {\n                if (!len)\n                    return yielder.yieldBreak();\n                var selectedIndex = Integer_1.default.random(len);\n                var selectedValue = buffer[selectedIndex];\n                buffer[selectedIndex] = buffer[--len];\n                buffer[len] = null;\n                if (len % 32 == 0)\n                    buffer.length = len;\n                return yielder.yieldReturn(selectedValue);\n            }, () => {\n                buffer.length = 0;\n            });\n        }, () => {\n            disposed = true;\n        });\n    }\n    count(predicate) {\n        var _ = this;\n        _.throwIfDisposed();\n        var count = 0;\n        if (predicate) {\n            _.forEach((x, i) => {\n                if (predicate(x, i))\n                    ++count;\n            });\n        }\n        else {\n            _.forEach(() => {\n                ++count;\n            });\n        }\n        return count;\n    }\n    all(predicate) {\n        var result = true;\n        this.forEach(x => {\n            if (!predicate(x)) {\n                result = false;\n                return false;\n            }\n        });\n        return result;\n    }\n    every(predicate) {\n        return this.all(predicate);\n    }\n    any(predicate) {\n        var result = false;\n        if (predicate) {\n            this.forEach(x => {\n                result = predicate(x);\n                return !result;\n            });\n        }\n        else {\n            this.forEach(() => {\n                result = true;\n                return false;\n            });\n        }\n        return result;\n    }\n    some(predicate) {\n        return this.any(predicate);\n    }\n    isEmpty() {\n        return !this.any();\n    }\n    contains(value, compareSelector) {\n        return compareSelector\n            ? this.any(v => compareSelector(v) === compareSelector(value))\n            : this.any(v => v === value);\n    }\n    indexOf(value, compareSelector) {\n        var found = -1;\n        if (compareSelector)\n            this.forEach((element, i) => {\n                if (Values.areEqual(compareSelector(element), compareSelector(value), true)) {\n                    found = i;\n                    return false;\n                }\n            });\n        else\n            this.forEach((element, i) => {\n                if (Values.areEqual(element, value, true)) {\n                    found = i;\n                    return false;\n                }\n            });\n        return found;\n    }\n    lastIndexOf(value, compareSelector) {\n        var result = -1;\n        if (compareSelector)\n            this.forEach((element, i) => {\n                if (Values.areEqual(compareSelector(element), compareSelector(value), true))\n                    result\n                        = i;\n            });\n        else\n            this.forEach((element, i) => {\n                if (Values.areEqual(element, value, true))\n                    result = i;\n            });\n        return result;\n    }\n    defaultIfEmpty(defaultValue = null) {\n        var _ = this, disposed = !_.throwIfDisposed();\n        return new Enumerable(() => {\n            var enumerator;\n            var isFirst;\n            return new EnumeratorBase_1.default(() => {\n                isFirst = true;\n                throwIfDisposed(disposed);\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                throwIfDisposed(disposed);\n                if (enumerator.moveNext()) {\n                    isFirst = false;\n                    return yielder.yieldReturn(enumerator.current);\n                }\n                else if (isFirst) {\n                    isFirst = false;\n                    return yielder.yieldReturn(defaultValue);\n                }\n                return false;\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        });\n    }\n    zip(second, resultSelector) {\n        var _ = this;\n        return new Enumerable(() => {\n            var firstEnumerator;\n            var secondEnumerator;\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                index = 0;\n                firstEnumerator = _.getEnumerator();\n                secondEnumerator = Enumerator_1.from(second);\n            }, (yielder) => firstEnumerator.moveNext() && secondEnumerator.moveNext()\n                && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)), () => {\n                Utility_1.dispose(firstEnumerator, secondEnumerator);\n            });\n        });\n    }\n    zipMultiple(second, resultSelector) {\n        var _ = this;\n        if (!second.length)\n            return Enumerable.empty();\n        return new Enumerable(() => {\n            var secondTemp;\n            var firstEnumerator;\n            var secondEnumerator;\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                secondTemp = new Queue_1.default(second);\n                index = 0;\n                firstEnumerator = _.getEnumerator();\n                secondEnumerator = null;\n            }, (yielder) => {\n                if (firstEnumerator.moveNext()) {\n                    while (true) {\n                        while (!secondEnumerator) {\n                            if (secondTemp.count) {\n                                var next = secondTemp.dequeue();\n                                if (next)\n                                    secondEnumerator = Enumerator_1.from(next);\n                            }\n                            else\n                                return yielder.yieldBreak();\n                        }\n                        if (secondEnumerator.moveNext())\n                            return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                        secondEnumerator.dispose();\n                        secondEnumerator = null;\n                    }\n                }\n                return yielder.yieldBreak();\n            }, () => {\n                Utility_1.dispose(firstEnumerator, secondTemp);\n            });\n        });\n    }\n    join(inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector = Functions.Identity) {\n        var _ = this;\n        return new Enumerable(() => {\n            var outerEnumerator;\n            var lookup;\n            var innerElements = null;\n            var innerCount = 0;\n            return new EnumeratorBase_1.default(() => {\n                outerEnumerator = _.getEnumerator();\n                lookup = Enumerable.from(inner)\n                    .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n            }, (yielder) => {\n                while (true) {\n                    if (innerElements != null) {\n                        var innerElement = innerElements[innerCount++];\n                        if (innerElement !== VOID0)\n                            return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\n                        innerElement = null;\n                        innerCount = 0;\n                    }\n                    if (outerEnumerator.moveNext()) {\n                        var key = outerKeySelector(outerEnumerator.current);\n                        innerElements = lookup.get(key);\n                    }\n                    else {\n                        return yielder.yieldBreak();\n                    }\n                }\n            }, () => {\n                Utility_1.dispose(outerEnumerator);\n            });\n        });\n    }\n    groupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector = Functions.Identity) {\n        var _ = this;\n        return new Enumerable(() => {\n            var enumerator;\n            var lookup = null;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n                lookup = Enumerable.from(inner)\n                    .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n            }, (yielder) => enumerator.moveNext()\n                && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current)))), () => {\n                Utility_1.dispose(enumerator);\n            });\n        });\n    }\n    concatWith(other) {\n        var _ = this;\n        return new Enumerable(() => {\n            var firstEnumerator;\n            var secondEnumerator;\n            return new EnumeratorBase_1.default(() => {\n                firstEnumerator = _.getEnumerator();\n            }, (yielder) => {\n                if (firstEnumerator != null) {\n                    if (firstEnumerator.moveNext())\n                        return yielder.yieldReturn(firstEnumerator.current);\n                    secondEnumerator = Enumerator_1.from(other);\n                    firstEnumerator.dispose();\n                    firstEnumerator = null;\n                }\n                if (secondEnumerator.moveNext())\n                    return yielder.yieldReturn(secondEnumerator.current);\n                return false;\n            }, () => {\n                Utility_1.dispose(firstEnumerator, secondEnumerator);\n            });\n        });\n    }\n    merge(enumerables) {\n        var _ = this;\n        if (!enumerables.length)\n            return _;\n        if (enumerables.length == 1)\n            return _.concatWith(enumerables[0]);\n        return new Enumerable(() => {\n            var enumerator;\n            var queue;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n                queue = new Queue_1.default(enumerables);\n            }, (yielder) => {\n                while (true) {\n                    while (!enumerator && queue.count) {\n                        enumerator = Enumerator_1.from(queue.dequeue());\n                    }\n                    if (enumerator && enumerator.moveNext())\n                        return yielder.yieldReturn(enumerator.current);\n                    if (enumerator) {\n                        enumerator.dispose();\n                        enumerator = null;\n                        continue;\n                    }\n                    return yielder.yieldBreak();\n                }\n            }, () => {\n                Utility_1.dispose(enumerator, queue);\n            });\n        });\n    }\n    concat(...enumerables) {\n        var _ = this;\n        if (enumerables.length == 0)\n            return _;\n        if (enumerables.length == 1)\n            return _.concatWith(enumerables[0]);\n        return _.merge(enumerables);\n    }\n    insertAt(index, other) {\n        if (isNaN(index) || index < 0 || !isFinite(index))\n            throw new Error(\"'index' is invalid or out of bounds.\");\n        Integer_1.default.assert(index, \"index\");\n        var n = index;\n        var _ = this;\n        _.throwIfDisposed();\n        return new Enumerable(() => {\n            var firstEnumerator;\n            var secondEnumerator;\n            var count = 0;\n            var isEnumerated = false;\n            return new EnumeratorBase_1.default(() => {\n                count = 0;\n                firstEnumerator = _.getEnumerator();\n                secondEnumerator = Enumerator_1.from(other);\n                isEnumerated = false;\n            }, (yielder) => {\n                if (count == n) {\n                    isEnumerated = true;\n                    if (secondEnumerator.moveNext())\n                        return yielder.yieldReturn(secondEnumerator.current);\n                }\n                if (firstEnumerator.moveNext()) {\n                    count++;\n                    return yielder.yieldReturn(firstEnumerator.current);\n                }\n                return !isEnumerated\n                    && secondEnumerator.moveNext()\n                    && yielder.yieldReturn(secondEnumerator.current);\n            }, () => {\n                Utility_1.dispose(firstEnumerator, secondEnumerator);\n            });\n        });\n    }\n    alternateMultiple(sequence) {\n        var _ = this;\n        return new Enumerable(() => {\n            var buffer, mode, enumerator, alternateEnumerator;\n            return new EnumeratorBase_1.default(() => {\n                alternateEnumerator = new ArrayEnumerator_1.default(Enumerable.toArray(sequence));\n                enumerator = _.getEnumerator();\n                var hasAtLeastOne = enumerator.moveNext();\n                mode = hasAtLeastOne\n                    ? 1\n                    : 0;\n                if (hasAtLeastOne)\n                    buffer = enumerator.current;\n            }, (yielder) => {\n                switch (mode) {\n                    case 0:\n                        return yielder.yieldBreak();\n                    case 2:\n                        if (alternateEnumerator.moveNext())\n                            return yielder.yieldReturn(alternateEnumerator.current);\n                        alternateEnumerator.reset();\n                        mode = 1;\n                        break;\n                }\n                var latest = buffer;\n                var another = enumerator.moveNext();\n                mode = another\n                    ? 2\n                    : 0;\n                if (another)\n                    buffer = enumerator.current;\n                return yielder.yieldReturn(latest);\n            }, () => {\n                Utility_1.dispose(enumerator, alternateEnumerator);\n            });\n        });\n    }\n    alternateSingle(value) {\n        return this.alternateMultiple(Enumerable.make(value));\n    }\n    alternate(...sequence) {\n        return this.alternateMultiple(sequence);\n    }\n    intersect(second, compareSelector) {\n        var _ = this;\n        return new Enumerable(() => {\n            var enumerator;\n            var keys;\n            var outs;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n                keys = new Dictionary_1.default(compareSelector);\n                outs = new Dictionary_1.default(compareSelector);\n                Enumerable.from(second)\n                    .forEach(key => {\n                    keys.addByKeyValue(key, true);\n                });\n            }, (yielder) => {\n                while (enumerator.moveNext()) {\n                    var current = enumerator.current;\n                    if (!outs.containsKey(current) && keys.containsKey(current)) {\n                        outs.addByKeyValue(current, true);\n                        return yielder.yieldReturn(current);\n                    }\n                }\n                return yielder.yieldBreak();\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        });\n    }\n    sequenceEqual(second, equalityComparer = Values.areEqual) {\n        return Utility_1.using(this.getEnumerator(), e1 => Utility_1.using(Enumerable.from(second).getEnumerator(), e2 => {\n            while (e1.moveNext()) {\n                if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\n                    return false;\n            }\n            return !e2.moveNext();\n        }));\n    }\n    union(second, compareSelector = Functions.Identity) {\n        var _ = this;\n        return new Enumerable(() => {\n            var firstEnumerator;\n            var secondEnumerator;\n            var keys;\n            return new EnumeratorBase_1.default(() => {\n                firstEnumerator = _.getEnumerator();\n                keys = new Dictionary_1.default(compareSelector);\n            }, (yielder) => {\n                var current;\n                if (secondEnumerator === VOID0) {\n                    while (firstEnumerator.moveNext()) {\n                        current = firstEnumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, null);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    secondEnumerator = Enumerable.from(second).getEnumerator();\n                }\n                while (secondEnumerator.moveNext()) {\n                    current = secondEnumerator.current;\n                    if (!keys.containsKey(current)) {\n                        keys.addByKeyValue(current, null);\n                        return yielder.yieldReturn(current);\n                    }\n                }\n                return false;\n            }, () => {\n                Utility_1.dispose(firstEnumerator, secondEnumerator);\n            });\n        });\n    }\n    orderBy(keySelector = Functions.Identity) {\n        return new OrderedEnumerable(this, keySelector, 1);\n    }\n    orderUsing(comparison) {\n        return new OrderedEnumerable(this, null, 1, null, comparison);\n    }\n    orderUsingReversed(comparison) {\n        return new OrderedEnumerable(this, null, -1, null, comparison);\n    }\n    orderByDescending(keySelector = Functions.Identity) {\n        return new OrderedEnumerable(this, keySelector, -1);\n    }\n    groupBy(keySelector, elementSelector, compareSelector) {\n        var _ = this;\n        if (!elementSelector)\n            elementSelector = Functions.Identity;\n        return new Enumerable(() => _.toLookup(keySelector, elementSelector, compareSelector)\n            .getEnumerator());\n    }\n    partitionBy(keySelector, elementSelector, resultSelector = (key, elements) => new Grouping(key, elements), compareSelector = Functions.Identity) {\n        var _ = this;\n        if (!elementSelector)\n            elementSelector = Functions.Identity;\n        return new Enumerable(() => {\n            var enumerator;\n            var key;\n            var compareKey;\n            var group;\n            var len;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n                if (enumerator.moveNext()) {\n                    key = keySelector(enumerator.current);\n                    compareKey = compareSelector(key);\n                    group = [elementSelector(enumerator.current)];\n                    len = 1;\n                }\n                else\n                    group = null;\n            }, (yielder) => {\n                if (!group)\n                    return yielder.yieldBreak();\n                var hasNext, c;\n                while ((hasNext = enumerator.moveNext())) {\n                    c = enumerator.current;\n                    if (compareKey === compareSelector(keySelector(c)))\n                        group[len++] = elementSelector(c);\n                    else\n                        break;\n                }\n                var result = resultSelector(key, group);\n                if (hasNext) {\n                    c = enumerator.current;\n                    key = keySelector(c);\n                    compareKey = compareSelector(key);\n                    group = [elementSelector(c)];\n                    len = 1;\n                }\n                else {\n                    group = null;\n                }\n                return yielder.yieldReturn(result);\n            }, () => {\n                Utility_1.dispose(enumerator);\n                group = null;\n            });\n        });\n    }\n    buffer(size) {\n        if (size < 1 || !isFinite(size))\n            throw new Error(\"Invalid buffer size.\");\n        Integer_1.default.assert(size, \"size\");\n        var _ = this, len;\n        return new Enumerable(() => {\n            var enumerator;\n            return new EnumeratorBase_1.default(() => {\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                var array = ArrayUtility.initialize(size);\n                len = 0;\n                while (len < size && enumerator.moveNext) {\n                    array[len++] = enumerator.current;\n                }\n                array.length = len;\n                return len && yielder.yieldReturn(array);\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        });\n    }\n    aggregate(func, seed) {\n        return this.scan(func, seed).lastOrDefault();\n    }\n    average(selector = Types_1.default.numberOrNaN) {\n        var sum = 0;\n        var sumInfinite = 0;\n        var count = 0;\n        this.forEach(function (x) {\n            var value = selector(x);\n            if (isNaN(value)) {\n                sum = NaN;\n                return false;\n            }\n            if (isFinite(value))\n                sum += value;\n            else\n                sumInfinite += value > 0 ? (+1) : (-1);\n            ++count;\n        });\n        if (sumInfinite)\n            return sumInfinite * Infinity;\n        return (isNaN(sum) || !count)\n            ? NaN\n            : (sum / count);\n    }\n    max() {\n        return this.aggregate(Functions.Greater);\n    }\n    min() {\n        return this.aggregate(Functions.Lesser);\n    }\n    maxBy(keySelector = Functions.Identity) {\n        return this.aggregate((a, b) => (keySelector(a) > keySelector(b)) ? a : b);\n    }\n    minBy(keySelector = Functions.Identity) {\n        return this.aggregate((a, b) => (keySelector(a) < keySelector(b)) ? a : b);\n    }\n    sum(selector = Types_1.default.numberOrNaN) {\n        var sum = 0;\n        var sumInfinite = 0;\n        this.forEach(x => {\n            var value = selector(x);\n            if (isNaN(value)) {\n                sum = NaN;\n                return false;\n            }\n            if (isFinite(value))\n                sum += value;\n            else\n                sumInfinite += value > 0 ? (+1) : (-1);\n        });\n        return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\n    }\n    product(selector = Types_1.default.numberOrNaN) {\n        var result = 1, exists = false;\n        this.forEach(x => {\n            exists = true;\n            var value = selector(x);\n            if (isNaN(value)) {\n                result = NaN;\n                return false;\n            }\n            if (value == 0) {\n                result = 0;\n                return false;\n            }\n            result *= value;\n        });\n        return (exists && isNaN(result)) ? NaN : result;\n    }\n    elementAt(index) {\n        if (isNaN(index) || index < 0 || !isFinite(index))\n            throw new Error(\"'index' is invalid or out of bounds.\");\n        Integer_1.default.assert(index, \"index\");\n        var n = index;\n        var _ = this;\n        _.throwIfDisposed();\n        var value = undefined;\n        var found = false;\n        _.forEach((x, i) => {\n            if (i == n) {\n                value = x;\n                found = true;\n                return false;\n            }\n        });\n        if (!found)\n            throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\n        return value;\n    }\n    elementAtOrDefault(index, defaultValue = null) {\n        if (isNaN(index) || index < 0 || !isFinite(index))\n            throw new Error(\"'index' is invalid or out of bounds.\");\n        Integer_1.default.assert(index, \"index\");\n        var n = index;\n        var _ = this;\n        _.throwIfDisposed();\n        var value = undefined;\n        var found = false;\n        _.forEach((x, i) => {\n            if (i == n) {\n                value = x;\n                found = true;\n                return false;\n            }\n        });\n        return (!found) ? defaultValue : value;\n    }\n    first() {\n        var _ = this;\n        _.throwIfDisposed();\n        var value = undefined;\n        var found = false;\n        _.forEach(x => {\n            value = x;\n            found = true;\n            return false;\n        });\n        if (!found)\n            throw new Error(\"first:No element satisfies the condition.\");\n        return value;\n    }\n    firstOrDefault(defaultValue = null) {\n        var _ = this;\n        _.throwIfDisposed();\n        var value = undefined;\n        var found = false;\n        _.forEach(x => {\n            value = x;\n            found = true;\n            return false;\n        });\n        return (!found) ? defaultValue : value;\n    }\n    last() {\n        var _ = this;\n        _.throwIfDisposed();\n        var value = undefined;\n        var found = false;\n        _.forEach(x => {\n            found = true;\n            value = x;\n        });\n        if (!found)\n            throw new Error(\"last:No element satisfies the condition.\");\n        return value;\n    }\n    lastOrDefault(defaultValue = null) {\n        var _ = this;\n        _.throwIfDisposed();\n        var value = undefined;\n        var found = false;\n        _.forEach(x => {\n            found = true;\n            value = x;\n        });\n        return (!found) ? defaultValue : value;\n    }\n    single() {\n        var _ = this;\n        _.throwIfDisposed();\n        var value = undefined;\n        var found = false;\n        _.forEach(x => {\n            if (!found) {\n                found = true;\n                value = x;\n            }\n            else\n                throw new Error(\"single:sequence contains more than one element.\");\n        });\n        if (!found)\n            throw new Error(\"single:No element satisfies the condition.\");\n        return value;\n    }\n    singleOrDefault(defaultValue = null) {\n        var _ = this;\n        _.throwIfDisposed();\n        var value = undefined;\n        var found = false;\n        _.forEach(x => {\n            if (!found) {\n                found = true;\n                value = x;\n            }\n            else\n                throw new Error(\"single:sequence contains more than one element.\");\n        });\n        return (!found) ? defaultValue : value;\n    }\n    share() {\n        var _ = this;\n        _.throwIfDisposed();\n        var sharedEnumerator;\n        return new Enumerable(() => {\n            return new EnumeratorBase_1.default(() => {\n                if (!sharedEnumerator)\n                    sharedEnumerator = _.getEnumerator();\n            }, (yielder) => sharedEnumerator.moveNext()\n                && yielder.yieldReturn(sharedEnumerator.current));\n        }, () => {\n            Utility_1.dispose(sharedEnumerator);\n        });\n    }\n    memoize() {\n        var _ = this, disposed = !_.throwIfDisposed();\n        var cache;\n        var enumerator;\n        return new Enumerable(() => {\n            var index = 0;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                if (!enumerator)\n                    enumerator = _.getEnumerator();\n                if (!cache)\n                    cache = [];\n                index = 0;\n            }, (yielder) => {\n                throwIfDisposed(disposed);\n                var i = index++;\n                if (i >= cache.length) {\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(cache[i] = enumerator.current)\n                        : false;\n                }\n                return yielder.yieldReturn(cache[i]);\n            });\n        }, () => {\n            disposed = true;\n            if (cache)\n                cache.length = 0;\n            cache = null;\n            Utility_1.dispose(enumerator);\n            enumerator = null;\n        });\n    }\n    catchError(handler) {\n        var _ = this, disposed = !_.throwIfDisposed();\n        return new Enumerable(() => {\n            var enumerator;\n            return new EnumeratorBase_1.default(() => {\n                try {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }\n                catch (e) {\n                }\n            }, (yielder) => {\n                try {\n                    throwIfDisposed(disposed);\n                    if (enumerator.moveNext())\n                        return yielder.yieldReturn(enumerator.current);\n                }\n                catch (e) {\n                    handler(e);\n                }\n                return false;\n            }, () => {\n                Utility_1.dispose(enumerator);\n            });\n        });\n    }\n    finallyAction(action) {\n        var _ = this, disposed = !_.throwIfDisposed();\n        return new Enumerable(() => {\n            var enumerator;\n            return new EnumeratorBase_1.default(() => {\n                throwIfDisposed(disposed);\n                enumerator = _.getEnumerator();\n            }, (yielder) => {\n                throwIfDisposed(disposed);\n                return (enumerator.moveNext())\n                    ? yielder.yieldReturn(enumerator.current)\n                    : false;\n            }, () => {\n                try {\n                    Utility_1.dispose(enumerator);\n                }\n                finally {\n                    action();\n                }\n            });\n        });\n    }\n}\nexports.Enumerable = Enumerable;\nclass ArrayEnumerable extends Enumerable {\n    constructor(source) {\n        super(() => {\n            _.throwIfDisposed();\n            return new ArrayEnumerator_1.default(() => {\n                _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\n                return _._source;\n            });\n        });\n        var _ = this;\n        _._disposableObjectName = \"ArrayEnumerable\";\n        _._source = source;\n    }\n    _onDispose() {\n        super._onDispose();\n        this._source = null;\n    }\n    get source() {\n        return this._source;\n    }\n    toArray() {\n        var s = this.source;\n        if (!s)\n            return [];\n        if (Array.isArray(s))\n            return s.slice();\n        var len = s.length, result = ArrayUtility.initialize(len);\n        for (let i = 0; i < len; ++i) {\n            result[i] = s[i];\n        }\n        return result;\n    }\n    asEnumerable() {\n        return new ArrayEnumerable(this._source);\n    }\n    forEach(action) {\n        var _ = this;\n        _.throwIfDisposed();\n        var source = _._source;\n        if (source) {\n            for (let i = 0; i < source.length; ++i) {\n                if (action(source[i], i) === false)\n                    break;\n            }\n        }\n    }\n    any(predicate) {\n        var _ = this;\n        _.throwIfDisposed();\n        var source = _._source, len = source ? source.length : 0;\n        return len && (!predicate || super.any(predicate));\n    }\n    count(predicate) {\n        var _ = this;\n        _.throwIfDisposed();\n        var source = _._source, len = source ? source.length : 0;\n        return len && (predicate ? super.count(predicate) : len);\n    }\n    elementAt(index) {\n        var _ = this;\n        _.throwIfDisposed();\n        var source = _._source;\n        return (index < source.length && index >= 0)\n            ? source[index]\n            : super.elementAt(index);\n    }\n    elementAtOrDefault(index, defaultValue = null) {\n        var _ = this;\n        _.throwIfDisposed();\n        var source = _._source;\n        return (index < source.length && index >= 0)\n            ? source[index]\n            : defaultValue;\n    }\n    first() {\n        var _ = this;\n        _.throwIfDisposed();\n        var source = _._source;\n        return (source && source.length)\n            ? source[0]\n            : super.first();\n    }\n    firstOrDefault(defaultValue = null) {\n        var _ = this;\n        _.throwIfDisposed();\n        var source = _._source;\n        return (source && source.length)\n            ? source[0]\n            : defaultValue;\n    }\n    last() {\n        var _ = this;\n        _.throwIfDisposed();\n        var source = _._source, len = source.length;\n        return (len)\n            ? source[len - 1]\n            : super.last();\n    }\n    lastOrDefault(defaultValue = null) {\n        var _ = this;\n        _.throwIfDisposed();\n        var source = _._source, len = source.length;\n        return len\n            ? source[len - 1]\n            : defaultValue;\n    }\n    skip(count) {\n        var _ = this;\n        if (!count || count < 0)\n            return _.asEnumerable();\n        return new Enumerable(() => new ArrayEnumerator_1.default(() => _._source, count));\n    }\n    takeExceptLast(count = 1) {\n        var _ = this, len = _._source ? _._source.length : 0;\n        return _.take(len - count);\n    }\n    takeFromLast(count) {\n        if (!count || count < 0)\n            return Enumerable.empty();\n        var _ = this, len = _._source\n            ? _._source.length\n            : 0;\n        return _.skip(len - count);\n    }\n    reverse() {\n        var _ = this;\n        return new Enumerable(() => new ArrayEnumerator_1.default(() => _._source, _._source\n            ? (_._source.length - 1)\n            : 0, -1));\n    }\n    memoize() {\n        return new ArrayEnumerable(this._source);\n    }\n    sequenceEqual(second, equalityComparer = Values.areEqual) {\n        if (Array.isArray(second))\n            return Arrays.areEqual(this.source, second, true, equalityComparer);\n        if (second instanceof ArrayEnumerable)\n            return second.sequenceEqual(this.source, equalityComparer);\n        return super.sequenceEqual(second, equalityComparer);\n    }\n    toJoinedString(separator = \"\", selector = Functions.Identity) {\n        var s = this._source;\n        return !selector && Array.isArray(s)\n            ? s.join(separator)\n            : super.toJoinedString(separator, selector);\n    }\n}\nclass Grouping extends ArrayEnumerable {\n    constructor(_groupKey, elements) {\n        super(elements);\n        this._groupKey = _groupKey;\n    }\n    get key() {\n        return this._groupKey;\n    }\n}\nclass Lookup {\n    constructor(_dictionary) {\n        this._dictionary = _dictionary;\n    }\n    get count() {\n        return this._dictionary.count;\n    }\n    get(key) {\n        return this._dictionary.getValue(key);\n    }\n    contains(key) {\n        return this._dictionary.containsKey(key);\n    }\n    getEnumerator() {\n        var _ = this;\n        var enumerator;\n        return new EnumeratorBase_1.default(() => {\n            enumerator = _._dictionary.getEnumerator();\n        }, (yielder) => {\n            if (!enumerator.moveNext())\n                return false;\n            var current = enumerator.current;\n            return yielder.yieldReturn(new Grouping(current.key, current.value));\n        }, () => {\n            Utility_1.dispose(enumerator);\n        });\n    }\n}\nclass WhereEnumerable extends Enumerable {\n    constructor(prevSource, prevPredicate) {\n        super(null);\n        this.prevSource = prevSource;\n        this.prevPredicate = prevPredicate;\n    }\n    where(predicate) {\n        if (predicate.length > 1)\n            return super.where(predicate);\n        var prevPredicate = this.prevPredicate;\n        var composedPredicate = (x) => prevPredicate(x) && predicate(x);\n        return new WhereEnumerable(this.prevSource, composedPredicate);\n    }\n    select(selector) {\n        if (selector.length > 1)\n            return super.select(selector);\n        return new WhereSelectEnumerable(this.prevSource, this.prevPredicate, selector);\n    }\n    getEnumerator() {\n        var predicate = this.prevPredicate;\n        var source = this.prevSource;\n        var enumerator;\n        return new EnumeratorBase_1.default(() => {\n            enumerator = source.getEnumerator();\n        }, (yielder) => {\n            while (enumerator.moveNext()) {\n                if (predicate(enumerator.current))\n                    return yielder.yieldReturn(enumerator.current);\n            }\n            return false;\n        }, () => {\n            Utility_1.dispose(enumerator);\n        });\n    }\n    _onDispose() {\n        super._onDispose();\n        this.prevPredicate = null;\n        this.prevSource = null;\n    }\n}\nclass WhereSelectEnumerable extends Enumerable {\n    constructor(prevSource, prevPredicate, prevSelector) {\n        super(null);\n        this.prevSource = prevSource;\n        this.prevPredicate = prevPredicate;\n        this.prevSelector = prevSelector;\n    }\n    where(predicate) {\n        if (predicate.length > 1)\n            return super.where(predicate);\n        return new WhereEnumerable(this, predicate);\n    }\n    select(selector) {\n        if (selector.length > 1)\n            return super.select(selector);\n        var _ = this;\n        var prevSelector = _.prevSelector;\n        var composedSelector = (x) => selector(prevSelector(x));\n        return new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\n    }\n    getEnumerator() {\n        var _ = this, predicate = _.prevPredicate, source = _.prevSource, selector = _.prevSelector, enumerator;\n        return new EnumeratorBase_1.default(() => {\n            enumerator = source.getEnumerator();\n        }, (yielder) => {\n            while (enumerator.moveNext()) {\n                var c = enumerator.current;\n                if (predicate == null || predicate(c)) {\n                    return yielder.yieldReturn(selector(c));\n                }\n            }\n            return false;\n        }, () => {\n            Utility_1.dispose(enumerator);\n        });\n    }\n    _onDispose() {\n        var _ = this;\n        super._onDispose();\n        _.prevPredicate = null;\n        _.prevSource = null;\n        _.prevSelector = null;\n    }\n}\nclass OrderedEnumerable extends Enumerable {\n    constructor(source, keySelector, order, parent, comparer = Values.compare) {\n        super(null);\n        this.source = source;\n        this.keySelector = keySelector;\n        this.order = order;\n        this.parent = parent;\n        this.comparer = comparer;\n    }\n    createOrderedEnumerable(keySelector, order) {\n        return new OrderedEnumerable(this.source, keySelector, order, this);\n    }\n    thenBy(keySelector) {\n        return this.createOrderedEnumerable(keySelector, 1);\n    }\n    thenUsing(comparison) {\n        return new OrderedEnumerable(this.source, null, 1, this, comparison);\n    }\n    thenByDescending(keySelector) {\n        return this.createOrderedEnumerable(keySelector, -1);\n    }\n    thenUsingReversed(comparison) {\n        return new OrderedEnumerable(this.source, null, -1, this, comparison);\n    }\n    getEnumerator() {\n        var _ = this;\n        var buffer;\n        var indexes;\n        var index = 0;\n        return new EnumeratorBase_1.default(() => {\n            index = 0;\n            buffer = Enumerable.toArray(_.source);\n            indexes = createSortContext(_).generateSortedIndexes(buffer);\n        }, (yielder) => {\n            return (index < indexes.length)\n                ? yielder.yieldReturn(buffer[indexes[index++]])\n                : false;\n        }, () => {\n            if (buffer)\n                buffer.length = 0;\n            buffer = null;\n            if (indexes)\n                indexes.length = 0;\n            indexes = null;\n        });\n    }\n    _onDispose() {\n        super._onDispose();\n        this.source = null;\n        this.keySelector = null;\n        this.order = null;\n        this.parent = null;\n    }\n}\nfunction createSortContext(orderedEnumerable, currentContext = null) {\n    var context = new KeySortedContext_1.default(currentContext, orderedEnumerable.keySelector, orderedEnumerable.order, orderedEnumerable.comparer);\n    if (orderedEnumerable.parent)\n        return createSortContext(orderedEnumerable.parent, context);\n    return context;\n}\nfunction throwIfDisposed(disposed, className = \"Enumerable\") {\n    if (disposed)\n        throw new ObjectDisposedException_1.default(className);\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Enumerable;\n"]}