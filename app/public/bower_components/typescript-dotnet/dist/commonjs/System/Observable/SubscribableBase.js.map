{"version":3,"sources":["System/Observable/SubscribableBase.ts","System/Observable/SubscribableBase.js"],"names":[],"mappings":";;;;;;AASA;;;;;;AAEA,IAAA,eAAA,QAAuB,2BAAvB,CAAA;AACA,IAAY,iBAAc,QAAM,uBAAN,CAAd;AACZ,IAAA,iBAAA,QAAyB,gBAAzB,CAAA;;IAIA;AAcC,aAdD,gBAcC,GAAA;8BAdD,kBAcC;;AAEC,aAAK,eAAL,GAAuB,IAAI,aAAA,OAAA,EAA3B,CAFD;KAAA;;iBAdD;;0CAQ0B;AACxB,mBAAO,KAAK,eAAL,CACL,OADK,GAEL,GAFK,CAED;uBAAG,EAAE,UAAF;aAAH,CAFN,CADwB;;;;uCAYxB,YAAsB;AAEtB,gBAAI,OAAO,KAAK,eAAL,CAAqB,KAArB,CAFW;AAGtB,mBAAM,IAAN,EACA;AACC,oBAAG,KAAK,KAAL,CAAW,UAAX,KAAwB,UAAxB,EACH;AACC,0BADD;iBADA,MAKA;AACC,2BAAO,KAAK,IAAL,CADR;iBALA;aAFD;AAYA,mBAAO,IAAP,CAfsB;;;;kCAmBb,YAAsB;AAE/B,gBAAI,IAAI,IAAJ,CAF2B;AAG/B,gBAAI,IAAI,EAAE,cAAF,CAAiB,UAAjB,CAAJ,CAH2B;AAI/B,gBAAG,CAAH,EACC,OAAO,EAAE,KAAF,CADR;AAGA,gBAAI,IAAI,IAAI,eAAA,OAAA,CAAa,CAAjB,EAAoB,UAApB,CAAJ,CAP2B;AAQ/B,cAAE,eAAF,CAAkB,GAAlB,CAAsB,CAAtB,EAR+B;AAU/B,mBAAO,CAAP,CAV+B;;;;oCAapB,YAAsB;AAEjC,gBAAI,IAAI,KAAK,cAAL,CAAoB,UAApB,CAAJ,CAF6B;AAGjC,gBAAG,CAAH,EACA;AACC,oBAAI,IAAI,EAAE,KAAF,CADT;AAEC,kBAAE,MAAF,GAFD;AAGC,kBAAE,OAAF,GAHD;aADA;;;;0CAQ0D;gBAAjC,0EAA4B,qBAAK;;AAC1D,gBAAI,IAAI,IAAJ;gBAAU,KAAK,EAAE,eAAF,CADuC;AAE1D,gBAAI,IAAI,GAAG,OAAH,EAAJ,CAFsD;AAG1D,gBAAI,IAAI,oBAAoB,EAAE,GAAF,CAAM;uBAAG,EAAE,UAAF;aAAH,CAA1B,GAA6C,IAA7C,CAHkD;AAI1D,eAAG,KAAH,GAJ0D;AAM1D,2BAAe,YAAf,CAA4B,CAA5B,EAN0D;AAQ1D,mBAAO,CAAP,CAR0D;;;;yCAW7C;AACb,iBAAK,eAAL,GADa;;;;kCAIP;AACN,iBAAK,eAAL,GADM;;;;WA9ER;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;AC+CA,QAAQ,OAAR,GAAkB,gBAAlB","file":"System/Observable/SubscribableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"../FunctionTypes.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport LinkedList from '../Collections/LinkedList';\r\nimport * as DisposeUtility from '../Disposable/Utility'\r\nimport Subscription from './Subscription';\r\n\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\n\r\nexport default\r\nclass SubscribableBase<TSubscriber>\r\nimplements IDisposable\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedList<Subscription<TSubscriber>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[] {\r\n\t\treturn this.__subscriptions\r\n\t\t\t.toArray()\r\n\t\t\t.map(s=>s.subscriber);\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.__subscriptions = new LinkedList<Subscription<TSubscriber>>();\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedListNode<Subscription<TSubscriber>>\r\n\t{\r\n\t\tvar node = this.__subscriptions.first;\r\n\t\twhile(node)\r\n\t\t{\r\n\t\t\tif(node.value.subscriber===subscriber)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnode = node.next;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn n.value;\r\n\r\n\t\tvar s = new Subscription(_, subscriber);\r\n\t\t_.__subscriptions.add(s);\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tvar n = this._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tvar s = n.value;\r\n\t\t\tn.remove();\r\n\t\t\ts.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[] {\r\n\t\tvar _ = this, _s = _.__subscriptions;\r\n\t\tvar s = _s.toArray();\r\n\t\tvar u = returnSubscribers ? s.map(o=>o.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tDisposeUtility.disposeThese(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void {\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tdispose() {\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\n'use strict';\nconst LinkedList_1 = require('../Collections/LinkedList');\nconst DisposeUtility = require('../Disposable/Utility');\nconst Subscription_1 = require('./Subscription');\nclass SubscribableBase {\n    constructor() {\n        this.__subscriptions = new LinkedList_1.default();\n    }\n    _getSubscribers() {\n        return this.__subscriptions\n            .toArray()\n            .map(s => s.subscriber);\n    }\n    _findEntryNode(subscriber) {\n        var node = this.__subscriptions.first;\n        while (node) {\n            if (node.value.subscriber === subscriber) {\n                break;\n            }\n            else {\n                node = node.next;\n            }\n        }\n        return node;\n    }\n    subscribe(subscriber) {\n        var _ = this;\n        var n = _._findEntryNode(subscriber);\n        if (n)\n            return n.value;\n        var s = new Subscription_1.default(_, subscriber);\n        _.__subscriptions.add(s);\n        return s;\n    }\n    unsubscribe(subscriber) {\n        var n = this._findEntryNode(subscriber);\n        if (n) {\n            var s = n.value;\n            n.remove();\n            s.dispose();\n        }\n    }\n    _unsubscribeAll(returnSubscribers = false) {\n        var _ = this, _s = _.__subscriptions;\n        var s = _s.toArray();\n        var u = returnSubscribers ? s.map(o => o.subscriber) : null;\n        _s.clear();\n        DisposeUtility.disposeThese(s);\n        return u;\n    }\n    unsubscribeAll() {\n        this._unsubscribeAll();\n    }\n    dispose() {\n        this._unsubscribeAll();\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = SubscribableBase;\n"]}