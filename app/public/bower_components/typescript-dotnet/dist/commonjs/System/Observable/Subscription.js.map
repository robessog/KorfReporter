{"version":3,"sources":["System/Observable/Subscription.ts","System/Observable/Subscription.js"],"names":[],"mappings":";;;;;;AAUA;;;;;;IAKA;AAGC,aAHD,YAGC,CACS,aADT,EAES,WAFT,EAEuB;8BALxB,cAKwB;;AADd,aAAA,aAAA,GAAA,aAAA,CACc;AAAd,aAAA,WAAA,GAAA,WAAA,CAAc;AAEtB,YAAI,CAAC,aAAD,IAAkB,CAAC,WAAD,EACrB,MAAM,6CAAN,CADD;KAJD;;iBAHD;;kCAmCQ;AAEN,gBAAI,aAAa,KAAK,UAAL,CAFX;AAGN,gBAAI,eAAe,KAAK,aAAL,CAHb;AAMN,iBAAK,WAAL,GAAmB,IAAnB,CANM;AAON,iBAAK,aAAL,GAAqB,IAArB,CAPM;AAUN,gBAAI,cAAc,YAAd,EACJ;AACC,6BAAa,WAAb,CAAyB,UAAzB,EADD;aADA;;;;4BAlCa;AACb,mBAAO,KAAK,WAAL,CADM;;;;4BAmBC;AAEd,mBAAO,CAAC,KAAK,aAAL,IAAsB,CAAC,KAAK,WAAL,CAFjB;;;;WA9BhB;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ACgBA,QAAQ,OAAR,GAAkB,YAAlB","file":"System/Observable/Subscription.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n///<reference path=\"ISubscribable.d.ts\"/>\r\n///<reference path=\"IObservable.d.ts\"/>\r\n///<reference path=\"../Disposable/IDisposableAware.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n/**\r\n * A registration that an IObservable returns that can be disposed in order to cancel sending data to the observer.\r\n */\r\nexport default\r\nclass Subscription<T> implements IDisposableAware\r\n{\r\n\tconstructor(\r\n\t\tprivate _subscribable: ISubscribable<T>,\r\n\t\tprivate _subscriber: T)\r\n\t{\r\n\t\tif (!_subscribable || !_subscriber)\r\n\t\t\tthrow 'Subscribable and subscriber cannot be null.';\r\n\t}\r\n\r\n\tget subscriber():T {\r\n\t\treturn this._subscriber;\r\n\t}\r\n\r\n\t/*\r\n\t In the case where we could possibly have the following happen:\r\n\r\n\t var u = observable.subscribe(observer);\r\n\r\n\t ...\r\n\r\n\t u.dispose(); // Should only be allowed to unsubscribe once and then it's useless.\r\n\r\n\t // Resubscribing creates a new instance.\r\n\t var x = observable.subscribe(observer);\r\n\r\n\t u.dispose(); // Calling this again should do nothing and 'x' should still work.\r\n\t */\r\n\r\n\tget wasDisposed(): boolean\r\n\t{\r\n\t\treturn !this._subscribable || !this._subscriber;\r\n\t}\r\n\r\n\tdispose(): void\r\n\t{\r\n\t\tvar subscriber = this.subscriber;\r\n\t\tvar subscribable = this._subscribable;\r\n\r\n\t\t// Release the references.  Will prevent potential unwanted recursion.\r\n\t\tthis._subscriber = null;\r\n\t\tthis._subscribable = null;\r\n\r\n\r\n\t\tif (subscriber && subscribable)\r\n\t\t{\r\n\t\t\tsubscribable.unsubscribe(subscriber);\r\n\t\t}\r\n\t}\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\n'use strict';\nclass Subscription {\n    constructor(_subscribable, _subscriber) {\n        this._subscribable = _subscribable;\n        this._subscriber = _subscriber;\n        if (!_subscribable || !_subscriber)\n            throw 'Subscribable and subscriber cannot be null.';\n    }\n    get subscriber() {\n        return this._subscriber;\n    }\n    get wasDisposed() {\n        return !this._subscribable || !this._subscriber;\n    }\n    dispose() {\n        var subscriber = this.subscriber;\n        var subscribable = this._subscribable;\n        this._subscriber = null;\n        this._subscribable = null;\n        if (subscriber && subscribable) {\n            subscribable.unsubscribe(subscriber);\n        }\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Subscription;\n"]}