{"version":3,"sources":["System/KeyValueExtract.js","System/KeyValueExtract.ts"],"names":[],"mappings":";;;;AAIA;;ACCA,IAAA,sBAAA,QAA8B,gCAA9B,CAAA;AACA,IAAA,0BAAA,QAAkC,oCAAlC,CAAA;AAEA,IACC,QAA6B,KAAK,CAAL;IAC7B,MAA6B,GAA7B;IACA,MAA6B,KAA7B;IACA,QAA6B,OAA7B;IACA,OAA6B,MAA7B;IACA,SAA6B,OAAO,KAAP;IAC7B,WAA6B,OAAO,GAAP,GAAa,GAAb;IAC7B,aAA6B,OAAO,GAAP,GAAa,KAAb;IAC7B,sBAA6B,6DAA7B;IACA,sBAA6B,yBAA7B;AAED,SAAA,cAAA,CAA4C,GAA5C,EAAmD;AAElD,WAAO,OAAO,IAAI,cAAJ,CAAmB,GAAnB,CAAP,IAAkC,IAAI,cAAJ,CAAmB,KAAnB,CAAlC,CAF2C;CAAnD;AAAgB,QAAA,cAAA,GAAc,cAAd;AAKhB,SAAA,SAAA,CAAgC,GAAhC,EAA4D;QAAlB,6DAAc,oBAAI;;AAE3D,uBAAmB,GAAnB,EAAwB,OAAO,GAAP,GAAa,GAAb,CAAxB,CAF2D;AAG3D,QAAG,QAAM,IAAN,EACF,MAAM,IAAI,wBAAA,OAAA,CAAsB,OAAO,GAAP,GAAa,GAAb,CAAhC,CADD;AAGA,WAAO,GAAP,CAN2D;CAA5D;AAAgB,QAAA,SAAA,GAAS,SAAT;AAUhB,SAAA,WAAA,CAA4B,KAA5B,EAAiE;QAAlB,6DAAc,oBAAI;;AAEhE,QAAG,MAAM,MAAN,IAAc,CAAd,EACF,MAAM,IAAI,oBAAA,OAAA,CAAkB,IAAtB,EAA4B,0CAA5B,CAAN,CADD;AAGA,cAAU,MAAM,CAAN,CAAV,EAAoB,IAApB,EALgE;CAAjE;AAAgB,QAAA,WAAA,GAAW,WAAX;AAShB,SAAA,kBAAA,CAAsC,KAAtC,EAA+C,IAA/C,EAA0D;AAEzD,QAAG,UAAQ,KAAR,EACF,MAAM,IAAI,oBAAA,OAAA,CAAkB,IAAtB,EAA4B,mBAA5B,CAAN,CADD;AAGA,WAAO,KAAP,CALyD;CAA1D;AAAgB,QAAA,kBAAA,GAAkB,kBAAlB;AAShB,SAAA,eAAA,CACC,IADD,EAEC,EAFD,EAEqC;AAGpC,QAAI,IAAI,IAAJ;QAAU,GAAd;QAAwB,KAAxB,CAHoC;AAIpC,QAAG,gBAAgB,KAAhB,EACH;AACC,oBAAY,IAAZ,EADD;AAEC,cAAM,KAAK,CAAL,CAAN,CAFD;AAGC,gBAAQ,mBAAmB,KAAK,CAAL,CAAnB,EAA4B,MAA5B,CAAR,CAHD;KADA,MAMK,IAAG,eAA4B,IAA5B,CAAH,EACL;AACC,cAAM,UAAU,KAAK,GAAL,CAAhB,CADD;AAEC,gBAAQ,mBAAmB,KAAK,KAAL,EAAY,UAA/B,CAAR,CAFD;KADK,MAML;AACC,cAAM,IAAI,oBAAA,OAAA,CAAkB,IAAtB,EAA4B,mBAA5B,CAAN,CADD;KANK;AAUL,WAAO,GAAG,GAAH,EAAQ,KAAR,CAAP,CApBoC;CAFrC;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADLA,QAAQ,OAAR,GAAkB,eAAlB","file":"System/KeyValueExtract.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst ArgumentException_1 = require(\"./Exceptions/ArgumentException\");\nconst ArgumentNullException_1 = require(\"./Exceptions/ArgumentNullException\");\nconst VOID0 = void 0, DOT = '.', KEY = 'key', VALUE = 'value', ITEM = 'item', ITEM_1 = ITEM + '[1]', ITEM_KEY = ITEM + DOT + KEY, ITEM_VALUE = ITEM + DOT + VALUE, INVALID_KVP_MESSAGE = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.', CANNOT_BE_UNDEFINED = 'Cannot equal undefined.';\nfunction isKeyValuePair(kvp) {\n    return kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\n}\nexports.isKeyValuePair = isKeyValuePair;\nfunction assertKey(key, name = ITEM) {\n    assertNotUndefined(key, name + DOT + KEY);\n    if (key === null)\n        throw new ArgumentNullException_1.default(name + DOT + KEY);\n    return key;\n}\nexports.assertKey = assertKey;\nfunction assertTuple(tuple, name = ITEM) {\n    if (tuple.length != 2)\n        throw new ArgumentException_1.default(name, 'KeyValuePair tuples must be of length 2.');\n    assertKey(tuple[0], name);\n}\nexports.assertTuple = assertTuple;\nfunction assertNotUndefined(value, name) {\n    if (value === VOID0)\n        throw new ArgumentException_1.default(name, CANNOT_BE_UNDEFINED);\n    return value;\n}\nexports.assertNotUndefined = assertNotUndefined;\nfunction extractKeyValue(item, to) {\n    var _ = this, key, value;\n    if (item instanceof Array) {\n        assertTuple(item);\n        key = item[0];\n        value = assertNotUndefined(item[1], ITEM_1);\n    }\n    else if (isKeyValuePair(item)) {\n        key = assertKey(item.key);\n        value = assertNotUndefined(item.value, ITEM_VALUE);\n    }\n    else {\n        throw new ArgumentException_1.default(ITEM, INVALID_KVP_MESSAGE);\n    }\n    return to(key, value);\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = extractKeyValue;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport ArgumentException from \"./Exceptions/ArgumentException\";\r\nimport ArgumentNullException from \"./Exceptions/ArgumentNullException\";\r\n\r\nconst\r\n\tVOID0:any                  = void 0,\r\n\tDOT:string                 = '.',\r\n\tKEY:string                 = 'key',\r\n\tVALUE:string               = 'value',\r\n\tITEM:string                = 'item',\r\n\tITEM_1:string              = ITEM + '[1]',\r\n\tITEM_KEY:string            = ITEM + DOT + KEY,\r\n\tITEM_VALUE:string          = ITEM + DOT + VALUE,\r\n\tINVALID_KVP_MESSAGE:string = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.',\r\n\tCANNOT_BE_UNDEFINED:string = 'Cannot equal undefined.';\r\n\r\nexport function isKeyValuePair<TKey,TValue>(kvp:any):kvp is IKeyValuePair<TKey,TValue>\r\n{\r\n\treturn kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\r\n}\r\n\r\nexport function assertKey<TKey>(key:TKey, name:string = ITEM):TKey\r\n{\r\n\tassertNotUndefined(key, name + DOT + KEY);\r\n\tif(key===null)\r\n\t\tthrow new ArgumentNullException(name + DOT + KEY);\r\n\r\n\treturn key;\r\n}\r\n\r\n\r\nexport function assertTuple(tuple:IArray<any>, name:string = ITEM):void\r\n{\r\n\tif(tuple.length!=2)\r\n\t\tthrow new ArgumentException(name, 'KeyValuePair tuples must be of length 2.');\r\n\r\n\tassertKey(tuple[0], name);\r\n}\r\n\r\n\r\nexport function assertNotUndefined<T>(value:T, name:string):T\r\n{\r\n\tif(value===VOID0)\r\n\t\tthrow new ArgumentException(name, CANNOT_BE_UNDEFINED);\r\n\r\n\treturn value;\r\n}\r\n\r\n\r\nexport default function extractKeyValue<TKey, TValue, TResult>(\r\n\titem:KeyValuePair<TKey, TValue>,\r\n\tto:(key:TKey, value:TValue)=>TResult):TResult\r\n{\r\n\r\n\tvar _ = this, key:TKey, value:TValue;\r\n\tif(item instanceof Array)\r\n\t{\r\n\t\tassertTuple(item);\r\n\t\tkey = item[0];\r\n\t\tvalue = assertNotUndefined(item[1], ITEM_1);\r\n\t}\r\n\telse if(isKeyValuePair<TKey,TValue>(item))\r\n\t{\r\n\t\tkey = assertKey(item.key);\r\n\t\tvalue = assertNotUndefined(item.value, ITEM_VALUE);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthrow new ArgumentException(ITEM, INVALID_KVP_MESSAGE);\r\n\t}\r\n\r\n\treturn to(key, value);\r\n}\r\n"]}