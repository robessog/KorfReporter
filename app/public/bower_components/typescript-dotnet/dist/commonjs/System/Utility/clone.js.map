{"version":3,"sources":["System/Utility/clone.js","System/Utility/clone.ts"],"names":[],"mappings":";;;;AAIA;;ACCA,IAAA,UAAA,QAAiB,UAAjB,CAAA;AAEA,SAAA,KAAA,CAA8B,MAA9B,EAA0D;QAAhB,8DAAe,iBAAC;;AAEzD,QAAG,QAAM,CAAN,EACF,OAAO,MAAP,CADD;AAIA,QAAG,CAAC,QAAA,OAAA,CAAK,QAAL,CAAc,MAAd,CAAD,EAAwB,OAAO,MAAP,CAA3B;AAEA,QAAI,MAAJ,CARyD;AASzD,QAAG,MAAM,OAAN,CAAc,MAAd,CAAH,EACA;AACC,iBAAe,OAAQ,KAAR,EAAf,CADD;AAEC,YAAG,QAAM,CAAN,EACH;AACC,iBAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,OAAO,MAAP,EAAe,GAAhC,EACA;AACC,uBAAO,CAAP,IAAY,MAAM,OAAO,CAAP,CAAN,EAAiB,QAAQ,CAAR,CAA7B,CADD;aADA;SAFD;KAHD,MAYA;AACC,iBAAS,EAAT,CADD;AAEC,YAAG,QAAM,CAAN,EAAS,KAAI,IAAI,CAAJ,IAAS,MAAb,EACZ;AAEC,mBAAO,CAAP,IAAY,MAAM,OAAO,CAAP,CAAN,EAAiB,QAAQ,CAAR,CAA7B,CAFD;SADY;KAdb;AAqBA,WAAO,MAAP,CA9ByD;CAA1D;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADuBA,QAAQ,OAAR,GAAkB,KAAlB","file":"System/Utility/clone.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Types_1 = require('../Types');\nfunction clone(source, depth = 0) {\n    if (depth < 0)\n        return source;\n    if (!Types_1.default.isObject(source))\n        return source;\n    var result;\n    if (Array.isArray(source)) {\n        result = source.slice();\n        if (depth > 0) {\n            for (let i = 0; i < result.length; i++) {\n                result[i] = clone(result[i], depth - 1);\n            }\n        }\n    }\n    else {\n        result = {};\n        if (depth > 0)\n            for (let k in source) {\n                result[k] = clone(source[k], depth - 1);\n            }\n    }\n    return result;\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = clone;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from '../Types';\r\n\r\nexport default function clone(source:any, depth:number = 0):any\r\n{\r\n\tif(depth<0)\r\n\t\treturn source;\r\n\r\n\t// return primitives as is.\r\n\tif(!Type.isObject(source)) return source;\r\n\r\n\tvar result:any;\r\n\tif(Array.isArray(source))\r\n\t{\r\n\t\tresult = (<any>source).slice();\r\n\t\tif(depth>0)\r\n\t\t{\r\n\t\t\tfor(let i = 0; i<result.length; i++)\r\n\t\t\t{\r\n\t\t\t\tresult[i] = clone(result[i], depth - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tresult = {};\r\n\t\tif(depth>0) for(let k in source)\r\n\t\t{\r\n\t\t\t//noinspection JSUnfilteredForInLoop\r\n\t\t\tresult[k] = clone(source[k], depth - 1);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n"]}