{"version":3,"sources":["System/Utility/applyMixins.js","System/Utility/applyMixins.ts"],"names":[],"mappings":";;;;AAIA;;ACCA,SAAA,WAAA,CAAoC,kBAApC,EAA4D,gBAA5D,EAAkF;AAEjF,qBACE,OADF,CACU,cAAE;AAEV,eAAO,mBAAP,CAA2B,GAAG,SAAH,CAA3B,CAAyC,OAAzC,CACE,gBAAI;AAEJ,+BAAmB,SAAnB,CAA6B,IAA7B,IAAqC,GAAG,SAAH,CAAa,IAAb,CAArC,CAFI;SAAJ,CADF,CAFU;KAAF,CADV,CAFiF;CAAlF;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADSA,QAAQ,OAAR,GAAkB,WAAlB","file":"System/Utility/applyMixins.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nfunction applyMixins(derivedConstructor, baseConstructors) {\n    baseConstructors\n        .forEach(bc => {\n        Object.getOwnPropertyNames(bc.prototype).forEach(name => {\n            derivedConstructor.prototype[name] = bc.prototype[name];\n        });\n    });\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = applyMixins;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nexport default function applyMixins(derivedConstructor:any, baseConstructors:any[]):void\r\n{\r\n\tbaseConstructors\r\n\t\t.forEach(bc =>\r\n\t\t{\r\n\t\t\tObject.getOwnPropertyNames(bc.prototype).forEach(\r\n\t\t\t\t\tname =>\r\n\t\t\t\t{\r\n\t\t\t\t\tderivedConstructor.prototype[name] = bc.prototype[name];\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t);\r\n}\r\n"]}