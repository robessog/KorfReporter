{"version":3,"sources":["System/Serialization/Utility.js","System/Serialization/Utility.ts"],"names":[],"mappings":";;;;AAIA;;;;ACIA,IAAA,UAAA,QAAiB,UAAjB,CAAA;AACA,IAAA,8BAAA,QAAsC,yCAAtC,CAAA;AAGA,IAAM,QAAQ,EAAR;IAAY,OAAO,MAAP;IAAe,QAAQ,OAAR;AAEjC,SAAA,QAAA,CACC,KADD,EAEC,iBAFD,EAE0B;AAGzB,QAAI,IAAS,KAAT,CAHqB;AAIzB,mBAAc,4CAAd;AAEC,aAAK,QAAA,OAAA,CAAK,SAAL,CAFN;AAGC,aAAK,QAAA,OAAA,CAAK,MAAL;AACJ,mBAAO,CAAP,CADD;AAHD,aAKM,QAAA,OAAA,CAAK,OAAL;AACJ,mBAAO,IAAI,IAAJ,GAAW,KAAX,CADR;AALD,aAOM,QAAA,OAAA,CAAK,MAAL;AACJ,mBAAO,QAAQ,CAAR,CADR;AAPD;AAWE,gBAAG,MAAI,IAAJ,EACF,OAAO,CAAP,CADD;AAGA,gBAAG,eAAe,CAAf,CAAH,EACC,OAAO,EAAE,SAAF,EAAP,CADD,KAEK,IAAG,UAAU,MAAV,GAAiB,CAAjB,EACP,OAAO,iBAAP,CADI;AAGL,gBAAI,KAAK,IAAI,4BAAA,OAAA,CAA0B,8CAA9B,CAAL,CAVL;AAWC,eAAG,IAAH,CAAQ,OAAR,IAAmB,CAAnB,CAXD;AAYC,kBAAM,EAAN,CAZD;AATD,KAJyB;CAF1B;AAAgB,QAAA,QAAA,GAAQ,QAAR;AAiChB,SAAA,cAAA,CAA+B,QAA/B,EAA2C;AAC1C,WAAO,QAAA,OAAA,CAAK,eAAL,CAAoC,QAApC,EAA6C,WAA7C,EAAyD,QAAA,OAAA,CAAK,QAAL,CAAhE,CAD0C;CAA3C;AAAgB,QAAA,cAAA,GAAc,cAAd;AAIhB,SAAA,WAAA,CACC,KADD,EAEC,eAFD,EAGC,cAHD,EAGmC;AAIlC,QAAG,KAAH,EACA;AACC,YAAG,eAAH,EAAoB,QAAQ,MAAM,WAAN,EAAR,CAApB;AAEA,gBAAO,KAAP;AAEC,iBAAK,MAAL;AACC,uBAAO,IAAP,CADD;AAFD,iBAIM,QAAA,OAAA,CAAK,SAAL;AACJ,uBAAO,SAAP,CADD;AAJD,iBAMM,IAAL;AACC,uBAAO,IAAP,CADD;AAND,iBAQM,KAAL;AACC,uBAAO,KAAP,CADD;AARD;AAYE,oBAAI,UAAU,MAAM,OAAN,CAAc,cAAd,EAA6B,KAA7B,CAAV,CAFL;AAGC,oBAAG,OAAH,EAAY;AAEX,wBAAG,SAAS,IAAT,CAAc,OAAd,CAAH,EAA2B;AAC1B,4BAAI,MAAM,SAAS,OAAT,CAAN,CADsB;AAE1B,4BAAG,CAAC,MAAM,GAAN,CAAD,EAAa,OAAO,GAAP,CAAhB;qBAFD,MAGO;AACN,4BAAI,SAAS,WAAW,KAAX,CAAT,CADE;AAEN,4BAAG,CAAC,MAAM,MAAN,CAAD,EAAgB,OAAO,MAAP,CAAnB;qBALD;iBAFD;AAeA,oBAAG,cAAH,EAAmB,QAAQ,eAAe,KAAf,CAAR,CAAnB;AAEA,sBApBD;AAVD,SAHD;KADA;AAuCA,WAAO,KAAP,CA3CkC;CAHnC;AAAgB,QAAA,WAAA,GAAW,WAAX","file":"System/Serialization/Utility.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Types_1 = require('../Types');\nconst InvalidOperationException_1 = require('../Exceptions/InvalidOperationException');\nconst EMPTY = '', TRUE = 'true', FALSE = 'false';\nfunction toString(value, defaultForUnknown) {\n    var v = value;\n    switch (typeof v) {\n        case Types_1.default.UNDEFINED:\n        case Types_1.default.STRING:\n            return v;\n        case Types_1.default.BOOLEAN:\n            return v ? TRUE : FALSE;\n        case Types_1.default.NUMBER:\n            return EMPTY + v;\n        default:\n            if (v === null)\n                return v;\n            if (isSerializable(v))\n                return v.serialize();\n            else if (arguments.length > 1)\n                return defaultForUnknown;\n            var ex = new InvalidOperationException_1.default('Attempting to serialize unidentifiable type.');\n            ex.data['value'] = v;\n            throw ex;\n    }\n}\nexports.toString = toString;\nfunction isSerializable(instance) {\n    return Types_1.default.hasMemberOfType(instance, 'serialize', Types_1.default.FUNCTION);\n}\nexports.isSerializable = isSerializable;\nfunction toPrimitive(value, caseInsensitive, unknownHandler) {\n    if (value) {\n        if (caseInsensitive)\n            value = value.toLowerCase();\n        switch (value) {\n            case 'null':\n                return null;\n            case Types_1.default.UNDEFINED:\n                return undefined;\n            case TRUE:\n                return true;\n            case FALSE:\n                return false;\n            default:\n                var cleaned = value.replace(/^\\s+|,|\\s+$/g, EMPTY);\n                if (cleaned) {\n                    if (/^\\d+$/g.test(cleaned)) {\n                        var int = parseInt(cleaned);\n                        if (!isNaN(int))\n                            return int;\n                    }\n                    else {\n                        var number = parseFloat(value);\n                        if (!isNaN(number))\n                            return number;\n                    }\n                }\n                if (unknownHandler)\n                    value = unknownHandler(value);\n                break;\n        }\n    }\n    return value;\n}\nexports.toPrimitive = toPrimitive;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ISerializable.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\n\r\nimport Type from '../Types';\r\nimport InvalidOperationException from '../Exceptions/InvalidOperationException';\r\n\r\n\r\nconst EMPTY = '', TRUE = 'true', FALSE = 'false';\r\n\r\nexport function toString(\r\n\tvalue:Primitive|ISerializable,\r\n\tdefaultForUnknown?:string):string\r\n{\r\n\r\n\tvar v = <any>value;\r\n\tswitch(typeof v)\r\n\t{\r\n\t\tcase Type.UNDEFINED:\r\n\t\tcase Type.STRING:\r\n\t\t\treturn v;\r\n\t\tcase Type.BOOLEAN:\r\n\t\t\treturn v ? TRUE : FALSE;\r\n\t\tcase Type.NUMBER:\r\n\t\t\treturn EMPTY + v;\r\n\t\tdefault:\r\n\r\n\t\t\tif(v===null)\r\n\t\t\t\treturn v;\r\n\r\n\t\t\tif(isSerializable(v))\r\n\t\t\t\treturn v.serialize();\r\n\t\t\telse if(arguments.length>1)\r\n\t\t\t\treturn defaultForUnknown;\r\n\r\n\t\t\tvar ex = new InvalidOperationException('Attempting to serialize unidentifiable type.');\r\n\t\t\tex.data['value'] = v;\r\n\t\t\tthrow ex;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function isSerializable(instance:any):instance is ISerializable {\r\n\treturn Type.hasMemberOfType<ISerializable>(instance,'serialize',Type.FUNCTION);\r\n}\r\n\r\nexport function toPrimitive(\r\n\tvalue:string,\r\n\tcaseInsensitive?:boolean,\r\n\tunknownHandler?:(v:string)=>string):Primitive\r\n{\r\n\r\n\r\n\tif(value)\r\n\t{\r\n\t\tif(caseInsensitive) value = value.toLowerCase();\r\n\r\n\t\tswitch(value)\r\n\t\t{\r\n\t\t\tcase 'null':\r\n\t\t\t\treturn null;\r\n\t\t\tcase Type.UNDEFINED:\r\n\t\t\t\treturn undefined;\r\n\t\t\tcase TRUE:\r\n\t\t\t\treturn true;\r\n\t\t\tcase FALSE:\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tvar cleaned = value.replace(/^\\s+|,|\\s+$/g,EMPTY);\r\n\t\t\t\tif(cleaned) {\r\n\r\n\t\t\t\t\tif(/^\\d+$/g.test(cleaned)) {\r\n\t\t\t\t\t\tvar int = parseInt(cleaned);\r\n\t\t\t\t\t\tif(!isNaN(int)) return int;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar number = parseFloat(value);\r\n\t\t\t\t\t\tif(!isNaN(number)) return number;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO: Handle Dates...  Possibly JSON?\r\n\r\n\t\t\t\t// Instead of throwing we allow for handling...\r\n\t\t\t\tif(unknownHandler) value = unknownHandler(value);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn value;\r\n\r\n}\r\n"]}