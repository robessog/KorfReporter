{"version":3,"sources":["System/Exception.ts","System/Exception.js"],"names":[],"mappings":";;;;;AAQA;;;;;;AAEA,IAAM,OAAc,WAAd;;IAKN;AAeC,aAfD,SAeC,GAG8B;YAFtB,gEAAiB,oBAEK;YAD7B,uEAAuB,oBACM;YAA7B,6BAA6B;;8BAlB/B,WAkB+B;;AAFtB,aAAA,OAAA,GAAA,OAAA,CAEsB;AAE7B,YAAI,IAAI,IAAJ,CAFyB;AAG7B,UAAE,IAAF,GAAS,EAAE,OAAF,EAAT,CAH6B;AAI7B,UAAE,IAAF,GAAS,EAAT,CAJ6B;AAK7B,YAAG,cAAH,EACC,EAAE,IAAF,CAAO,gBAAP,IAA2B,cAA3B,CADD;AAQA,YAAG,aAAH,EAAkB,cAAc,CAAd,EAAlB;AACA,eAAO,MAAP,CAAc,CAAd,EAd6B;KAH9B;;iBAfD;;kCA0CkB;AACf,mBAAO,IAAP,CADe;;;;mCAMT;AAEP,gBAAI,IAAI,IAAJ;gBAAU,IAAI,EAAE,OAAF,CAFX;AAGP,gBAAI,IAAK,OAAO,CAAP,GAAY,EAAjB,CAHG;AAKP,mBAAO,MAAM,EAAE,IAAF,GAAS,CAAf,GAAmB,GAAnB,CALA;;;;kCAWD;AAEN,gBAAI,OAAO,KAAK,IAAL,CAFL;AAGN,iBAAI,IAAI,CAAJ,IAAS,IAAb,EACA;AACC,oBAAG,KAAK,cAAL,CAAoB,CAApB,CAAH,EACC,OAAO,KAAK,CAAL,CAAP,CADD;aAFD;;;;WA9DF;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ACmBA,QAAQ,OAAR,GAAkB,SAAlB","file":"System/Exception.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\n///<reference path=\"Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"Disposable/IDisposable.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nconst NAME:string = 'Exception';\r\n\r\n/**\r\n * Represents errors that occur during application execution.\r\n */\r\nexport default\r\nclass Exception implements Error, IDisposable\r\n{\r\n\t/**\r\n\t * A string representation of the error type.\r\n\t * The default is 'Error'.\r\n\t */\r\n\tname:string;\r\n\r\n\t/**\r\n\t * Initializes a new instance of the Exception class with a specified error message and optionally a reference to the inner exception that is the cause of this exception.\r\n\t * @param message\r\n\t * @param innerException\r\n\t * @param beforeSealing This delegate is used to allow actions to occur just before this constructor finishes.  Since some compilers do not allow the use of 'this' before super.\r\n\t */\r\n\tconstructor(\r\n\t\tpublic message:string = null,\r\n\t\tinnerException:Error = null,\r\n\t\tbeforeSealing?:(ex:any)=>void)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.name = _.getName();\r\n\t\t_.data = {};\r\n\t\tif(innerException)\r\n\t\t\t_.data['innerException'] = innerException;\r\n\r\n\t\t/* Originally intended to use 'get' accessors for properties,\r\n\t\t * But debuggers don't display these readily yet.\r\n\t\t * Object.freeze has to be used carefully, but will prevent overriding values.\r\n\t\t */\r\n\r\n\t\tif(beforeSealing) beforeSealing(_);\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\r\n\tdata:IMap<any>;\r\n\r\n\t/**\r\n\t * A string representation of the error type.\r\n\t * The default is 'Error'.\r\n\t */\r\n\tprotected getName():string\r\n\t{ return NAME; }\r\n\r\n\t/**\r\n\t * The string representation of the Exception instance.\r\n\t */\r\n\ttoString():string\r\n\t{\r\n\t\tvar _ = this, m = _.message;\r\n\t\tm = m ? (': ' + m) : '';\r\n\r\n\t\treturn '[' + _.name + m + ']';\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the data object.\r\n\t */\r\n\tdispose():void\r\n\t{\r\n\t\tvar data = this.data;\r\n\t\tfor(let k in data)\r\n\t\t{\r\n\t\t\tif(data.hasOwnProperty(k))\r\n\t\t\t\tdelete data[k];\r\n\t\t}\r\n\t}\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\n */\n'use strict';\nconst NAME = 'Exception';\nclass Exception {\n    constructor(message = null, innerException = null, beforeSealing) {\n        this.message = message;\n        var _ = this;\n        _.name = _.getName();\n        _.data = {};\n        if (innerException)\n            _.data['innerException'] = innerException;\n        if (beforeSealing)\n            beforeSealing(_);\n        Object.freeze(_);\n    }\n    getName() { return NAME; }\n    toString() {\n        var _ = this, m = _.message;\n        m = m ? (': ' + m) : '';\n        return '[' + _.name + m + ']';\n    }\n    dispose() {\n        var data = this.data;\n        for (let k in data) {\n            if (data.hasOwnProperty(k))\n                delete data[k];\n        }\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Exception;\n"]}