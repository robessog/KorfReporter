{"version":3,"sources":["System/Time/TimeUnitValue.ts","System/Time/TimeUnitValue.js"],"names":[],"mappings":";;;;AASA;;;;;;;;;;AAGA,IAAA,aAAA,QAAqB,YAArB,CAAA;AACA,IAAA,iBAAA,QAAyB,gBAAzB,CAAA;;IAKA;;;AAIC,aAJD,aAIC,CAAY,KAAZ,EAAgD,MAAhD,EAA+D;8BAJhE,eAIgE;;2EAJhE,0BAMQ,OAAO,KAAP,IAAe,QAAf,GACK,KADL,GAEH,oBAAmC,KAAnC,EAA0C,MAA1C,CAFG,GAFwD;;AAAf,cAAA,MAAA,GAAA,MAAA,CAAe;AAK9D,mBAAA,OAAA,CAAS,WAAT,CAAqB,MAArB,EAL8D;;KAA/D;;iBAJD;;+CAuBqB;AAEnB,mBAAO,WAAA,OAAA,CAAS,cAAT,CAAwB,KAAK,SAAL,EAAgB,KAAK,MAAL,CAA/C,CAFmB;;;;6BAWU;gBAA3B,8DAAiB,KAAK,KAAL,gBAAU;;AAE7B,mBAAO,cAAc,IAAd,CAAmB,IAAnB,EAAwB,KAAxB,CAAP,CAF6B;;;;4BAtBrB;AAER,mBAAO,KAAK,SAAL,CAFC;;0BAKC,GAAQ;AAEjB,iBAAK,MAAL,GAAc,IAAd,CAFiB;AAGjB,iBAAK,SAAL,GAAiB,CAAjB,CAHiB;;;;4BAYT;AAER,mBAAO,KAAK,MAAL,CAFC;;;;6BAUG,OAAkE;gBAAtC,8DAAiB,WAAA,OAAA,CAAS,YAAT,gBAAqB;;AAE7E,mBAAO,IAAI,aAAJ,CAAkB,KAAlB,EAAyB,KAAzB,CAAP,CAF6E;;;;WAvC/E;EAC4B,eAAA,OAAA;;AAD5B,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ACkBA,QAAQ,OAAR,GAAkB,aAAlB;AD4BA,SAAA,mBAAA,CAA6B,CAA7B,EAA8C,KAA9C,EAA4D;AAE3D,WAAO,WAAA,OAAA,CAAS,gBAAT,CAA0B,EAAE,oBAAF,EAA1B,EAAoD,KAApD,CAAP,CAF2D;CAA5D","file":"System/Time/TimeUnitValue.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"../IFormattable.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual, compare} from '../Compare';\r\nimport TimeUnit from './TimeUnit';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n/**\r\n * TimeUnitValue allows for passing around a reference to a changeable measure of time coerced by its unit type.\r\n */\r\nexport default\r\nclass TimeUnitValue extends TimeQuantity\r\n{\r\n\r\n\tconstructor(value:number|ITimeQuantity, private _units:TimeUnit)\r\n\t{\r\n\t\tsuper(typeof(value)=='number'\r\n\t\t\t? <number>value\r\n\t\t\t: getUnitQuantityFrom(<ITimeQuantity>value, _units));\r\n\t\tTimeUnit.assertValid(_units);\r\n\t}\r\n\r\n\tget value():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\tset value(v:number)\r\n\t{\r\n\t\tthis._total = null;\r\n\t\tthis._quantity = v;\r\n\t}\r\n\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn TimeUnit.toMilliseconds(this._quantity, this._units);\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget units():TimeUnit\r\n\t{\r\n\t\treturn this._units;\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.units):TimeUnitValue\r\n\t{\r\n\t\treturn TimeUnitValue.from(this,units);\r\n\t}\r\n\r\n\tstatic from(value:number|ITimeQuantity, units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(value, units);\r\n\t}\r\n\r\n}\r\n\r\nfunction getUnitQuantityFrom(q:ITimeQuantity, units:TimeUnit)\r\n{\r\n\treturn TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst TimeUnit_1 = require('./TimeUnit');\nconst TimeQuantity_1 = require('./TimeQuantity');\nclass TimeUnitValue extends TimeQuantity_1.default {\n    constructor(value, _units) {\n        super(typeof (value) == 'number'\n            ? value\n            : getUnitQuantityFrom(value, _units));\n        this._units = _units;\n        TimeUnit_1.default.assertValid(_units);\n    }\n    get value() {\n        return this._quantity;\n    }\n    set value(v) {\n        this._total = null;\n        this._quantity = v;\n    }\n    getTotalMilliseconds() {\n        return TimeUnit_1.default.toMilliseconds(this._quantity, this._units);\n    }\n    get units() {\n        return this._units;\n    }\n    to(units = this.units) {\n        return TimeUnitValue.from(this, units);\n    }\n    static from(value, units = TimeUnit_1.default.Milliseconds) {\n        return new TimeUnitValue(value, units);\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = TimeUnitValue;\nfunction getUnitQuantityFrom(q, units) {\n    return TimeUnit_1.default.fromMilliseconds(q.getTotalMilliseconds(), units);\n}\n"]}