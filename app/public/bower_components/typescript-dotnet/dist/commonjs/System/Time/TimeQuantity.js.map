{"version":3,"sources":["System/Time/TimeQuantity.ts","System/Time/TimeQuantity.js"],"names":[],"mappings":";;;;AASA;;;;;;AAEA,IAAA,YAAA,QAA+B,YAA/B,CAAA;AACA,IAAA,aAAA,QAAqB,YAArB,CAAA;;IAKA;AAIC,aAJD,YAIC,GAA0C;YAApB,kEAAmB,iBAAC;;8BAJ3C,cAI2C;;AAApB,aAAA,SAAA,GAAA,SAAA,CAAoB;KAA1C;;iBAJD;;+CASqB;AAEnB,mBAAO,KAAK,SAAL,CAFY;;;;+BAmBb,OAAmB;AAEzB,mBAAO,UAAA,QAAA,CAAS,KAAK,oBAAL,EAAT,EAAsC,SAAS,MAAM,KAAN,IAAe,MAAM,KAAN,CAAY,YAAZ,CAArE,CAFyB;;;;kCAUhB,OAAmB;AAE5B,mBAAO,UAAA,OAAA,CAAQ,KAAK,oBAAL,EAAR,EAAqC,SAAS,MAAM,KAAN,IAAe,MAAM,KAAN,CAAY,YAAZ,CAApE,CAF4B;;;;iCAqCpB,OAAc;AAEtB,mBAAO,WAAA,OAAA,CAAS,gBAAT,CAA0B,KAAK,oBAAL,EAA1B,EAAuD,KAAvD,CAAP,CAFsB;;;;4BAzDV;AAEZ,mBAAO,UAAA,OAAA,CAAQ,KAAK,oBAAL,EAAR,EAAqC,CAArC,CAAP,CAFY;;;;4BAiCJ;AAER,gBAAI,IAAI,KAAK,MAAL,CAFA;AAGR,gBAAG,CAAC,CAAD,EACH;AACC,oBAAI,KAAK,KAAK,oBAAL,EAAL,CADL;AAGC,qBAAK,MAAL,GAAc,IAAsB,OAAO,MAAP,CAAc;AACjD,2BAAO,KAAG,KAAH;AACP,kCAAc,EAAd;AACA,6BAAS,KAAG,IAAH;AACT,6BAAS,KAAG,KAAH;AACT,2BAAO,KAAG,OAAH;AACP,0BAAM,KAAG,QAAH;iBAN6B,CAAtB,CAHf;aADA;AAaA,mBAAO,CAAP,CAhBQ;;;;WAnDV;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;AC0BA,QAAQ,OAAR,GAAkB,YAAlB","file":"System/Time/TimeQuantity.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeQuantity.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual,compare} from '../Compare';\r\nimport TimeUnit from './TimeUnit';\r\n\r\n/**\r\n * This class provides a simple means for storing and calculating time quantities.\r\n */\r\nexport default\r\nclass TimeQuantity implements IEquatable<ITimeQuantity>, IComparable<ITimeQuantity>, ITimeQuantity\r\n{\r\n\r\n\tconstructor(protected _quantity:number = 0)\r\n\t{\r\n\t}\r\n\r\n\t// Provides an overridable mechanism for extending this class.\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\t/**\r\n\t * +1, 0, or -1 depending on the time direction.\r\n\t * @returns {number}\r\n\t */\r\n\tget direction():number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance and return true if the amount of time is the same.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:ITimeQuantity):boolean\r\n\t{\r\n\t\treturn areEqual(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance.\r\n\t * @param other\r\n\t * @returns {CompareResult}\r\n\t */\r\n\tcompareTo(other:ITimeQuantity):number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\r\n\t// Clear this value if sub-class values change.\r\n\tprotected _total:ITimeMeasurement;\r\n\r\n\t/**\r\n\t * Returns an object with all units exposed as totals.\r\n\t * @returns {ITimeMeasurement}\r\n\t */\r\n\tget total():ITimeMeasurement\r\n\t{\r\n\t\tvar t = this._total;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar ms = this.getTotalMilliseconds();\r\n\r\n\t\t\tthis._total = t = <ITimeMeasurement>Object.freeze({\r\n\t\t\t\tticks: ms*HowMany.Ticks.Per.Millisecond,\r\n\t\t\t\tmilliseconds: ms,\r\n\t\t\t\tseconds: ms/HowMany.Milliseconds.Per.Second,\r\n\t\t\t\tminutes: ms/HowMany.Milliseconds.Per.Minute,\r\n\t\t\t\thours: ms/HowMany.Milliseconds.Per.Hour,\r\n\t\t\t\tdays: ms/HowMany.Milliseconds.Per.Day,\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the total amount of time measured in the requested TimeUnit.\r\n\t * @param units\r\n\t * @returns {number}\r\n\t */\r\n\tgetTotal(units:TimeUnit):number\r\n\t{\r\n\t\treturn TimeUnit.fromMilliseconds(this.getTotalMilliseconds(), units);\r\n\t}\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst Compare_1 = require('../Compare');\nconst TimeUnit_1 = require('./TimeUnit');\nclass TimeQuantity {\n    constructor(_quantity = 0) {\n        this._quantity = _quantity;\n    }\n    getTotalMilliseconds() {\n        return this._quantity;\n    }\n    get direction() {\n        return Compare_1.compare(this.getTotalMilliseconds(), 0);\n    }\n    equals(other) {\n        return Compare_1.areEqual(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\n    }\n    compareTo(other) {\n        return Compare_1.compare(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\n    }\n    get total() {\n        var t = this._total;\n        if (!t) {\n            var ms = this.getTotalMilliseconds();\n            this._total = t = Object.freeze({\n                ticks: ms * 10000,\n                milliseconds: ms,\n                seconds: ms / 1000,\n                minutes: ms / 60000,\n                hours: ms / 3600000,\n                days: ms / 86400000,\n            });\n        }\n        return t;\n    }\n    getTotal(units) {\n        return TimeUnit_1.default.fromMilliseconds(this.getTotalMilliseconds(), units);\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = TimeQuantity;\n"]}