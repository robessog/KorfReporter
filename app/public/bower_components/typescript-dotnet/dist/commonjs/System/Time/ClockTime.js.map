{"version":3,"sources":["System/Time/ClockTime.ts","System/Time/ClockTime.js"],"names":[],"mappings":"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","file":"System/Time/ClockTime.js","sourcesContent":["///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"ITimeQuantity.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"../IFormattable.d.ts\"/>\r\n///<reference path=\"../IFormatProvider.d.ts\"/>\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual,compare} from '../Compare';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n\r\nexport default\r\nclass ClockTime extends TimeQuantity implements IClockTime\r\n{\r\n\r\n\tdays:number;\r\n\thour:number;\r\n\tminute:number;\r\n\tsecond:number;\r\n\tmillisecond:number;\r\n\ttick:number;\r\n\r\n\tconstructor(milliseconds:number);\r\n\tconstructor(hours:number, minutes:number, seconds?:number, milliseconds?:number);\r\n\tconstructor(...args:number[])\r\n\t{\r\n\t\tsuper(\r\n\t\t\targs.length>1\r\n\t\t\t\t? ClockTime.millisecondsFromTime(\r\n\t\t\t\targs[0] || 0,\r\n\t\t\t\targs[1] || 0,\r\n\t\t\t\targs.length>2 && args[2] || 0,\r\n\t\t\t\targs.length>3 && args[3] || 0\r\n\t\t\t)\r\n\t\t\t\t: (args.length>0 && args[0] || 0)\r\n\t\t);\r\n\r\n\t\tvar _ = this;\r\n\t\tvar ms = Math.abs(_.getTotalMilliseconds());\r\n\t\tvar msi = Math.floor(ms);\r\n\r\n\t\t_.tick = (ms - msi)*HowMany.Ticks.Per.Millisecond;\r\n\r\n\t\t_.days = (msi/HowMany.Milliseconds.Per.Day) | 0;\r\n\t\tmsi -= _.days * HowMany.Milliseconds.Per.Day;\r\n\r\n\t\t_.hour = (msi/HowMany.Milliseconds.Per.Hour) | 0;\r\n\t\tmsi -= _.hour * HowMany.Milliseconds.Per.Hour;\r\n\r\n\t\t_.minute = (msi/HowMany.Milliseconds.Per.Minute) | 0;\r\n\t\tmsi -= _.minute * HowMany.Milliseconds.Per.Minute;\r\n\r\n\t\t_.second = (msi/HowMany.Milliseconds.Per.Second) | 0;\r\n\t\tmsi -= _.second * HowMany.Milliseconds.Per.Second;\r\n\r\n\t\t_.millisecond = msi;\r\n\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\r\n\t// Static version for relative consistency.  Constructor does allow this format.\r\n\tstatic from(hours:number, minutes:number, seconds:number = 0, milliseconds:number = 0):ClockTime\r\n\t{\r\n\t\treturn new ClockTime(hours, minutes, seconds, milliseconds);\r\n\t}\r\n\r\n\tstatic millisecondsFromTime(\r\n\t\thours:number,\r\n\t\tminutes:number,\r\n\t\tseconds:number = 0,\r\n\t\tmilliseconds:number = 0):number\r\n\t{\r\n\t\tvar value = hours;\r\n\t\tvalue *= HowMany.Minutes.Per.Hour;\r\n\t\tvalue += minutes;\r\n\t\tvalue *= HowMany.Seconds.Per.Minute;\r\n\t\tvalue += seconds;\r\n\t\tvalue *= HowMany.Milliseconds.Per.Second;\r\n\t\tvalue += milliseconds;\r\n\t\treturn value;\r\n\t}\r\n\r\n\ttoString(/*format?:string, formatProvider?:IFormatProvider*/):string\r\n\t{\r\n\t\t/* INSERT CUSTOM FORMATTING CODE HERE */\r\n\r\n\r\n\t\tvar _ = this, a:string[] = [];\r\n\r\n\t\tif(_.days)\r\n\t\t\ta.push(pluralize(_.days, \"day\"));\r\n\r\n\t\tif(_.hour)\r\n\t\t\ta.push(pluralize(_.hour, \"hour\"));\r\n\r\n\t\tif(_.minute)\r\n\t\t\ta.push(pluralize(_.minute, \"minute\"));\r\n\r\n\t\tif(_.second)\r\n\t\t\ta.push(pluralize(_.second, \"second\"));\r\n\r\n\t\tif(a.length>1)\r\n\t\t\ta.splice(a.length - 1, 0, \"and\");\r\n\r\n\t\treturn a.join(\", \").replace(\", and, \", \" and \");\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Temporary until the full TimeSpanFormat is available.\r\nfunction pluralize(value:number, label:string):string\r\n{\r\n\tif(Math.abs(value)!==1)\r\n\t\tlabel += \"s\";\r\n\r\n\treturn label;\r\n}\r\n","'use strict';\nconst TimeQuantity_1 = require('./TimeQuantity');\nclass ClockTime extends TimeQuantity_1.default {\n    constructor(...args) {\n        super(args.length > 1\n            ? ClockTime.millisecondsFromTime(args[0] || 0, args[1] || 0, args.length > 2 && args[2] || 0, args.length > 3 && args[3] || 0)\n            : (args.length > 0 && args[0] || 0));\n        var _ = this;\n        var ms = Math.abs(_.getTotalMilliseconds());\n        var msi = Math.floor(ms);\n        _.tick = (ms - msi) * 10000;\n        _.days = (msi / 86400000) | 0;\n        msi -= _.days * 86400000;\n        _.hour = (msi / 3600000) | 0;\n        msi -= _.hour * 3600000;\n        _.minute = (msi / 60000) | 0;\n        msi -= _.minute * 60000;\n        _.second = (msi / 1000) | 0;\n        msi -= _.second * 1000;\n        _.millisecond = msi;\n        Object.freeze(_);\n    }\n    static from(hours, minutes, seconds = 0, milliseconds = 0) {\n        return new ClockTime(hours, minutes, seconds, milliseconds);\n    }\n    static millisecondsFromTime(hours, minutes, seconds = 0, milliseconds = 0) {\n        var value = hours;\n        value *= 60;\n        value += minutes;\n        value *= 60;\n        value += seconds;\n        value *= 1000;\n        value += milliseconds;\n        return value;\n    }\n    toString() {\n        var _ = this, a = [];\n        if (_.days)\n            a.push(pluralize(_.days, \"day\"));\n        if (_.hour)\n            a.push(pluralize(_.hour, \"hour\"));\n        if (_.minute)\n            a.push(pluralize(_.minute, \"minute\"));\n        if (_.second)\n            a.push(pluralize(_.second, \"second\"));\n        if (a.length > 1)\n            a.splice(a.length - 1, 0, \"and\");\n        return a.join(\", \").replace(\", and, \", \" and \");\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = ClockTime;\nfunction pluralize(value, label) {\n    if (Math.abs(value) !== 1)\n        label += \"s\";\n    return label;\n}\n"]}