{"version":3,"sources":["System/Time/TimeSpan.ts","System/Time/TimeSpan.js"],"names":[],"mappings":";;;;;AAUA;;;;;;;;;;AAGA,IAAA,UAAA,QAAiB,UAAjB,CAAA;AACA,IAAA,aAAA,QAAqB,YAArB,CAAA;AACA,IAAA,cAAA,QAAsB,aAAtB,CAAA;AACA,IAAA,iBAAA,QAAyB,gBAAzB,CAAA;;IAKA;;;AAYC,aAZD,QAYC,CAAY,KAAZ,EAAgE;YAAtC,8DAAiB,WAAA,OAAA,CAAS,YAAT,gBAAqB;;8BAZjE,UAYiE;;AAE/D,YAAI,KAAK,WAAA,OAAA,CAAS,cAAT,CAAwB,KAAxB,EAA+B,KAA/B,CAAL,CAF2D;;2EAZjE,qBAeQ,KAHyD;;AAK/D,YAAI,SAAJ,CAL+D;AAM/D,UAAE,KAAF,GAAU,KAAG,KAAH,CANqD;AAO/D,UAAE,YAAF,GAAiB,EAAjB,CAP+D;AAQ/D,UAAE,OAAF,GAAY,KAAG,IAAH,CARmD;AAS/D,UAAE,OAAF,GAAY,KAAG,KAAH,CATmD;AAU/D,UAAE,KAAF,GAAU,KAAG,OAAH,CAVqD;AAW/D,UAAE,IAAF,GAAS,KAAG,QAAH,CAXsD;;KAAhE;;iBAZD;;4BA4CK,OAAmB;AAEtB,gBAAG,QAAA,OAAA,CAAK,QAAL,CAAc,KAAd,CAAH,EACC,MAAM,IAAI,KAAJ,CACL,kHACA,2DADA,CADD,CADD;AAMA,mBAAO,IAAI,QAAJ,CAAa,KAAK,oBAAL,KAA8B,MAAM,KAAN,CAAY,YAAZ,CAAlD,CARsB;;;;gCAWf,OAAoD;gBAAtC,8DAAiB,WAAA,OAAA,CAAS,YAAT,gBAAqB;;AAE3D,mBAAO,IAAI,QAAJ,CAAa,KAAK,oBAAL,KAA8B,WAAA,OAAA,CAAS,cAAT,CAAwB,KAAxB,EAA+B,KAA/B,CAA9B,CAApB,CAF2D;;;;4BAzBnD;AAER,mBAAO,IAAP,CAFQ;;;;4BAOD;AAEP,gBAAI,IAAI,IAAJ;gBAAU,IAAI,EAAE,KAAF,CAFX;AAGP,gBAAG,CAAC,CAAD,EAAI,EAAE,KAAF,GAAU,IAAI,IAAI,YAAA,OAAA,CAAU,EAAE,oBAAF,EAAd,CAAJ,CAAjB;AACA,mBAAO,CAAP,CAJO;;;;6BAwBI,OAAc,OAAc;AAEvC,mBAAO,IAAI,QAAJ,CAAa,KAAb,EAAoB,KAApB,CAAP,CAFuC;;;;iCAKxB,OAAY;AAE3B,mBAAO,IAAI,QAAJ,CAAa,KAAb,EAAoB,WAAA,OAAA,CAAS,IAAT,CAA3B,CAF2B;;;;kCAKX,OAAY;AAE5B,mBAAO,IAAI,QAAJ,CAAa,KAAb,EAAoB,WAAA,OAAA,CAAS,KAAT,CAA3B,CAF4B;;;;oCAKV,OAAY;AAE9B,mBAAO,IAAI,QAAJ,CAAa,KAAb,EAAoB,WAAA,OAAA,CAAS,OAAT,CAA3B,CAF8B;;;;oCAKZ,OAAY;AAE9B,mBAAO,IAAI,QAAJ,CAAa,KAAb,EAAoB,WAAA,OAAA,CAAS,OAAT,CAA3B,CAF8B;;;;yCAKP,OAAY;AAEnC,mBAAO,IAAI,QAAJ,CAAa,KAAb,EAAoB,WAAA,OAAA,CAAS,YAAT,CAA3B,CAFmC;;;;kCAKnB,OAAY;AAE5B,mBAAO,IAAI,QAAJ,CAAa,KAAb,EAAoB,WAAA,OAAA,CAAS,KAAT,CAA3B,CAF4B;;;;4BAMd;AAEd,mBAAO,iBAAiB,eAAe,IAAI,QAAJ,CAAa,CAAb,CAAf,CAAjB,CAFO;;;;WAjGhB;EACuB,eAAA,OAAA;;AADvB,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;AC6CA,QAAQ,OAAR,GAAkB,QAAlB;AD2DA,IAAI,YAAJ","file":"System/Time/TimeSpan.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual,compare} from '../Compare';\r\nimport Type from '../Types';\r\nimport TimeUnit from './TimeUnit';\r\nimport ClockTime from './ClockTime';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n/**\r\n * TimeSpan expands on TimeQuantity to provide an class that is similar to .NET's TimeSpan including many useful static methods.\r\n */\r\nexport default\r\nclass TimeSpan extends TimeQuantity implements ITimeMeasurement\r\n{\r\n\r\n\tticks: number;\r\n\tmilliseconds: number;\r\n\tseconds: number;\r\n\tminutes: number;\r\n\thours: number;\r\n\tdays: number;\r\n\r\n\t// In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\r\n\tconstructor(value:number, units:TimeUnit = TimeUnit.Milliseconds)\r\n\t{\r\n\t\tvar ms = TimeUnit.toMilliseconds(value, units);\r\n\t\tsuper(ms);\r\n\r\n\t\tvar _ = this;\r\n\t\t_.ticks = ms*HowMany.Ticks.Per.Millisecond;\r\n\t\t_.milliseconds = ms;\r\n\t\t_.seconds = ms/HowMany.Milliseconds.Per.Second;\r\n\t\t_.minutes = ms/HowMany.Milliseconds.Per.Minute;\r\n\t\t_.hours = ms/HowMany.Milliseconds.Per.Hour;\r\n\t\t_.days = ms/HowMany.Milliseconds.Per.Day;\r\n\t}\r\n\r\n\t/**\r\n\t * Provides an standard interface for acquiring the total time.\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\tget total():TimeSpan\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\t// Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\r\n\tget time():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t) _._time = t = new ClockTime(_.getTotalMilliseconds());\r\n\t\treturn t;\r\n\t}\r\n\r\n\tadd(other:ITimeQuantity):TimeSpan\r\n\t{\r\n\t\tif(Type.isNumber(other))\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\r\n\t\t\t\t\".add only supports quantifiable time values (ITimeTotal).\"\r\n\t\t\t);\r\n\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\r\n\t}\r\n\r\n\taddUnit(value:number, units:TimeUnit = TimeUnit.Milliseconds):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + TimeUnit.toMilliseconds(value, units));\r\n\t}\r\n\r\n\r\n\tstatic from(value:number, units:TimeUnit)\r\n\t{\r\n\t\treturn new TimeSpan(value, units);\r\n\t}\r\n\r\n\tstatic fromDays(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Days);\r\n\t}\r\n\r\n\tstatic fromHours(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Hours);\r\n\t}\r\n\r\n\tstatic fromMinutes(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Minutes);\r\n\t}\r\n\r\n\tstatic fromSeconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Seconds);\r\n\t}\r\n\r\n\tstatic fromMilliseconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Milliseconds);\r\n\t}\r\n\r\n\tstatic fromTicks(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Ticks);\r\n\t}\r\n\r\n\r\n\tstatic get zero():TimeSpan\r\n\t{\r\n\t\treturn timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n\t}\r\n}\r\n\r\n\r\nvar timeSpanZero:TimeSpan;\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Originally based upon .NET source but with many additions and improvements.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst Types_1 = require('../Types');\nconst TimeUnit_1 = require('./TimeUnit');\nconst ClockTime_1 = require('./ClockTime');\nconst TimeQuantity_1 = require('./TimeQuantity');\nclass TimeSpan extends TimeQuantity_1.default {\n    constructor(value, units = TimeUnit_1.default.Milliseconds) {\n        var ms = TimeUnit_1.default.toMilliseconds(value, units);\n        super(ms);\n        var _ = this;\n        _.ticks = ms * 10000;\n        _.milliseconds = ms;\n        _.seconds = ms / 1000;\n        _.minutes = ms / 60000;\n        _.hours = ms / 3600000;\n        _.days = ms / 86400000;\n    }\n    get total() {\n        return this;\n    }\n    get time() {\n        var _ = this, t = _._time;\n        if (!t)\n            _._time = t = new ClockTime_1.default(_.getTotalMilliseconds());\n        return t;\n    }\n    add(other) {\n        if (Types_1.default.isNumber(other))\n            throw new Error(\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\n                \".add only supports quantifiable time values (ITimeTotal).\");\n        return new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\n    }\n    addUnit(value, units = TimeUnit_1.default.Milliseconds) {\n        return new TimeSpan(this.getTotalMilliseconds() + TimeUnit_1.default.toMilliseconds(value, units));\n    }\n    static from(value, units) {\n        return new TimeSpan(value, units);\n    }\n    static fromDays(value) {\n        return new TimeSpan(value, TimeUnit_1.default.Days);\n    }\n    static fromHours(value) {\n        return new TimeSpan(value, TimeUnit_1.default.Hours);\n    }\n    static fromMinutes(value) {\n        return new TimeSpan(value, TimeUnit_1.default.Minutes);\n    }\n    static fromSeconds(value) {\n        return new TimeSpan(value, TimeUnit_1.default.Seconds);\n    }\n    static fromMilliseconds(value) {\n        return new TimeSpan(value, TimeUnit_1.default.Milliseconds);\n    }\n    static fromTicks(value) {\n        return new TimeSpan(value, TimeUnit_1.default.Ticks);\n    }\n    static get zero() {\n        return timeSpanZero || (timeSpanZero = new TimeSpan(0));\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = TimeSpan;\nvar timeSpanZero;\n"]}