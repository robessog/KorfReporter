{"version":3,"sources":["System/Time/DateTime.ts","System/Time/DateTime.js"],"names":[],"mappings":"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","file":"System/Time/DateTime.js","sourcesContent":["///<reference path='ITimeQuantity.d.ts'/>\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"IDateTime.d.ts\"/>\r\n///<reference path=\"Calendars.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport ClockTime from './ClockTime';\r\nimport TimeSpan from './TimeSpan';\r\nimport TimeStamp from './TimeStamp';\r\n\r\n\r\nclass DateTime implements ICalendarDate, IDateTime\r\n{\r\n\tprivate _value:Date;\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tprivate _setJsDate(value:Date)\r\n\t{\r\n\t\tthis._time = null;\r\n\t\tthis._value = new Date(value.getTime());\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString:string, kind?:DateTime.Kind);\r\n\tconstructor(milliseconds:number, kind?:DateTime.Kind);\r\n\tconstructor(source:Date, kind?:DateTime.Kind);\r\n\tconstructor(source:DateTime, kind?:DateTime.Kind);\r\n\tconstructor(value:any = new Date(), kind:DateTime.Kind = DateTime.Kind.Local)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._kind = kind;\r\n\t\tif(value instanceof DateTime)\r\n\t\t\t_._value = value.toJsDate();\r\n\t\telse if(value instanceof Date)\r\n\t\t\t_._setJsDate(value);\r\n\t\telse\r\n\t\t\t_._value = value===void(0)\r\n\t\t\t\t? new Date()\r\n\t\t\t\t: new Date(value);\r\n\t}\r\n\r\n\tprivate _kind:DateTime.Kind;\r\n\tget kind():DateTime.Kind\r\n\t{\r\n\t\treturn this._kind;\r\n\t}\r\n\r\n\tget year():number\r\n\t{\r\n\t\treturn this._value.getFullYear();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Gregorian Month (zero indexed).\r\n\t * @returns {number}\r\n\t */\r\n\tget month():Gregorian.Month\r\n\t{\r\n\t\treturn this._value.getMonth();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month.  An integer between 1 and 31.\r\n\t * @returns {number}\r\n\t */\r\n\tget day():number\r\n\t{\r\n\t\treturn this._value.getDate();\r\n\t}\r\n\r\n\tget dayOfWeek():Gregorian.DayOfWeek\r\n\t{\r\n\t\treturn this._value.getDay();\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms:number):DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms, this._kind);\r\n\t}\r\n\r\n\taddSeconds(seconds:number):DateTime\r\n\t{\r\n\t\tseconds = seconds || 0;\r\n\t\treturn this.addMilliseconds(seconds*HowMany.Milliseconds.Per.Second);\r\n\t}\r\n\r\n\taddMinutes(minutes:number):DateTime\r\n\t{\r\n\t\tminutes = minutes || 0;\r\n\t\treturn this.addMilliseconds(minutes*HowMany.Milliseconds.Per.Minute);\r\n\t}\r\n\r\n\taddHours(hours:number):DateTime\r\n\t{\r\n\t\thours = hours || 0;\r\n\t\treturn this.addMilliseconds(hours*HowMany.Milliseconds.Per.Hour);\r\n\t}\r\n\r\n\taddDays(days:number):DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*HowMany.Milliseconds.Per.Day);\r\n\t}\r\n\r\n\taddMonths(months:number):DateTime\r\n\t{\r\n\t\tmonths = months || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setMonth(d.getMonth()+months);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\taddYears(years:number):DateTime\r\n\t{\r\n\t\tyears = years || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setFullYear(d.getFullYear()+years);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and adds based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tadd(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tsubtract(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(-time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TimeSpan representing the amount of time between two dates.\r\n\t * @param previous\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\ttimePassedSince(previous:Date|DateTime):TimeSpan\r\n\t{\r\n\t\treturn DateTime.between(previous, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a DateTime object for 00:00 of this date.\r\n\t */\r\n\tget date():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\t_.year,\r\n\t\t\t\t_.month,\r\n\t\t\t\t_.day\r\n\t\t\t)\r\n\t\t\t, _._kind\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\r\n\t/**\r\n\t * Returns the time of day represented by a ClockTime object.\r\n\t * @returns {ClockTime}\r\n\t */\r\n\tget timeOfDay():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar d = this._value;\r\n\t\t\t_._time = t = new ClockTime(\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds());\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a readonly object which contains all the date and time components.\r\n\t */\r\n\ttoTimeStamp():ITimeStamp {\r\n\t\treturn TimeStamp.from(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the now local time.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get now():DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a UTC version of this date if its kind is local.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tget toUniversalTime():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._kind!=DateTime.Kind.Local)\r\n\t\t\treturn new DateTime(_, _._kind);\r\n\r\n\t\tvar d = _._value;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\td.getUTCFullYear(),\r\n\t\t\t\td.getUTCMonth(),\r\n\t\t\t\td.getUTCDate(),\r\n\t\t\t\td.getUTCHours(),\r\n\t\t\t\td.getUTCMinutes(),\r\n\t\t\t\td.getUTCSeconds(),\r\n\t\t\t\td.getUTCMilliseconds()\r\n\t\t\t),\r\n\t\t\tDateTime.Kind.Utc\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * The date component for now.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get today():DateTime\r\n\t{\r\n\t\treturn DateTime.now.date;\r\n\t}\r\n\r\n\t/**\r\n\t * Midnight tomorrow.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get tomorrow():DateTime\r\n\t{\r\n\t\tvar today:DateTime = DateTime.today;\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the difference between two dates as a TimeSpan.\r\n\t * @param first\r\n\t * @param last\r\n\t */\r\n\tstatic between(first:Date|DateTime, last:Date|DateTime):TimeSpan\r\n\t{\r\n\t\tvar f:Date = first instanceof DateTime ? first._value : <Date>first,\r\n\t\t    l:Date = last instanceof DateTime ? last._value : <Date>last;\r\n\r\n\t\treturn new TimeSpan(f.getTime() - l.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the given year is a leap year using the formula:\r\n\t * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\r\n\t * @param year\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isLeapYear(year:number):boolean {\r\n\t\treturn ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of days for the specific year and month.\r\n\t * @param year\r\n\t * @param month\r\n\t * @returns {any}\r\n\t */\r\n\tstatic daysInMonth(year:number, month:Gregorian.Month):number {\r\n\t\t// Basically, add 1 month, subtract a day... What's the date?\r\n\t\treturn (new Date(year,month+1,0)).getDate();\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Extend DateTime's usefulness.\r\nmodule DateTime\r\n{\r\n\texport const enum Kind {\r\n\t\tUnspecified,\r\n\t\tLocal,\r\n\t\tUtc,\r\n\t}\r\n}\r\n\r\nObject.freeze(DateTime);\r\n\r\nexport default DateTime;\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Based on .NET DateTime's interface.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst ClockTime_1 = require('./ClockTime');\nconst TimeSpan_1 = require('./TimeSpan');\nconst TimeStamp_1 = require('./TimeStamp');\nclass DateTime {\n    constructor(value = new Date(), kind = 1) {\n        var _ = this;\n        _._kind = kind;\n        if (value instanceof DateTime)\n            _._value = value.toJsDate();\n        else if (value instanceof Date)\n            _._setJsDate(value);\n        else\n            _._value = value === void (0)\n                ? new Date()\n                : new Date(value);\n    }\n    toJsDate() {\n        return new Date(this._value.getTime());\n    }\n    _setJsDate(value) {\n        this._time = null;\n        this._value = new Date(value.getTime());\n    }\n    get kind() {\n        return this._kind;\n    }\n    get year() {\n        return this._value.getFullYear();\n    }\n    get month() {\n        return this._value.getMonth();\n    }\n    get day() {\n        return this._value.getDate();\n    }\n    get dayOfWeek() {\n        return this._value.getDay();\n    }\n    addMilliseconds(ms) {\n        ms = ms || 0;\n        return new DateTime(this._value.getTime() + ms, this._kind);\n    }\n    addSeconds(seconds) {\n        seconds = seconds || 0;\n        return this.addMilliseconds(seconds * 1000);\n    }\n    addMinutes(minutes) {\n        minutes = minutes || 0;\n        return this.addMilliseconds(minutes * 60000);\n    }\n    addHours(hours) {\n        hours = hours || 0;\n        return this.addMilliseconds(hours * 3600000);\n    }\n    addDays(days) {\n        days = days || 0;\n        return this.addMilliseconds(days * 86400000);\n    }\n    addMonths(months) {\n        months = months || 0;\n        var d = this.toJsDate();\n        d.setMonth(d.getMonth() + months);\n        return new DateTime(d, this._kind);\n    }\n    addYears(years) {\n        years = years || 0;\n        var d = this.toJsDate();\n        d.setFullYear(d.getFullYear() + years);\n        return new DateTime(d, this._kind);\n    }\n    add(time) {\n        return this.addMilliseconds(time.getTotalMilliseconds());\n    }\n    subtract(time) {\n        return this.addMilliseconds(-time.getTotalMilliseconds());\n    }\n    timePassedSince(previous) {\n        return DateTime.between(previous, this);\n    }\n    get date() {\n        var _ = this;\n        return new DateTime(new Date(_.year, _.month, _.day), _._kind);\n    }\n    get timeOfDay() {\n        var _ = this, t = _._time;\n        if (!t) {\n            var d = this._value;\n            _._time = t = new ClockTime_1.default(d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n        }\n        return t;\n    }\n    toTimeStamp() {\n        return TimeStamp_1.default.from(this);\n    }\n    static get now() {\n        return new DateTime();\n    }\n    get toUniversalTime() {\n        var _ = this;\n        if (_._kind != 1)\n            return new DateTime(_, _._kind);\n        var d = _._value;\n        return new DateTime(new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()), 2);\n    }\n    static get today() {\n        return DateTime.now.date;\n    }\n    static get tomorrow() {\n        var today = DateTime.today;\n        return today.addDays(1);\n    }\n    static between(first, last) {\n        var f = first instanceof DateTime ? first._value : first, l = last instanceof DateTime ? last._value : last;\n        return new TimeSpan_1.default(f.getTime() - l.getTime());\n    }\n    static isLeapYear(year) {\n        return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n    }\n    static daysInMonth(year, month) {\n        return (new Date(year, month + 1, 0)).getDate();\n    }\n}\nObject.freeze(DateTime);\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = DateTime;\n"]}