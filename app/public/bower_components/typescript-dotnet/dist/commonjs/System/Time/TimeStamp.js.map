{"version":3,"sources":["System/Time/TimeStamp.ts","System/Time/TimeStamp.js"],"names":[],"mappings":";;;;AASA;;;;;;AAEA,IAAA,UAAA,QAAiB,UAAjB,CAAA;;IAKA;AAIC,aAJD,SAIC,CACQ,IADR,EAEQ,KAFR,EAQuB;YALf,4DAAa,iBAKE;YAJf,6DAAc,iBAIC;YAHf,+DAAgB,iBAGD;YAFf,+DAAgB,iBAED;YADf,oEAAqB,iBACN;YAAf,6DAAc,iBAAC;;8BAZxB,WAYwB;;AAPf,aAAA,IAAA,GAAA,IAAA,CAOe;AANf,aAAA,KAAA,GAAA,KAAA,CAMe;AALf,aAAA,GAAA,GAAA,GAAA,CAKe;AAJf,aAAA,IAAA,GAAA,IAAA,CAIe;AAHf,aAAA,MAAA,GAAA,MAAA,CAGe;AAFf,aAAA,MAAA,GAAA,MAAA,CAEe;AADf,aAAA,WAAA,GAAA,WAAA,CACe;AAAf,aAAA,IAAA,GAAA,IAAA,CAAe;AAKtB,eAAO,MAAP,CAAc,IAAd,EALsB;KARvB;;iBAJD;;mCAoBS;AAEP,gBAAI,IAAI,IAAJ,CAFG;AAGP,mBAAO,IAAI,IAAJ,CAAS,EAAE,IAAF,EAAQ,EAAE,KAAF,EAAS,EAAE,GAAF,EAAO,EAAE,IAAF,EAAQ,EAAE,MAAF,EAAU,EAAE,MAAF,EAAU,EAAE,WAAF,GAAgB,EAAE,IAAF,GAAO,KAAP,CAApF,CAHO;;;;6BAMI,GAAgB;AAE3B,gBAAI,EAAE,aAAa,IAAb,CAAF,IAAwB,QAAA,OAAA,CAAK,SAAL,CAAe,CAAf,EAAiB,UAAjB,CAAxB,EACH,IAAgB,EAAG,QAAH,EAAhB,CADD;AAEA,gBAAG,aAAa,IAAb,EACH;AACC,uBAAO,IAAI,SAAJ,CACN,EAAE,WAAF,EADM,EAEN,EAAE,QAAF,EAFM,EAGN,EAAE,OAAF,EAHM,EAIN,EAAE,QAAF,EAJM,EAKN,EAAE,UAAF,EALM,EAMN,EAAE,UAAF,EANM,EAON,EAAE,eAAF,EAPM,CAAP,CADD;aADA,MAaA;AACC,sBAAM,MAAM,oBAAN,CAAN,CADD;aAbA;;;;WA9BF;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ACkBA,QAAQ,OAAR,GAAkB,SAAlB","file":"System/Time/TimeStamp.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"IDateTime.d.ts\"/>\r\n///<reference path=\"Calendars.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\n\r\n/**\r\n * An alternative to Date or DateTime.  Is a model representing the exact date and time.\r\n */\r\nexport default\r\nclass TimeStamp implements ITimeStamp, IDateTime\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic year:number,\r\n\t\tpublic month:Gregorian.Month,\r\n\t\tpublic day:number = 1,\r\n\t\tpublic hour:number = 0,\r\n\t\tpublic minute:number = 0,\r\n\t\tpublic second:number = 0,\r\n\t\tpublic millisecond:number = 0,\r\n\t\tpublic tick:number = 0)\r\n\t{\r\n\r\n\t\t// TODO: Add validation or properly carry out of range values...\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick/HowMany.Ticks.Per.Millisecond);\r\n\t}\r\n\r\n\tstatic from(d:Date|IDateTime):TimeStamp\r\n\t{\r\n\t\tif (!(d instanceof Date) && Type.hasMember(d,'toJsDate'))\r\n\t\t\td = (<IDateTime>d).toJsDate();\r\n\t\tif(d instanceof Date)\r\n\t\t{\r\n\t\t\treturn new TimeStamp(\r\n\t\t\t\td.getFullYear(),\r\n\t\t\t\td.getMonth(),\r\n\t\t\t\td.getDate(),\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds()\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow Error('Invalid date type.');\r\n\t\t}\r\n\t}\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst Types_1 = require('../Types');\nclass TimeStamp {\n    constructor(year, month, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0, tick = 0) {\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.hour = hour;\n        this.minute = minute;\n        this.second = second;\n        this.millisecond = millisecond;\n        this.tick = tick;\n        Object.freeze(this);\n    }\n    toJsDate() {\n        var _ = this;\n        return new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick / 10000);\n    }\n    static from(d) {\n        if (!(d instanceof Date) && Types_1.default.hasMember(d, 'toJsDate'))\n            d = d.toJsDate();\n        if (d instanceof Date) {\n            return new TimeStamp(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n        }\n        else {\n            throw Error('Invalid date type.');\n        }\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = TimeStamp;\n"]}