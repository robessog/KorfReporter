{"version":3,"sources":["System/Time/TimeUnit.js","System/Time/TimeUnit.ts"],"names":[],"mappings":";;;;;AAKA;;ACKA,IAAK,QAAL;AAAA,CAAA,UAAK,QAAL,EAAa;AAEZ,aAAA,SAAA,OAAA,IAAA,CAAA,CAAA,GAAA,OAAA,CAFY;AAGZ,aAAA,SAAA,cAAA,IAAA,CAAA,CAAA,GAAA,cAAA,CAHY;AAIZ,aAAA,SAAA,SAAA,IAAA,CAAA,CAAA,GAAA,SAAA,CAJY;AAKZ,aAAA,SAAA,SAAA,IAAA,CAAA,CAAA,GAAA,SAAA,CALY;AAMZ,aAAA,SAAA,OAAA,IAAA,CAAA,CAAA,GAAA,OAAA,CANY;AAOZ,aAAA,SAAA,MAAA,IAAA,CAAA,CAAA,GAAA,MAAA,CAPY;CAAb,CAAA,CAAK,aAAA,WAAQ,EAAR,CAAA,CAAL;AAUA,IAAO,QAAP;AAAA,CAAA,UAAO,QAAP,EACA;AAEC,aAAA,cAAA,CACC,KADD,EAEuC;YAAtC,8DAAiB,SAAS,YAAT,gBAAqB;;AAGtC,gBAAO,KAAP;AAEC,iBAAK,SAAS,IAAT;AACJ,yBAAS,EAAT,CADD;AAFD,iBAIM,SAAS,KAAT;AACJ,yBAAS,EAAT,CADD;AAJD,iBAMM,SAAS,OAAT;AACJ,yBAAS,EAAT,CADD;AAND,iBAQM,SAAS,OAAT;AACJ,yBAAS,IAAT,CADD;AARD,iBAUM,SAAS,YAAT;AACJ,uBAAO,KAAP,CADD;AAVD,iBAYM,SAAS,KAAT;AACJ,uBAAO,QAAM,KAAN,CADR;AAZD;AAeE,sBAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN,CADD;AAdD,SAHsC;KAFvC;AAAgB,aAAA,cAAA,GAAc,cAAd,CAFjB;AA0BC,aAAA,gBAAA,CACC,EADD,EAEC,KAFD,EAEe;AAEd,gBAAO,KAAP;AAEC,iBAAK,SAAS,IAAT;AACJ,uBAAO,KAAG,QAAH,CADR;AAFD,iBAIM,SAAS,KAAT;AACJ,uBAAO,KAAG,OAAH,CADR;AAJD,iBAMM,SAAS,OAAT;AACJ,uBAAO,KAAG,KAAH,CADR;AAND,iBAQM,SAAS,OAAT;AACJ,uBAAO,KAAG,IAAH,CADR;AARD,iBAUM,SAAS,YAAT;AACJ,uBAAO,EAAP,CADD;AAVD,iBAYM,SAAS,KAAT;AACJ,uBAAO,KAAG,KAAH,CADR;AAZD;AAeE,sBAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN,CADD;AAdD,SAFc;KAFf;AAAgB,aAAA,gBAAA,GAAgB,gBAAhB,CA1BjB;AAiDC,aAAA,IAAA,CAAqB,QAArB,EAA6C,IAA7C,EAA0D;AACzD,eAAO,YAAY,iBAAiB,SAAS,oBAAT,EAAjB,EAAiD,IAAjD,CAAZ,CADkD;KAA1D;AAAgB,aAAA,IAAA,GAAI,IAAJ,CAjDjB;AAsDC,aAAA,WAAA,CAA4B,IAA5B,EAAyC;AAExC,YAAG,MAAM,IAAN,KAAe,OAAK,SAAS,IAAT,IAAiB,OAAK,SAAS,KAAT,IAAkB,KAAK,KAAL,CAAW,IAAX,MAAmB,IAAnB,EAC9D,MAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN,CADD;AAGA,eAAO,IAAP,CALwC;KAAzC;AAAgB,aAAA,WAAA,GAAW,WAAX,CAtDjB;CADA,CAAA,CAAO,aAAA,WAAQ,EAAR,CAAA,CAAP;AAiEA,OAAO,MAAP,CAAc,QAAd;AAEA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADnBA,QAAQ,OAAR,GCmBe,QDnBf","file":"System/Time/TimeUnit.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Originally based upon .NET source but with many additions and improvements.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nvar TimeUnit;\n(function (TimeUnit) {\n    TimeUnit[TimeUnit[\"Ticks\"] = 0] = \"Ticks\";\n    TimeUnit[TimeUnit[\"Milliseconds\"] = 1] = \"Milliseconds\";\n    TimeUnit[TimeUnit[\"Seconds\"] = 2] = \"Seconds\";\n    TimeUnit[TimeUnit[\"Minutes\"] = 3] = \"Minutes\";\n    TimeUnit[TimeUnit[\"Hours\"] = 4] = \"Hours\";\n    TimeUnit[TimeUnit[\"Days\"] = 5] = \"Days\";\n})(TimeUnit || (TimeUnit = {}));\nvar TimeUnit;\n(function (TimeUnit) {\n    function toMilliseconds(value, units = TimeUnit.Milliseconds) {\n        switch (units) {\n            case TimeUnit.Days:\n                value *= 24;\n            case TimeUnit.Hours:\n                value *= 60;\n            case TimeUnit.Minutes:\n                value *= 60;\n            case TimeUnit.Seconds:\n                value *= 1000;\n            case TimeUnit.Milliseconds:\n                return value;\n            case TimeUnit.Ticks:\n                return value / 10000;\n            default:\n                throw new Error(\"Invalid TimeUnit.\");\n        }\n    }\n    TimeUnit.toMilliseconds = toMilliseconds;\n    function fromMilliseconds(ms, units) {\n        switch (units) {\n            case TimeUnit.Days:\n                return ms / 86400000;\n            case TimeUnit.Hours:\n                return ms / 3600000;\n            case TimeUnit.Minutes:\n                return ms / 60000;\n            case TimeUnit.Seconds:\n                return ms / 1000;\n            case TimeUnit.Milliseconds:\n                return ms;\n            case TimeUnit.Ticks:\n                return ms * 10000;\n            default:\n                throw new Error(\"Invalid TimeUnit.\");\n        }\n    }\n    TimeUnit.fromMilliseconds = fromMilliseconds;\n    function from(quantity, unit) {\n        return quantity && fromMilliseconds(quantity.getTotalMilliseconds(), unit);\n    }\n    TimeUnit.from = from;\n    function assertValid(unit) {\n        if (isNaN(unit) || unit > TimeUnit.Days || unit < TimeUnit.Ticks || Math.floor(unit) !== unit)\n            throw new Error(\"Invalid TimeUnit.\");\n        return true;\n    }\n    TimeUnit.assertValid = assertValid;\n})(TimeUnit || (TimeUnit = {}));\nObject.freeze(TimeUnit);\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = TimeUnit;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeQuantity.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n\r\n\r\nenum TimeUnit\r\n{\r\n\tTicks,\r\n\tMilliseconds,\r\n\tSeconds,\r\n\tMinutes,\r\n\tHours,\r\n\tDays\r\n} // Earth Days\r\n\r\nmodule TimeUnit\r\n{\r\n\r\n\texport function toMilliseconds(\r\n\t\tvalue:number,\r\n\t\tunits:TimeUnit = TimeUnit.Milliseconds):number\r\n\t{\r\n\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\tvalue *= HowMany.Hours.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\tvalue *= HowMany.Minutes.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\tvalue *= HowMany.Seconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\tvalue *= HowMany.Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn value;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn value/HowMany.Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function fromMilliseconds(\r\n\t\tms:number,\r\n\t\tunits:TimeUnit)\r\n\t{\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\treturn ms/HowMany.Milliseconds.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\treturn ms/HowMany.Milliseconds.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\treturn ms/HowMany.Milliseconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\treturn ms/HowMany.Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn ms;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn ms*HowMany.Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function from(quantity:ITimeQuantity, unit:TimeUnit):number {\r\n\t\treturn quantity && fromMilliseconds(quantity.getTotalMilliseconds(),unit);\r\n\t}\r\n\r\n\r\n\texport function assertValid(unit:TimeUnit):boolean\r\n\t{\r\n\t\tif(isNaN(unit) || unit>TimeUnit.Days || unit<TimeUnit.Ticks || Math.floor(unit)!==unit)\r\n\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nObject.freeze(TimeUnit);\r\n\r\nexport default TimeUnit;\r\n"]}