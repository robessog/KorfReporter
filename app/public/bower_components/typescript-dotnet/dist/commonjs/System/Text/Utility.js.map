{"version":3,"sources":["System/Text/Utility.js","System/Text/Utility.ts"],"names":[],"mappings":";;;;AAIA;;;;ACCA,IAAA,UAAA,QAAiB,UAAjB,CAAA;AAEa,QAAA,KAAA,GAAe,EAAf;AAEb,SAAA,YAAA,CAA6B,MAA7B,EAA0C;AACzC,WAAO,OAAO,OAAP,CAAe,qCAAf,EAAsD,MAAtD,CAAP,CADyC;CAA1C;AAAgB,QAAA,YAAA,GAAY,YAAZ;AAYhB,SAAA,IAAA,CAAqB,MAArB,EAAoC,KAApC,EAA2D,UAA3D,EAA8E;AAE7E,QAAG,KAAH,EAAU;AACT,YAAG,UAAQ,QAAA,KAAA,EAAO,OAAO,MAAP,CAAlB;AACA,YAAI,UAAU,aAAa,MAAM,OAAN,CAAc,KAAd,IAAuB,MAAM,IAAN,EAAvB,GAA8C,KAA9C,CAAvB,CAFK;AAGT,eAAO,OAAO,OAAP,CAAe,IAAI,MAAJ,CAAW,OAAK,OAAL,GAAa,MAAb,GAAoB,OAApB,GAA4B,KAA5B,EAAkC,OAAK,aAAW,GAAX,GAAe,EAAf,CAAL,CAA5D,EAAqF,QAAA,KAAA,CAA5F,CAHS;KAAV;AAMA,WAAO,OAAO,OAAP,CAAe,YAAf,EAA6B,QAAA,KAAA,CAApC,CAR6E;CAA9E;AAAgB,QAAA,IAAA,GAAI,IAAJ;AAiBhB,SAAA,MAAA,CAAuB,MAAvB,EAAmD;sCAAV;;KAAU;;AAElD,WAAO,SAAS,MAAT,EAAiB,IAAjB,CAAP,CAFkD;CAAnD;AAAgB,QAAA,MAAA,GAAM,MAAN;AAgBhB,SAAA,QAAA,CAAyB,MAAzB,EAAwC,MAAxC,EAAuE;AAEtE,QAAI,WAAW,MAAM,OAAN,CAAc,MAAd,CAAX,CAFkE;AAGtE,WAAO,OAAO,OAAP,CAAe,eAAf,EACN,UAAC,CAAD,EAAW,CAAX,EAAmB;AAElB,YAAI,IAAQ,CAAR,CAFc;AAGlB,YAAG,QAAH,EACA;AACC,gBAAI,IAAI,SAAS,CAAT,CAAJ,CADL;AAEC,gBAAG,CAAC,MAAM,CAAN,CAAD,EAAW,IAAI,CAAJ,CAAd;SAHD;AAMA,YAAI,IAAU,OAAQ,CAAR,CAAV,CATc;AAUlB,uBAAc,4CAAd;AAEC,iBAAK,QAAA,OAAA,CAAK,MAAL,CAFN;AAGC,iBAAK,QAAA,OAAA,CAAK,MAAL,CAHN;AAIC,iBAAK,QAAA,OAAA,CAAK,OAAL;AACJ,uBAAO,CAAP,CADD;AAJD;AAOE,uBAAO,CAAP,CADD;AAND,SAVkB;KAAnB,CADD,CAHsE;CAAvE;AAAgB,QAAA,QAAA,GAAQ,QAAR","file":"System/Text/Utility.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Types_1 = require('../Types');\nexports.EMPTY = '';\nfunction escapeRegExp(source) {\n    return source.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexports.escapeRegExp = escapeRegExp;\nfunction trim(source, chars, ignoreCase) {\n    if (chars) {\n        if (chars === exports.EMPTY)\n            return source;\n        var escaped = escapeRegExp(Array.isArray(chars) ? chars.join() : chars);\n        return source.replace(new RegExp('^[' + escaped + ']+|[' + escaped + ']+$', 'g' + (ignoreCase ? 'i' : '')), exports.EMPTY);\n    }\n    return source.replace(/^\\s+|\\s+$/g, exports.EMPTY);\n}\nexports.trim = trim;\nfunction format(source, ...args) {\n    return supplant(source, args);\n}\nexports.format = format;\nfunction supplant(source, params) {\n    var oIsArray = Array.isArray(params);\n    return source.replace(/\\{([^{}]*)\\}/g, (a, b) => {\n        var n = b;\n        if (oIsArray) {\n            let i = parseInt(b);\n            if (!isNaN(i))\n                n = i;\n        }\n        var r = params[n];\n        switch (typeof r) {\n            case Types_1.default.STRING:\n            case Types_1.default.NUMBER:\n            case Types_1.default.BOOLEAN:\n                return r;\n            default:\n                return a;\n        }\n    });\n}\nexports.supplant = supplant;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from '../Types';\r\n\r\nexport const EMPTY:string = '';\r\n\r\nexport function escapeRegExp(source:string):string {\r\n\treturn source.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n}\r\n\r\n/**\r\n * Can trim any character or set of characters from the ends of a string.\r\n * Uses a Regex escapement to replace them with empty.\r\n * @param source\r\n * @param chars A string or array of characters desired to be trimmed.\r\n * @param ignoreCase\r\n * @returns {string}\r\n */\r\nexport function trim(source:string, chars?:string|string[],ignoreCase?:boolean):string\r\n{\r\n\tif(chars) {\r\n\t\tif(chars===EMPTY) return source;\r\n\t\tvar escaped = escapeRegExp(Array.isArray(chars) ? chars.join() : <string>chars);\r\n\t\treturn source.replace(new RegExp('^['+escaped+']+|['+escaped+']+$','g'+(ignoreCase?'i':'')),EMPTY);\r\n\t}\r\n\r\n\treturn source.replace(/^\\s+|\\s+$/g, EMPTY);\r\n}\r\n\r\n/**\r\n * Takes any arg\r\n * @param source\r\n * @param args\r\n * @returns {string}\r\n */\r\nexport function format(source:string, ...args:any[])\r\n{\r\n\treturn supplant(source, args);\r\n}\r\n\r\n//\r\n\r\n/**\r\n * This takes a string and replaces '{string}' with the respected parameter.\r\n * Also allows for passing an array in order to use '{n}' notation.\r\n * Not limited to an array's indexes.  For example, {length} is allowed.\r\n * Based upon Crockford's supplant function.\r\n * @param source\r\n * @param params\r\n * @returns {string}\r\n */\r\nexport function supplant(source:string, params:{[key:string]:any}|any[]):string\r\n{\r\n\tvar oIsArray = Array.isArray(params);\r\n\treturn source.replace(/\\{([^{}]*)\\}/g,\r\n\t\t(a:string, b:string):any=>\r\n\t\t{\r\n\t\t\tvar n:any = b;\r\n\t\t\tif(oIsArray)\r\n\t\t\t{\r\n\t\t\t\tlet i = parseInt(b);\r\n\t\t\t\tif(!isNaN(i)) n = i;\r\n\t\t\t}\r\n\r\n\t\t\tvar r = (<any>params)[n];\r\n\t\t\tswitch(typeof r)\r\n\t\t\t{\r\n\t\t\t\tcase Type.STRING:\r\n\t\t\t\tcase Type.NUMBER:\r\n\t\t\t\tcase Type.BOOLEAN:\r\n\t\t\t\t\treturn r;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn a;\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n}\r\n"]}