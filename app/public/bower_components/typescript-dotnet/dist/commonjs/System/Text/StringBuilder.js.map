{"version":3,"sources":["System/Text/StringBuilder.ts","System/Text/StringBuilder.js"],"names":[],"mappings":";;;;;AAOA;;;;;;;;AAEA,IAAA,UAAA,QAAiB,UAAjB,CAAA;AAGA,IAAM,QAAY,KAAK,CAAL;;IAalB;AASC,aATD,aASC,GAA4B;8BAT7B,eAS6B;;AAE3B,YAAI,IAAI,IAAJ,CAFuB;AAG3B,UAAE,OAAF,GAAY,IAAZ,CAH2B;AAI3B,UAAE,UAAF,GAAe,EAAf,CAJ2B;;0CAAb;;SAAa;;AAK3B,UAAE,WAAF,CAAc,OAAd,EAL2B;KAA5B;;iBATD;;qCAiBsB,MAAQ;AAE5B,gBAAG,SAAO,IAAP,IAAe,SAAO,KAAP,EAAc;AAC/B,oBAAI,IAAI,IAAJ,CAD2B;AAE/B,kBAAE,OAAF,GAAY,IAAZ,CAF+B;AAG/B,+BAAc,kDAAd;AACC,yBAAK,QAAA,OAAA,CAAK,MAAL,CADN;AAEC,yBAAK,QAAA,OAAA,CAAK,QAAL;AACJ,+BAAO,KAAK,QAAL,EAAP,CADD;AAEC,8BAFD;AAFD,iBAH+B;AAS/B,kBAAE,UAAF,CAAa,IAAb,CAAkB,IAAlB,EAT+B;aAAhC;;;;oCAcW,OAAW;AAEtB,gBAAI,IAAI,IAAJ,CAFkB;AAGtB,kBAAM,OAAN,CAAc;uBAAI,EAAE,YAAF,CAAe,CAAf;aAAJ,CAAd,CAHsB;AAItB,mBAAO,CAAP,CAJsB;;;;iCAOF;+CAAX;;aAAW;;AAEpB,iBAAK,WAAL,CAAiB,KAAjB,EAFoB;AAGpB,mBAAO,IAAP,CAHoB;;;;qCAMI;+CAAX;;aAAW;;AAExB,iBAAK,WAAL,CAAiB,KAAjB,EAFwB;AAGxB,mBAAO,IAAP,CAHwB;;;;oCAMb,OAAW;AAEtB,gBAAI,IAAI,IAAJ,CAFkB;AAGtB,kBAAM,OAAN,CACE,aAAC;AAED,oBAAG,MAAI,IAAJ,IAAY,MAAI,KAAJ,EAAW;AACzB,sBAAE,YAAF,CAAe,CAAf,EADyB;AAEzB,sBAAE,UAAF,CAAa,IAAb,CAAkB,MAAlB,EAFyB;iBAA1B;aAFA,CADF,CAHsB;AAYtB,mBAAO,CAAP,CAZsB;;;;mCAgCf;AAEP,gBAAI,SAAS,KAAK,OAAL,CAFN;AAGP,gBAAG,CAAC,MAAD,KAAU,IAAV,EACF,KAAK,OAAL,GAAe,SAAS,KAAK,UAAL,CAAgB,IAAhB,EAAT,CADhB;AAGA,mBAAO,MAAP,CANO;;;;6BASH,WAAgB;AAEpB,mBAAO,KAAK,UAAL,CAAgB,IAAhB,CAAqB,SAArB,CAAP,CAFoB;;;;gCAKhB;AAEJ,iBAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAzB,CAFI;AAGJ,iBAAK,OAAL,GAAe,IAAf,CAHI;;;;kCAME;AAEN,iBAAK,KAAL,GAFM;;;;4BAzBI;AAEV,mBAAO,KAAK,UAAL,CAAgB,MAAhB,KAAyB,CAAzB,CAFG;;;;WA/EZ;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;AC+CA,QAAQ,OAAR,GAAkB,aAAlB","file":"System/Text/StringBuilder.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport LinkedList from '../Collections/LinkedList';\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/string-concatenation-looped\r\n * http://jsperf.com/adding-strings-to-an-array\r\n * http://jsperf.com/string-concatenation-versus-array-operations-with-join\r\n *\r\n * It is clearly inefficient to use a StringBuilder or LinkedList to build a string when you have a small set of string portions.\r\n * StringBuilder will really show it's benefit likely somewhere above 1000 items.\r\n *****************************/\r\n\r\n\r\nexport default\r\nclass StringBuilder implements IDisposable\r\n\t// Adding IDisposable allows for use with System.using();\r\n\t// ... and since this may end up being a large array container, might be a good idea to allow for flexible cleanup.\r\n{\r\n\t//noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _partArray:any[];\r\n\tprivate _latest:string; // AKA persistentString\r\n\r\n\tconstructor(...initial:any[])\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._latest = null;\r\n\t\t_._partArray = [];\r\n\t\t_.appendThese(initial);\r\n\t}\r\n\r\n\tprivate appendSingle(item:any):void\r\n\t{\r\n\t\tif(item!==null && item!==VOID0) {\r\n\t\t\tvar _ = this;\r\n\t\t\t_._latest = null;\r\n\t\t\tswitch(typeof item) {\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\titem = item.toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t_._partArray.push(item); // Other primitive types can keep their format since a number or boolean is a smaller footprint than a string.\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tappendThese(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(s=> _.appendSingle(s));\r\n\t\treturn _;\r\n\t}\r\n\r\n\tappend(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendThese(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLine(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendLines(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLines(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(\r\n\t\t\t\ti=>\r\n\t\t\t{\r\n\t\t\t\tif(i!==null && i!==VOID0) {\r\n\t\t\t\t\t_.appendSingle(i);\r\n\t\t\t\t\t_._partArray.push(\"\\r\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn _;\r\n\t}\r\n\r\n\t/** /// These methods can only efficiently be added if not using a single array.\r\n\t insert(index: number, value: string, count: number = 1): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\r\n\t remove(startIndex:number, length:number): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\t /**/\r\n\r\n\tget isEmpty()\r\n\t{\r\n\t\treturn this._partArray.length===0;\r\n\t}\r\n\r\n\ttoString()\r\n\t{\r\n\t\tvar latest = this._latest;\r\n\t\tif(!latest===null)\r\n\t\t\tthis._latest = latest = this._partArray.join();\r\n\r\n\t\treturn latest;\r\n\t}\r\n\r\n\tjoin(delimiter:string):string\r\n\t{\r\n\t\treturn this._partArray.join(delimiter);\r\n\t}\r\n\r\n\tclear():void\r\n\t{\r\n\t\tthis._partArray.length = 0;\r\n\t\tthis._latest = null;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.clear();\r\n\t}\r\n\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst Types_1 = require('../Types');\nconst VOID0 = void 0;\nclass StringBuilder {\n    constructor(...initial) {\n        var _ = this;\n        _._latest = null;\n        _._partArray = [];\n        _.appendThese(initial);\n    }\n    appendSingle(item) {\n        if (item !== null && item !== VOID0) {\n            var _ = this;\n            _._latest = null;\n            switch (typeof item) {\n                case Types_1.default.OBJECT:\n                case Types_1.default.FUNCTION:\n                    item = item.toString();\n                    break;\n            }\n            _._partArray.push(item);\n        }\n    }\n    appendThese(items) {\n        var _ = this;\n        items.forEach(s => _.appendSingle(s));\n        return _;\n    }\n    append(...items) {\n        this.appendThese(items);\n        return this;\n    }\n    appendLine(...items) {\n        this.appendLines(items);\n        return this;\n    }\n    appendLines(items) {\n        var _ = this;\n        items.forEach(i => {\n            if (i !== null && i !== VOID0) {\n                _.appendSingle(i);\n                _._partArray.push(\"\\r\\n\");\n            }\n        });\n        return _;\n    }\n    get isEmpty() {\n        return this._partArray.length === 0;\n    }\n    toString() {\n        var latest = this._latest;\n        if (!latest === null)\n            this._latest = latest = this._partArray.join();\n        return latest;\n    }\n    join(delimiter) {\n        return this._partArray.join(delimiter);\n    }\n    clear() {\n        this._partArray.length = 0;\n        this._latest = null;\n    }\n    dispose() {\n        this.clear();\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StringBuilder;\n"]}