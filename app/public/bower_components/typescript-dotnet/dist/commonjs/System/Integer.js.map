{"version":3,"sources":["System/Integer.js","System/Integer.ts"],"names":[],"mappings":";;;;AAIA;;ACCA,IAAA,UAAA,QAAiB,SAAjB,CAAA;AACA,IAAA,sBAAA,QAA8B,gCAA9B,CAAA;AAEA,SAAA,OAAA,CAAiB,CAAjB,EAAyB;AAExB,WAAO,IAAI,CAAJ,CAFiB;CAAzB;AAKA,IAAO,OAAP;AAAA,CAAA,UAAO,OAAP,EACA;AAEC,aAAA,CAAA,CAAW,GAAX,EAAqB;AACpB,eAAO,IAAC,CAAK,MAAL,KAAc,GAAd,GAAqB,CAAtB,CADa;KAArB;AAeA,aAAA,MAAA,CAAuB,GAAvB,EAAiC;AAEhC,eAAO,GAAP,EAAW,KAAX,EAFgC;AAGhC,YAAG,OAAK,CAAL,EAAQ,OAAO,CAAP,CAAX;AACA,eAAO,MAAM,CAAN,GAAU,CAAV,GAAc,CAAC,CAAD,CAJW;AAKhC,eAAO,EAAE,GAAF,CAAP,CALgC;KAAjC;AAAgB,YAAA,MAAA,GAAM,MAAN,CAjBjB;AAyBC,QAAc,MAAd,CAzBD;AAyBC,KAAA,UAAc,MAAd,EAAqB;AAapB,iBAAA,KAAA,CAAsB,QAAtB,EAAqC;AAEpC,mBAAO,EAAE,QAAF,CAAP,CAFoC;SAArC;AAAgB,eAAA,KAAA,GAAK,KAAL,CAbI;KAArB,CAAA,CAAc,SAAA,QAAA,MAAA,KAAA,QAAA,MAAA,GAAM,EAAN,CAAA,CAAd,CAzBD;AA8CC,aAAA,EAAA,CAAmB,CAAnB,EAA2B;AAE1B,eAAO,QAAA,OAAA,CAAK,QAAL,CAAc,CAAd,EAAiB,KAAjB,KAA2B,MAAI,IAAI,CAAJ,CAAJ,CAFR;KAA3B;AAAgB,YAAA,EAAA,GAAE,EAAF,CA9CjB;AAmDC,aAAA,MAAA,CAAuB,CAAvB,EAAiC,YAAjC,EAAqD;AAEpD,YAAI,IAAI,GAAG,CAAH,CAAJ,CAFgD;AAGpD,YAAG,CAAC,CAAD,EACH;AACC,kBAAM,IAAI,oBAAA,OAAA,CAAkB,gBAAgB,GAAhB,EAAqB,qBAA3C,CAAN,CADD;SADA;AAIA,eAAO,CAAP,CAPoD;KAArD;AAAgB,YAAA,MAAA,GAAM,MAAN,CAnDjB;CADA,CAAA,CAAO,YAAA,UAAO,EAAP,CAAA,CAAP;AAgEA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADjCA,QAAQ,OAAR,GCiCe,ODjCf","file":"System/Integer.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Types_1 = require('./Types');\nconst ArgumentException_1 = require('./Exceptions/ArgumentException');\nfunction Integer(n) {\n    return n | 0;\n}\nvar Integer;\n(function (Integer) {\n    function r(max) {\n        return (Math.random() * max) | 0;\n    }\n    function random(max) {\n        assert(max, 'max');\n        if (max == 0)\n            return 0;\n        max += max > 0 ? 1 : -1;\n        return r(max);\n    }\n    Integer.random = random;\n    var random;\n    (function (random) {\n        function under(boundary) {\n            return r(boundary);\n        }\n        random.under = under;\n    })(random = Integer.random || (Integer.random = {}));\n    function is(n) {\n        return Types_1.default.isNumber(n, false) && n == (n | 0);\n    }\n    Integer.is = is;\n    function assert(n, argumentName) {\n        var i = is(n);\n        if (!i) {\n            throw new ArgumentException_1.default(argumentName || 'n', \"Must be an integer.\");\n        }\n        return i;\n    }\n    Integer.assert = assert;\n})(Integer || (Integer = {}));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Integer;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from './Types';\r\nimport ArgumentException from './Exceptions/ArgumentException';\r\n\r\nfunction Integer(n:number):number\r\n{\r\n\treturn n | 0;\r\n}\r\n\r\nmodule Integer\r\n{\r\n\r\n\tfunction r(max:number):number {\r\n\t\treturn (Math.random()*max) | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a random integer from zero to the max.\r\n\t * Negative numbers are allowed.\r\n\t *\r\n\t * Examples:<br/>\r\n\t * ```Integer.random(1)``` will return 0 or 1.<br/>\r\n\t * ```Integer.random(-2)``` will return 0, -1, or -2.<br/>\r\n\t *\r\n\t * @param max\r\n\t * @returns {number}\r\n\t */\r\n\texport function random(max:number):number\r\n\t{\r\n\t\tassert(max,'max');\r\n\t\tif(max==0) return 0;\r\n\t\tmax += max > 0 ? 1 : -1;\r\n\t\treturn r(max);\r\n\t}\r\n\r\n\texport module random {\r\n\r\n\t\t/**\r\n\t\t * Returns a random integer from zero up to the boundary value.\r\n\t\t * Negative and fractional numbers are allowed.\r\n\t\t *\r\n\t\t * Example:<br/>\r\n\t\t * ```Integer.random(-2)``` will return 0, or -1.<br/>\r\n\t\t * ```Integer.random(5)``` will return 0, 1, 2, 3 or 4.<br/>\r\n\t\t *\r\n\t\t * @param boundary\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\texport function under(boundary:number):number\r\n\t\t{\r\n\t\t\treturn r(boundary)\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn Type.isNumber(n, false) && n==(n | 0);\r\n\t}\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be an integer.\");\r\n\t\t}\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}