{"version":3,"sources":["System/Collections/Sorting/SortContext.ts","System/Collections/Sorting/SortContext.js"],"names":[],"mappings":";;;;AASA;;;;;;AAEA,IAAY,SAAM,QAAM,eAAN,CAAN;;IAIZ;AAWC,aAXD,WAWC,CACW,KADX,EAGyC;YAD9B,kEAA0B,OAAO,OAAP,gBACI;;YAA9B,+DAAe,iBAAe;;8BAd1C,aAc0C;;AAF9B,aAAA,KAAA,GAAA,KAAA,CAE8B;AAD9B,aAAA,SAAA,GAAA,SAAA,CAC8B;AAA9B,aAAA,MAAA,GAAA,MAAA,CAA8B;KAHzC;;iBAXD;;8CAwBuB,QAAU;;;AAE/B,gBAAG,UAAQ,IAAR,EAAc,OAAO,EAAP,CAAjB;AACA,gBAAI,SAAkB,OAAO,GAAP,CAAW,UAAC,CAAD,EAAI,CAAJ;uBAAQ;aAAR,CAA7B,CAH2B;AAI/B,mBAAO,IAAP,CAAY,UAAC,CAAD,EAAI,CAAJ;uBAAU,MAAK,OAAL,CAAa,OAAO,CAAP,CAAb,EAAwB,OAAO,CAAP,CAAxB;aAAV,CAAZ,CAJ+B;AAK/B,mBAAO,MAAP,CAL+B;;;;gCAcxB,GAAK,GAAG;AAEf,gBAAI,IAAI,IAAJ,CAFW;AAGf,gBAAI,IAAI,EAAE,SAAF,CAAY,CAAZ,EAAe,CAAf,CAAJ,CAHW;AAIf,gBAAG,KAAG,CAAH,IAAQ,EAAE,KAAF,EAAS,OAAO,EAAE,KAAF,CAAQ,OAAR,CAAgB,CAAhB,EAAmB,CAAnB,CAAP,CAApB;AACA,mBAAO,EAAE,MAAF,GAAS,CAAT,CALQ;;;;4BA9BP;AACP,mBAAO,KAAK,MAAL,CADA;;;;WARV;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ACcA,QAAQ,OAAR,GAAkB,WAAlB","file":"System/Collections/Sorting/SortContext.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n///<reference path=\"../../IComparer.d.ts\"/>\r\n///<reference path=\"../Array/IArray.d.ts\"/>\r\n///<reference path=\"Order.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as Values from '../../Compare'\r\nimport Integer from '../../Integer'\r\nimport forEach from \"../Enumeration/forEach\"\r\n\r\nexport default\r\nclass SortContext<T> implements IComparer<T>\r\n{\r\n\r\n\t/**\r\n\t * Direction of the comparison.\r\n\t * @type {Order}\r\n\t */\r\n\tget order():Order\r\n\t{ return this._order; }\r\n\r\n\tconstructor(\r\n\t\tprotected _next:IComparer<T>,\r\n\t\tprotected _comparer:Comparison<T> = Values.compare,\r\n\t\tprotected _order:Order = Order.Ascending)\r\n\t{\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Generates an array of indexes from the source in order of their expected sort without modifying the source.\r\n\t * @param source\r\n\t * @returns {number[]}\r\n\t */\r\n\tgenerateSortedIndexes(source:T[]):number[]\r\n\t{\r\n\t\tif(source==null) return [];\r\n\t\tvar result:number[] = source.map((s, i)=>i);\r\n\t\tresult.sort((a, b) => this.compare(source[a], source[b]));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares two values based upon SortContext parameters.\r\n\t * @param a\r\n\t * @param b\r\n\t * @returns {any}\r\n\t */\r\n\tcompare(a:T, b:T):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar d = _._comparer(a, b);\r\n\t\tif(d==0 && _._next) return _._next.compare(a, b);\r\n\t\treturn _._order*d;\r\n\t}\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst Values = require('../../Compare');\nclass SortContext {\n    constructor(_next, _comparer = Values.compare, _order = 1) {\n        this._next = _next;\n        this._comparer = _comparer;\n        this._order = _order;\n    }\n    get order() { return this._order; }\n    generateSortedIndexes(source) {\n        if (source == null)\n            return [];\n        var result = source.map((s, i) => i);\n        result.sort((a, b) => this.compare(source[a], source[b]));\n        return result;\n    }\n    compare(a, b) {\n        var _ = this;\n        var d = _._comparer(a, b);\n        if (d == 0 && _._next)\n            return _._next.compare(a, b);\n        return _._order * d;\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = SortContext;\n"]}