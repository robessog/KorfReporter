{"version":3,"sources":["System/Collections/Dictionaries/StringKeyDictionary.ts","System/Collections/Dictionaries/StringKeyDictionary.js"],"names":[],"mappings":"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","file":"System/Collections/Dictionaries/StringKeyDictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IDictionary.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual} from '../../Compare';\r\nimport DictionaryBase from './DictionaryBase';\r\nimport ArgumentNullException from '../../Exceptions/ArgumentNullException';\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport default\r\nclass StringKeyDictionary<TValue>\r\nextends DictionaryBase<string, TValue> implements IStringKeyDictionary<TValue>\r\n{\r\n\tprivate _count:number = 0;\r\n\tprivate _map:IMap<TValue> = {};\r\n\r\n\r\n\tcontainsKey(key:string):boolean\r\n\t{\r\n\t\treturn (key)in(this._map);\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tvar map = this._map, equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\tfor(let key in map)\r\n\t\t{\r\n\t\t\tif(map.hasOwnProperty(key) && equal(map[key], value))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetValue(key:string):TValue\r\n\t{\r\n\t\treturn this._map[key];\r\n\t}\r\n\r\n\tsetValue(key:string, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, map = _._map, old = map[key];\r\n\t\tif(old!==value)\r\n\t\t{\r\n\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif((key)in(map))\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete map[key];\r\n\t\t\t\t\t--_._count;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(!((key)in(map)))\r\n\t\t\t\t\t++_._count;\r\n\t\t\t\tmap[key] = value;\r\n\t\t\t}\r\n\r\n\t\t\t_._onValueUpdate(key, value, old);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Returns true if any value is updated...\r\n\timportMap(values:IMap<TValue>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let key in values)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttoMap(selector?:(key:string, value:TValue) => TValue):IMap<TValue>\r\n\t{\r\n\t\tvar _ = this, result:IMap<TValue> = {};\r\n\t\tfor(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t{\r\n\t\t\t\tvar value = _._map[key];\r\n\t\t\t\tif(selector)\r\n\t\t\t\t\tvalue = selector(key, value);\r\n\t\t\t\tif(value!==VOID0)\r\n\t\t\t\t\tresult[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\r\n\t\tvar _ = this, result:string[] = [];\r\n\t\tfor(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t\tresult.push(key);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\tfor(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t\tresult.push(_._map[key]);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst Compare_1 = require('../../Compare');\nconst DictionaryBase_1 = require('./DictionaryBase');\nconst VOID0 = void 0;\nclass StringKeyDictionary extends DictionaryBase_1.default {\n    constructor(...args) {\n        super(...args);\n        this._count = 0;\n        this._map = {};\n    }\n    containsKey(key) {\n        return (key) in (this._map);\n    }\n    containsValue(value) {\n        var map = this._map, equal = Compare_1.areEqual;\n        for (let key in map) {\n            if (map.hasOwnProperty(key) && equal(map[key], value))\n                return true;\n        }\n        return false;\n    }\n    getValue(key) {\n        return this._map[key];\n    }\n    setValue(key, value) {\n        var _ = this, map = _._map, old = map[key];\n        if (old !== value) {\n            if (value === VOID0) {\n                if ((key) in (map)) {\n                    delete map[key];\n                    --_._count;\n                }\n            }\n            else {\n                if (!((key) in (map)))\n                    ++_._count;\n                map[key] = value;\n            }\n            _._onValueUpdate(key, value, old);\n            return true;\n        }\n        return false;\n    }\n    importMap(values) {\n        var _ = this;\n        return _.handleUpdate(() => {\n            var changed = false;\n            for (let key in values) {\n                if (values.hasOwnProperty(key) && _.setValue(key, values[key]))\n                    changed = true;\n            }\n            return changed;\n        });\n    }\n    toMap(selector) {\n        var _ = this, result = {};\n        for (let key in _._map) {\n            if (_._map.hasOwnProperty(key)) {\n                var value = _._map[key];\n                if (selector)\n                    value = selector(key, value);\n                if (value !== VOID0)\n                    result[key] = value;\n            }\n        }\n        return result;\n    }\n    getKeys() {\n        var _ = this, result = [];\n        for (let key in _._map) {\n            if (_._map.hasOwnProperty(key))\n                result.push(key);\n        }\n        return result;\n    }\n    getValues() {\n        var _ = this, result = [];\n        for (let key in _._map) {\n            if (_._map.hasOwnProperty(key))\n                result.push(_._map[key]);\n        }\n        return result;\n    }\n    getCount() {\n        return this._count;\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StringKeyDictionary;\n"]}