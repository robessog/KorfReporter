{"version":3,"sources":["System/Collections/Dictionaries/OrderedStringKeyDictionary.ts","System/Collections/Dictionaries/OrderedStringKeyDictionary.js"],"names":[],"mappings":";;;;AAKA;;;;;;;;;;;;AAEA,IAAY,eAAY,QAAM,kBAAN,CAAZ;AACZ,IAAA,wBAAA,QAAgC,uBAAhC,CAAA;AACA,IAAA,gCAAA,QAAwC,8CAAxC,CAAA;AAEA,IAAM,QAAY,KAAK,CAAL;;IAElB;;;AAQC,aARD,0BAQC,GAAA;8BARD,4BAQC;;2EARD,wCAQC;;AAFQ,cAAA,MAAA,GAAkB,EAAlB,CAER;;KAAA;;iBARD;;mCAaY,KAAU;AAEpB,mBAAO,KAAK,MAAL,CAAY,OAAZ,CAAoB,GAApB,EAAyB,CAAzB,CAAP,CAFoB;;;;wCAKL,OAAY;AAE3B,mBAAO,KAAK,QAAL,CAAc,KAAK,MAAL,CAAY,KAAZ,CAAd,CAAP,CAF2B;;;;iCAMnB,KAAY,OAAc,WAAkB;AAEpD,gBAAI,IAAI,IAAJ;gBAAU,SAAS,EAAE,UAAF,CAAa,GAAb,KAAoB,CAAC,CAAD,CAFS;AAGpD,gBAAG,CAAC,MAAD,KAAY,UAAQ,KAAR,IAAiB,SAAjB,CAAZ,EACF,EAAE,MAAF,CAAS,IAAT,CAAc,GAAd,EADD,KAEK,IAAG,UAAU,UAAQ,KAAR,IAAiB,CAAC,SAAD,EAClC,aAAa,MAAb,CAAoB,EAAE,MAAF,EAAU,GAA9B,EADI;AAGL,8CAhCF,oEAgCwB,KAAK,MAA3B,CARoD;;;;mCAW1C,OAAc,OAAY;AAEpC,gBAAI,IAAI,IAAJ;gBAAU,QAAQ,EAAE,MAAF,CAFc;AAGpC,gBAAG,QAAM,CAAN,EACF,MAAM,IAAI,8BAAA,OAAA,CAA4B,OAAhC,EAAyC,KAAzC,EAAgD,oBAAhD,CAAN,CADD;AAEA,gBAAG,SAAO,MAAM,MAAN,EACT,MAAM,IAAI,8BAAA,OAAA,CAA4B,OAAhC,EAAyC,KAAzC,EAAgD,4BAAhD,CAAN,CADD;AAEA,mBAAO,EAAE,QAAF,CAAW,MAAM,KAAN,CAAX,EAAyB,KAAzB,CAAP,CAPoC;;;;qCAWxB,QAAe;AAE3B,gBAAI,IAAI,IAAJ,CAFuB;AAG3B,mBAAO,EAAE,YAAF,CACN,YAAA;AAEC,oBAAI,UAAkB,KAAlB,CAFL;AAGC,qBAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,OAAO,MAAP,EAAe,GAAhC,EACA;AACC,wBAAG,EAAE,UAAF,CAAa,CAAb,EAAgB,OAAO,CAAP,CAAhB,CAAH,EACC,UAAU,IAAV,CADD;iBAFD;AAKA,uBAAO,OAAP,CARD;aAAA,CADD,CAH2B;;;;oCAmBA;8CAAf;;aAAe;;AAE3B,mBAAO,KAAK,YAAL,CAAkB,MAAlB,CAAP,CAF2B;;;;sCAKd,OAAY;AAEzB,mBAAO,KAAK,UAAL,CAAgB,KAAhB,EAAuB,SAAvB,CAAP,CAFyB;;;;kCAKT;AAEhB,gBAAI,IAAI,IAAJ,CAFY;AAGhB,mBAAO,EAAE,MAAF,CAAS,MAAT,CAAgB;uBAAM,EAAE,WAAF,CAAc,GAAd;aAAN,CAAvB,CAHgB;;;;WA3ElB;EAEQ,sBAAA,OAAA;;AAFR,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;AC8CA,QAAQ,OAAR,GAAkB,0BAAlB","file":"System/Collections/Dictionaries/OrderedStringKeyDictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as ArrayUtility from '../Array/Utility';\r\nimport StringKeyDictionary from './StringKeyDictionary';\r\nimport ArgumentOutOfRangeException from '../../Exceptions/ArgumentOutOfRangeException'\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport default\r\nclass OrderedStringKeyDictionary<TValue>\r\nextends StringKeyDictionary<TValue> implements IOrderedDictionary<string, TValue>\r\n{\r\n\r\n\t// noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _order:string[] = []; // Maintains indexes.\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tindexOfKey(key:string):number\r\n\t{\r\n\t\treturn this._order.indexOf(key, 0);\r\n\t}\r\n\r\n\tgetValueByIndex(index:number):TValue\r\n\t{\r\n\t\treturn this.getValue(this._order[index]);\r\n\t}\r\n\r\n\t// adding keepIndex allows for clearing a value while still retaining it's index.\r\n\tsetValue(key:string, value:TValue, keepIndex?:boolean):boolean\r\n\t{\r\n\t\tvar _ = this, exists = _.indexOfKey(key)!= -1;\r\n\t\tif(!exists && (value!==VOID0 || keepIndex))\r\n\t\t\t_._order.push(key);\r\n\t\telse if(exists && value===VOID0 && !keepIndex)\r\n\t\t\tArrayUtility.remove(_._order, key);\r\n\r\n\t\treturn super.setValue(key, value);\r\n\t}\r\n\r\n\tsetByIndex(index:number, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, order = _._order;\r\n\t\tif(index<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is less than zero.');\r\n\t\tif(index>=order.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is greater than the count.');\r\n\t\treturn _.setValue(order[index], value);\r\n\t}\r\n\r\n\t// importValues([x,y,z]);\r\n\timportValues(values:TValue[]):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let i = 0; i<values.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_.setByIndex(i, values[i]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t// setValues(x,y,z);\r\n\tsetValues(...values:TValue[]):boolean\r\n\t{\r\n\t\treturn this.importValues(values);\r\n\t}\r\n\r\n\tremoveByIndex(index:number):boolean\r\n\t{\r\n\t\treturn this.setByIndex(index, undefined);\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _._order.filter(key=> _.containsKey(key));\r\n\t}\r\n\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst ArrayUtility = require('../Array/Utility');\nconst StringKeyDictionary_1 = require('./StringKeyDictionary');\nconst ArgumentOutOfRangeException_1 = require('../../Exceptions/ArgumentOutOfRangeException');\nconst VOID0 = void 0;\nclass OrderedStringKeyDictionary extends StringKeyDictionary_1.default {\n    constructor() {\n        super();\n        this._order = [];\n    }\n    indexOfKey(key) {\n        return this._order.indexOf(key, 0);\n    }\n    getValueByIndex(index) {\n        return this.getValue(this._order[index]);\n    }\n    setValue(key, value, keepIndex) {\n        var _ = this, exists = _.indexOfKey(key) != -1;\n        if (!exists && (value !== VOID0 || keepIndex))\n            _._order.push(key);\n        else if (exists && value === VOID0 && !keepIndex)\n            ArrayUtility.remove(_._order, key);\n        return super.setValue(key, value);\n    }\n    setByIndex(index, value) {\n        var _ = this, order = _._order;\n        if (index < 0)\n            throw new ArgumentOutOfRangeException_1.default('index', index, 'Is less than zero.');\n        if (index >= order.length)\n            throw new ArgumentOutOfRangeException_1.default('index', index, 'Is greater than the count.');\n        return _.setValue(order[index], value);\n    }\n    importValues(values) {\n        var _ = this;\n        return _.handleUpdate(() => {\n            var changed = false;\n            for (let i = 0; i < values.length; i++) {\n                if (_.setByIndex(i, values[i]))\n                    changed = true;\n            }\n            return changed;\n        });\n    }\n    setValues(...values) {\n        return this.importValues(values);\n    }\n    removeByIndex(index) {\n        return this.setByIndex(index, undefined);\n    }\n    getKeys() {\n        var _ = this;\n        return _._order.filter(key => _.containsKey(key));\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = OrderedStringKeyDictionary;\n"]}