{"version":3,"sources":["System/Collections/Enumeration/EnumeratorBase.ts","System/Collections/Enumeration/EnumeratorBase.js"],"names":[],"mappings":";;;;AAQA;;;;;;;;;;AAGA,IAAA,mBAAA,QAA2B,iCAA3B,CAAA;;IAIA;;;;;;;oCAKa,OAAO;AAClB,iBAAK,QAAL,GAAgB,KAAhB,CADkB;AAElB,mBAAO,IAAP,CAFkB;;;;qCAKT;AACT,iBAAK,QAAL,GAAgB,IAAhB,CADS;AAET,mBAAO,KAAP,CAFS;;;;4BAPC;AAAO,mBAAO,KAAK,QAAL,CAAd;;;;WAHZ;;;AAiBA,IAAK,eAAL;AAAA,CAAA,UAAK,eAAL,EAAoB;AAAG,oBAAA,gBAAA,QAAA,IAAA,CAAA,CAAA,GAAA,QAAA,CAAH;AAAW,oBAAA,gBAAA,SAAA,IAAA,CAAA,CAAA,GAAA,SAAA,CAAX;AAAoB,oBAAA,gBAAA,OAAA,IAAA,CAAA,CAAA,GAAA,OAAA,CAApB;CAApB,CAAA,CAAK,oBAAA,kBAAe,EAAf,CAAA,CAAL;;IAGA;;;AAYC,aAZD,cAYC,CACS,WADT,EAES,UAFT,EAGS,QAHT,EAG6B;8BAf9B,gBAe8B;;2EAf9B,4BAe8B;;AAFpB,cAAA,WAAA,GAAA,WAAA,CAEoB;AADpB,cAAA,UAAA,GAAA,UAAA,CACoB;AAApB,cAAA,QAAA,GAAA,QAAA,CAAoB;AAG5B,cAAK,KAAL,GAH4B;;KAH7B;;iBAZD;;gCAsBM;AACJ,gBAAI,IAAI,IAAJ,CADA;AAEJ,cAAE,QAAF,GAAa,IAAI,OAAJ,EAAb,CAFI;AAGJ,cAAE,MAAF,GAAW,gBAAgB,MAAhB,CAHP;;;;mCAMG;AACP,gBAAI,IAAI,IAAJ,CADG;AAEP,gBAAI;AACH,wBAAO,EAAE,MAAF;AACN,yBAAK,gBAAgB,MAAhB;AACJ,0BAAE,MAAF,GAAW,gBAAgB,OAAhB,CADZ;AAEC,4BAAI,cAAc,EAAE,WAAF,CAFnB;AAGC,4BAAG,WAAH,EACC,cADD;AAJF,yBAOM,gBAAgB,OAAhB;AACJ,4BAAG,EAAE,UAAF,CAAa,EAAE,QAAF,CAAhB,EAA6B;AAC5B,mCAAO,IAAP,CAD4B;yBAA7B,MAGK;AACJ,iCAAK,OAAL,GADI;AAEJ,mCAAO,KAAP,CAFI;yBAHL;AARF,yBAeM,gBAAgB,KAAhB;AACJ,+BAAO,KAAP,CADD;AAfD,iBADG;aAAJ,CAoBA,OAAM,CAAN,EAAS;AACR,qBAAK,OAAL,GADQ;AAER,sBAAM,CAAN,CAFQ;aAAT;;;;qCAMmB;AACnB,gBAAI,IAAI,IAAJ;gBAAU,WAAW,EAAE,QAAF,CADN;AAGnB,cAAE,WAAF,GAAgB,IAAhB,CAHmB;AAInB,cAAE,QAAF,GAAa,IAAb,CAJmB;AAMnB,gBAAI,UAAU,EAAE,QAAF,CANK;AAOnB,cAAE,QAAF,GAAa,IAAb,CAPmB;AAQnB,gBAAG,OAAH,EACC,QAAQ,UAAR,GADD;AAGA,gBAAI;AAEH,oBAAG,QAAH,EACC,WADD;aAFD,SAMQ;AAEP,qBAAK,MAAL,GAAc,gBAAgB,KAAhB,CAFP;aANR;;;;4BA5DU;AACV,mBAAO,KAAK,QAAL,CAAc,OAAd,CADG;;;;WAPZ;EACgC,iBAAA,OAAA;;AADhC,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ACgDA,QAAQ,OAAR,GAAkB,cAAlB","file":"System/Collections/Enumeration/EnumeratorBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"IEnumerator.d.ts\"/>\r\n///<reference path=\"IYield.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../../Types';\r\nimport DisposableBase from '../../Disposable/DisposableBase'\r\n\r\n\r\n\r\nclass Yielder<T> implements IYield<T>\r\n{\r\n\tprivate _current:T;\r\n\tget current():T { return this._current; }\r\n\r\n\tyieldReturn(value:T):boolean {\r\n\t\tthis._current = value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tyieldBreak():boolean {\r\n\t\tthis._current = null;\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n// IEnumerator State\r\nenum EnumeratorState { Before, Running, After }\r\n\r\n// Naming this class EnumeratorBase to avoid collision with IE.\r\nexport default\r\nclass EnumeratorBase<T> extends DisposableBase implements IEnumerator<T>\r\n{\r\n\r\n\tprivate _yielder:Yielder<T>;\r\n\tprivate _state:EnumeratorState;\r\n\r\n\tget current():T {\r\n\t\treturn this._yielder.current;\r\n\t}\r\n\r\n\t// \"Enumerator\" is conflict JScript's \"Enumerator\"\r\n\tconstructor(\r\n\t\tprivate initializer:() => void,\r\n\t\tprivate tryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tprivate disposer?:() => void)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\r\n\treset():void {\r\n\t\tvar _ = this;\r\n\t\t_._yielder = new Yielder<T>();\r\n\t\t_._state = EnumeratorState.Before;\r\n\t}\r\n\r\n\tmoveNext():boolean {\r\n\t\tvar _ = this;\r\n\t\ttry {\r\n\t\t\tswitch(_._state) {\r\n\t\t\t\tcase EnumeratorState.Before:\r\n\t\t\t\t\t_._state = EnumeratorState.Running;\r\n\t\t\t\t\tvar initializer = _.initializer;\r\n\t\t\t\t\tif(initializer)\r\n\t\t\t\t\t\tinitializer();\r\n\t\t\t\t// fall through\r\n\t\t\t\tcase EnumeratorState.Running:\r\n\t\t\t\t\tif(_.tryGetNext(_._yielder)) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.dispose();\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnumeratorState.After:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(e) {\r\n\t\t\tthis.dispose();\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _onDispose():void {\r\n\t\tvar _ = this, disposer = _.disposer;\r\n\r\n\t\t_.initializer = null;\r\n\t\t_.disposer = null;\r\n\r\n\t\tvar yielder = _._yielder;\r\n\t\t_._yielder = null;\r\n\t\tif(yielder)\r\n\t\t\tyielder.yieldBreak();\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif(disposer)\r\n\t\t\t\tdisposer();\r\n\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\t//if(this._state==EnumeratorState.Running)\r\n\t\t\tthis._state = EnumeratorState.After;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst DisposableBase_1 = require('../../Disposable/DisposableBase');\nclass Yielder {\n    get current() { return this._current; }\n    yieldReturn(value) {\n        this._current = value;\n        return true;\n    }\n    yieldBreak() {\n        this._current = null;\n        return false;\n    }\n}\nvar EnumeratorState;\n(function (EnumeratorState) {\n    EnumeratorState[EnumeratorState[\"Before\"] = 0] = \"Before\";\n    EnumeratorState[EnumeratorState[\"Running\"] = 1] = \"Running\";\n    EnumeratorState[EnumeratorState[\"After\"] = 2] = \"After\";\n})(EnumeratorState || (EnumeratorState = {}));\nclass EnumeratorBase extends DisposableBase_1.default {\n    constructor(initializer, tryGetNext, disposer) {\n        super();\n        this.initializer = initializer;\n        this.tryGetNext = tryGetNext;\n        this.disposer = disposer;\n        this.reset();\n    }\n    get current() {\n        return this._yielder.current;\n    }\n    reset() {\n        var _ = this;\n        _._yielder = new Yielder();\n        _._state = EnumeratorState.Before;\n    }\n    moveNext() {\n        var _ = this;\n        try {\n            switch (_._state) {\n                case EnumeratorState.Before:\n                    _._state = EnumeratorState.Running;\n                    var initializer = _.initializer;\n                    if (initializer)\n                        initializer();\n                case EnumeratorState.Running:\n                    if (_.tryGetNext(_._yielder)) {\n                        return true;\n                    }\n                    else {\n                        this.dispose();\n                        return false;\n                    }\n                case EnumeratorState.After:\n                    return false;\n            }\n        }\n        catch (e) {\n            this.dispose();\n            throw e;\n        }\n    }\n    _onDispose() {\n        var _ = this, disposer = _.disposer;\n        _.initializer = null;\n        _.disposer = null;\n        var yielder = _._yielder;\n        _._yielder = null;\n        if (yielder)\n            yielder.yieldBreak();\n        try {\n            if (disposer)\n                disposer();\n        }\n        finally {\n            this._state = EnumeratorState.After;\n        }\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = EnumeratorBase;\n"]}