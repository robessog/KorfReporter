{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.ts","System/Collections/Dictionaries/Dictionary.js"],"names":[],"mappings":"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","file":"System/Collections/Dictionaries/Dictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n///<reference path=\"../ILinkedListNode.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual} from '../../Compare';\r\nimport Type from '../../Types';\r\nimport Functions from '../../Functions';\r\nimport DictionaryBase from './DictionaryBase';\r\nimport EnumeratorBase from '../Enumeration/EnumeratorBase';\r\nimport LinkedNodeList from '../LinkedNodeList';\r\n\r\nconst VOID0:any = void 0;\r\n\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\nimplements ILinkedNode<HashEntry<TKey, TValue>>\r\n{\r\n\tconstructor(\r\n\t\tpublic key?:TKey,\r\n\t\tpublic value?:TValue,\r\n\t\tpublic previous?:HashEntry<TKey, TValue>,\r\n\t\tpublic next?:HashEntry<TKey, TValue>)\r\n\t{ }\r\n}\r\n\r\n// static utility methods\r\nfunction callHasOwnProperty(target:any, key:string)\r\n{\r\n\treturn Object.prototype.hasOwnProperty.call(target, key);\r\n}\r\n\r\nfunction computeHashCode(obj:any):string\r\n{\r\n\tif(obj===null) return \"null\";\r\n\tif(obj===VOID0) return \"undefined\";\r\n\r\n\treturn (typeof obj.toString===Type.FUNCTION)\r\n\t\t? obj.toString()\r\n\t\t: Object.prototype.toString.call(obj);\r\n}\r\n\r\n\r\nexport default\r\nclass Dictionary<TKey, TValue> extends DictionaryBase<TKey, TValue>\r\n{\r\n\tprivate _count:number = 0;\r\n\tprivate _entries = new LinkedNodeList<HashEntry<TKey, TValue>>();\r\n\tprivate _buckets:IMap<HashEntry<TKey, TValue>[]> = {};\r\n\r\n\tconstructor(private _compareSelector:Selector<TKey,any> = Functions.Identity)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\r\n\tprivate setKV(key:TKey, value:TValue, allowOverwrite:boolean):boolean\r\n\t{\r\n\t\tvar _           = this,\r\n\t\t    buckets     = _._buckets,\r\n\t\t    entries     = _._entries,\r\n\t\t    comparer    = _._compareSelector,\r\n\r\n\t\t    compareKey  = comparer(key),\r\n\t\t    hash:string = computeHashCode(compareKey), // TODO: need to find a way to guarantee hashing is a string?\r\n\r\n\t\t    entry:HashEntry<TKey, TValue>;\r\n\r\n\t\tif(callHasOwnProperty(buckets, hash))\r\n\t\t{\r\n\t\t\tvar equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\t\tvar array = buckets[hash];\r\n\t\t\tfor(let i = 0; i<array.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar old = array[i];\r\n\t\t\t\tif(comparer(old.key)===compareKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!allowOverwrite)\r\n\t\t\t\t\t\tthrow new Error(\"Key already exists.\");\r\n\r\n\t\t\t\t\tvar changed = !equal(old.value, value);\r\n\t\t\t\t\tif(changed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(value===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tentries.removeNode(old);\r\n\t\t\t\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t\t\t\tif(!array.length)\r\n\t\t\t\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\t\t\t--_._count;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tentry = new HashEntry<TKey, TValue>(key, value);\r\n\t\t\t\t\t\t\tentries.replace(old, entry);\r\n\t\t\t\t\t\t\tarray[i] = entry;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_._onValueUpdate(key, value, old.value);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn changed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tarray.push(entry = entry || new HashEntry<TKey, TValue>(key, value));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif(allowOverwrite)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(\"Cannot add 'undefined' value.\");\r\n\t\t\t}\r\n\t\t\tbuckets[hash] = [entry = new HashEntry<TKey, TValue>(key, value)];\r\n\t\t}\r\n\t\t++_._count;\r\n\t\tentries.addNode(entry);\r\n\t\t_._onValueUpdate(key, value, undefined);\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddByKeyValue(key:TKey, value:TValue):void\r\n\t{\r\n\t\tthis.setKV(key, value, false);\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue\r\n\t{\r\n\t\tvar buckets = this._buckets, comparer = this._compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey);\r\n\t\tif(!callHasOwnProperty(buckets, hash)) return undefined;\r\n\r\n\t\tvar array = buckets[hash];\r\n\t\tfor(let entry of array)\r\n\t\t{\r\n\t\t\tif(comparer(entry.key)===compareKey) return entry.value;\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tsetValue(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\treturn this.setKV(key, value, true);\r\n\t}\r\n\r\n\tcontainsKey(key:TKey):boolean\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, comparer = _._compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey);\r\n\t\tif(!callHasOwnProperty(buckets, hash)) return false;\r\n\r\n\t\tvar array = buckets[hash];\r\n\t\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t\t{\r\n\t\t\tif(comparer(array[i].key)===compareKey) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, count = super.clear(); // Remove one by one to allow for signaling.\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\t_._count = 0;\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t\tdelete buckets[key];\r\n\t\t}\r\n\r\n\t\t_._entries.clear();\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tvar _ = this, currentEntry:HashEntry<TKey, TValue>;\r\n\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() => { currentEntry = _._entries.first; },\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry!=null)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tvar _ = this, result:TKey[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.key);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.value);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst Compare_1 = require('../../Compare');\nconst Types_1 = require('../../Types');\nconst Functions_1 = require('../../Functions');\nconst DictionaryBase_1 = require('./DictionaryBase');\nconst EnumeratorBase_1 = require('../Enumeration/EnumeratorBase');\nconst LinkedNodeList_1 = require('../LinkedNodeList');\nconst VOID0 = void 0;\nclass HashEntry {\n    constructor(key, value, previous, next) {\n        this.key = key;\n        this.value = value;\n        this.previous = previous;\n        this.next = next;\n    }\n}\nfunction callHasOwnProperty(target, key) {\n    return Object.prototype.hasOwnProperty.call(target, key);\n}\nfunction computeHashCode(obj) {\n    if (obj === null)\n        return \"null\";\n    if (obj === VOID0)\n        return \"undefined\";\n    return (typeof obj.toString === Types_1.default.FUNCTION)\n        ? obj.toString()\n        : Object.prototype.toString.call(obj);\n}\nclass Dictionary extends DictionaryBase_1.default {\n    constructor(_compareSelector = Functions_1.default.Identity) {\n        super();\n        this._compareSelector = _compareSelector;\n        this._count = 0;\n        this._entries = new LinkedNodeList_1.default();\n        this._buckets = {};\n    }\n    setKV(key, value, allowOverwrite) {\n        var _ = this, buckets = _._buckets, entries = _._entries, comparer = _._compareSelector, compareKey = comparer(key), hash = computeHashCode(compareKey), entry;\n        if (callHasOwnProperty(buckets, hash)) {\n            var equal = Compare_1.areEqual;\n            var array = buckets[hash];\n            for (let i = 0; i < array.length; i++) {\n                var old = array[i];\n                if (comparer(old.key) === compareKey) {\n                    if (!allowOverwrite)\n                        throw new Error(\"Key already exists.\");\n                    var changed = !equal(old.value, value);\n                    if (changed) {\n                        if (value === VOID0) {\n                            entries.removeNode(old);\n                            array.splice(i, 1);\n                            if (!array.length)\n                                delete buckets[hash];\n                            --_._count;\n                        }\n                        else {\n                            entry = new HashEntry(key, value);\n                            entries.replace(old, entry);\n                            array[i] = entry;\n                        }\n                        _._onValueUpdate(key, value, old.value);\n                    }\n                    return changed;\n                }\n            }\n            array.push(entry = entry || new HashEntry(key, value));\n        }\n        else {\n            if (value === VOID0) {\n                if (allowOverwrite)\n                    return false;\n                else\n                    throw new Error(\"Cannot add 'undefined' value.\");\n            }\n            buckets[hash] = [entry = new HashEntry(key, value)];\n        }\n        ++_._count;\n        entries.addNode(entry);\n        _._onValueUpdate(key, value, undefined);\n        return true;\n    }\n    addByKeyValue(key, value) {\n        this.setKV(key, value, false);\n    }\n    getValue(key) {\n        var buckets = this._buckets, comparer = this._compareSelector;\n        var compareKey = comparer(key);\n        var hash = computeHashCode(compareKey);\n        if (!callHasOwnProperty(buckets, hash))\n            return undefined;\n        var array = buckets[hash];\n        for (let entry of array) {\n            if (comparer(entry.key) === compareKey)\n                return entry.value;\n        }\n        return undefined;\n    }\n    setValue(key, value) {\n        return this.setKV(key, value, true);\n    }\n    containsKey(key) {\n        var _ = this, buckets = _._buckets, comparer = _._compareSelector;\n        var compareKey = comparer(key);\n        var hash = computeHashCode(compareKey);\n        if (!callHasOwnProperty(buckets, hash))\n            return false;\n        var array = buckets[hash];\n        for (let i = 0, len = array.length; i < len; i++) {\n            if (comparer(array[i].key) === compareKey)\n                return true;\n        }\n        return false;\n    }\n    clear() {\n        var _ = this, buckets = _._buckets, count = super.clear();\n        _._count = 0;\n        for (let key in buckets) {\n            if (buckets.hasOwnProperty(key))\n                delete buckets[key];\n        }\n        _._entries.clear();\n        return count;\n    }\n    getCount() {\n        return this._count;\n    }\n    getEnumerator() {\n        var _ = this, currentEntry;\n        return new EnumeratorBase_1.default(() => { currentEntry = _._entries.first; }, (yielder) => {\n            if (currentEntry != null) {\n                var result = { key: currentEntry.key, value: currentEntry.value };\n                currentEntry = currentEntry.next;\n                return yielder.yieldReturn(result);\n            }\n            return yielder.yieldBreak();\n        });\n    }\n    getKeys() {\n        var _ = this, result = [];\n        var e = _._entries.first;\n        while (e) {\n            result.push(e.key);\n            e = e.next;\n        }\n        return result;\n    }\n    getValues() {\n        var _ = this, result = [];\n        var e = _._entries.first;\n        while (e) {\n            result.push(e.value);\n            e = e.next;\n        }\n        return result;\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Dictionary;\n"]}