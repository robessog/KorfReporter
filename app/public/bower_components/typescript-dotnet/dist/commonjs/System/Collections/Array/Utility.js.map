{"version":3,"sources":["System/Collections/Array/Utility.js","System/Collections/Array/Utility.ts"],"names":[],"mappings":"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","file":"System/Collections/Array/Utility.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Types_1 = require('../../Types');\nconst Integer_1 = require('../../Integer');\nconst Compare_1 = require('../../Compare');\nconst ArgumentException_1 = require('../../Exceptions/ArgumentException');\nconst ArgumentNullException_1 = require('../../Exceptions/ArgumentNullException');\nconst ArgumentOutOfRangeException_1 = require('../../Exceptions/ArgumentOutOfRangeException');\nfunction initialize(length) {\n    Integer_1.default.assert(length, 'length');\n    var array;\n    if (length > 65536)\n        array = new Array(length);\n    else {\n        array = [];\n        array.length = length;\n    }\n    return array;\n}\nexports.initialize = initialize;\nfunction copy(source, sourceIndex = 0, length = Infinity) {\n    if (!source)\n        return source;\n    return copyTo(source, initialize(Math.min(length, Math.max(source.length - sourceIndex, 0))), sourceIndex, 0, length);\n}\nexports.copy = copy;\nconst CBN = 'Cannot be null.', CBL0 = 'Cannot be less than zero.';\nfunction copyTo(source, destination, sourceIndex = 0, destinationIndex = 0, length = Infinity) {\n    if (!source)\n        throw new ArgumentNullException_1.default('source', CBN);\n    if (!destination)\n        throw new ArgumentNullException_1.default('destination', CBN);\n    if (sourceIndex < 0)\n        throw new ArgumentOutOfRangeException_1.default('sourceIndex', sourceIndex, CBL0);\n    var sourceLength = source.length;\n    if (sourceIndex >= sourceLength)\n        throw new ArgumentOutOfRangeException_1.default('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\n    if (destination.length < 0)\n        throw new ArgumentOutOfRangeException_1.default('destinationIndex', destinationIndex, CBL0);\n    var maxLength = source.length - sourceIndex;\n    if (isFinite(length) && length > maxLength)\n        throw new ArgumentOutOfRangeException_1.default('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\n    length = Math.min(length, maxLength);\n    for (let i = 0; i < length; ++i) {\n        destination[destinationIndex + i] = source[sourceIndex + i];\n    }\n    return destination;\n}\nexports.copyTo = copyTo;\nfunction contains(array, item, equalityComparer = Compare_1.areEqual) {\n    if (array && array.length) {\n        if (Array.isArray(array))\n            return array.indexOf(item) != -1;\n        for (let i = 0; i < array.length; ++i) {\n            if (equalityComparer(array[i], item))\n                return true;\n        }\n    }\n    return false;\n}\nexports.contains = contains;\nfunction replace(array, old, newValue, max) {\n    var count = 0;\n    if (max !== 0) {\n        if (!max)\n            max = Infinity;\n        else if (max < 0)\n            throw new ArgumentOutOfRangeException_1.default('max', max, CBL0);\n        for (let i = (array.length - 1); i >= 0; --i) {\n            if (array[i] === old) {\n                array[i] = newValue;\n                ++count;\n                if (!--max)\n                    break;\n            }\n        }\n    }\n    return count;\n}\nexports.replace = replace;\nfunction updateRange(array, value, index, length) {\n    Integer_1.default.assert(index, 'index');\n    Integer_1.default.assert(index, 'length');\n    var end = index + length;\n    for (let i = index; i < end; ++i) {\n        array[i] = value;\n    }\n}\nexports.updateRange = updateRange;\nfunction clear(array, index, length) {\n    updateRange(array, null, index, length);\n}\nexports.clear = clear;\nfunction register(array, item, equalityComparer = Compare_1.areEqual) {\n    if (!array)\n        throw new ArgumentNullException_1.default('array', CBN);\n    var len = array.length;\n    var ok = !len || !contains(array, item, equalityComparer);\n    if (ok)\n        array[len] = item;\n    return ok;\n}\nexports.register = register;\nfunction findIndex(array, predicate) {\n    if (!array)\n        throw new ArgumentNullException_1.default('array', CBN);\n    if (!Types_1.default.isFunction(predicate))\n        throw new ArgumentException_1.default('predicate', 'Must be a function.');\n    var len = array.length;\n    for (let i = 0; i < len; ++i) {\n        if ((i) in (array) && predicate(array[i]))\n            return i;\n    }\n    return -1;\n}\nexports.findIndex = findIndex;\nfunction forEach(source, fn) {\n    if (!source)\n        throw new ArgumentNullException_1.default('source', CBN);\n    if (fn) {\n        for (let i = 0; i < source.length; ++i) {\n            if (fn(source[i]) === false)\n                break;\n        }\n    }\n    return source;\n}\nexports.forEach = forEach;\nfunction applyTo(target, fn) {\n    if (!target)\n        throw new ArgumentNullException_1.default('target', CBN);\n    if (fn) {\n        for (let i = 0; i < target.length; ++i) {\n            target[i] = fn(target[i]);\n        }\n    }\n    return target;\n}\nexports.applyTo = applyTo;\nfunction removeIndex(array, index) {\n    if (!array)\n        throw new ArgumentNullException_1.default('array', CBN);\n    Integer_1.default.assert(index, 'index');\n    if (index < 0)\n        throw new ArgumentOutOfRangeException_1.default('index', index, CBL0);\n    var exists = index < array.length;\n    if (exists)\n        array.splice(index, 1);\n    return exists;\n}\nexports.removeIndex = removeIndex;\nfunction remove(array, value, max, equalityComparer = Compare_1.areEqual) {\n    if (!array)\n        throw new ArgumentNullException_1.default('array', CBN);\n    var count = 0;\n    if (array && array.length && max !== 0) {\n        if (!max)\n            max = Infinity;\n        else if (max < 0)\n            throw new ArgumentOutOfRangeException_1.default('max', max, CBL0);\n        for (let i = (array.length - 1); i >= 0; --i) {\n            if (equalityComparer(array[i], value)) {\n                array.splice(i, 1);\n                ++count;\n                if (!--max)\n                    break;\n            }\n        }\n    }\n    return count;\n}\nexports.remove = remove;\nfunction repeat(element, count) {\n    Integer_1.default.assert(count, 'count');\n    if (count < 0)\n        throw new ArgumentOutOfRangeException_1.default('count', count, CBL0);\n    var result = [];\n    while (count--) {\n        result.push(element);\n    }\n    return result;\n}\nexports.repeat = repeat;\nfunction flatten(a, recurseDepth = 0) {\n    var result = [];\n    for (var i = 0; i < a.length; i++) {\n        var x = a[i];\n        if (Array.isArray(x)) {\n            if (recurseDepth > 0)\n                x = flatten(x, recurseDepth - 1);\n            for (var n = 0; n < x.length; n++)\n                result.push(x[n]);\n        }\n        else\n            result.push(x);\n    }\n    return result;\n}\nexports.flatten = flatten;\nfunction dispatchUnsafe(listeners, payload, trap) {\n    if (listeners && listeners.length) {\n        for (let i = 0, len = listeners.length; i < len; i++) {\n            let fn = listeners[i];\n            if (!fn)\n                continue;\n            try {\n                fn(payload);\n            }\n            catch (ex) {\n                if (!trap)\n                    throw ex;\n                else if (Types_1.default.isFunction(trap))\n                    trap(ex, i);\n            }\n        }\n    }\n}\nexports.dispatchUnsafe = dispatchUnsafe;\nfunction dispatch(listeners, payload, trap) {\n    dispatchUnsafe(copy(listeners), payload, trap);\n}\nexports.dispatch = dispatch;\nfunction dispatchMapped(listeners, payload, trap) {\n    if (!listeners)\n        return null;\n    var result = copy(listeners);\n    if (listeners.length) {\n        for (let i = 0, len = result.length; i < len; i++) {\n            let fn = result[i];\n            try {\n                result[i] = fn\n                    ? fn(payload)\n                    : undefined;\n            }\n            catch (ex) {\n                result[i] = undefined;\n                if (!trap)\n                    throw ex;\n                else if (Types_1.default.isFunction(trap))\n                    trap(ex, i);\n            }\n        }\n    }\n    return result;\n}\nexports.dispatchMapped = dispatchMapped;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IArray.d.ts\"/>\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\nimport Type from '../../Types';\r\nimport Integer from '../../Integer';\r\nimport {areEqual} from '../../Compare';\r\nimport ArgumentException from '../../Exceptions/ArgumentException';\r\nimport ArgumentNullException from '../../Exceptions/ArgumentNullException';\r\nimport ArgumentOutOfRangeException from '../../Exceptions/ArgumentOutOfRangeException';\r\n\r\n/**\r\n * Initializes an array depending on the requested capacity.\r\n * The returned array will have a .length equal to the value provided.\r\n * @param length\r\n * @returns {T[]}\r\n */\r\nexport function initialize<T>(length:number):T[]\r\n{\r\n\tInteger.assert(length, 'length');\r\n\t// This logic is based upon JS performance tests that show a significant difference at the level of 65536.\r\n\tvar array:T[];\r\n\tif(length>65536)\r\n\t\tarray = new Array(length);\r\n\telse\r\n\t{\r\n\t\tarray = [];\r\n\t\tarray.length = length;\r\n\t}\r\n\treturn array;\r\n}\r\n\r\n/**\r\n *\r\n * @param source\r\n * @param sourceIndex\r\n * @param length\r\n * @returns {any}\r\n */\r\nexport function copy<T>(\r\n\tsource:IArray<T>,\r\n\tsourceIndex:number = 0,\r\n\tlength:number = Infinity):T[]\r\n{\r\n\tif(!source) return <any>source; // may have passed zero? undefined? or null?\r\n\treturn copyTo(\r\n\t\tsource,\r\n\t\tinitialize<T>(Math.min(length, Math.max(source.length - sourceIndex, 0))),\r\n\t\tsourceIndex, 0, length);\r\n}\r\n\r\nconst\r\n\tCBN = 'Cannot be null.',\r\n\tCBL0 = 'Cannot be less than zero.';\r\n\r\n/**\r\n * Copies one array to another.\r\n * @param source\r\n * @param destination\r\n * @param sourceIndex\r\n * @param destinationIndex\r\n * @param length An optional limit to stop copying.\r\n * @returns The destination array.\r\n */\r\nexport function copyTo<T,TDestination extends IArray<any>>(\r\n\tsource:IArray<T>,\r\n\tdestination:TDestination,\r\n\tsourceIndex:number = 0,\r\n\tdestinationIndex:number = 0,\r\n\tlength:number = Infinity):TDestination\r\n{\r\n\tif(!source)\r\n\t\tthrow new ArgumentNullException('source', CBN);\r\n\r\n\tif(!destination)\r\n\t\tthrow new ArgumentNullException('destination', CBN);\r\n\r\n\tif(sourceIndex<0)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, CBL0);\r\n\r\n\tvar sourceLength = source.length;\r\n\tif(sourceIndex>=sourceLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\r\n\r\n\tif(destination.length<0)\r\n\t\tthrow new ArgumentOutOfRangeException('destinationIndex', destinationIndex, CBL0);\r\n\r\n\tvar maxLength = source.length - sourceIndex;\r\n\tif(isFinite(length) && length>maxLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\r\n\r\n\tlength = Math.min(length, maxLength);\r\n\r\n\tfor(let i = 0; i<length; ++i)\r\n\t{\r\n\t\tdestination[destinationIndex + i] = source[sourceIndex + i];\r\n\t}\r\n\r\n\treturn destination;\r\n}\r\n\r\n/**\r\n * Checks to see if the provided array contains an item.\r\n * If the array value is null, then false is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function contains<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\tif(array && array.length)\r\n\t{\r\n\r\n\t\tif(Array.isArray(array)) return array.indexOf(item)!= -1;\r\n\r\n\t\tfor(let i = 0; i<array.length; ++i)\r\n\t\t{\r\n\t\t\t// 'areEqual' includes NaN==NaN evaluation.\r\n\t\t\tif(equalityComparer(array[i], item))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Finds and replaces a value from an array.  Will replaces all instances unless a maximum is specified.\r\n * @param array\r\n * @param old\r\n * @param newValue\r\n * @param max\r\n * @returns {number}\r\n */\r\nexport function replace<T>(\r\n\tarray:IArray<T>,\r\n\told:T,\r\n\tnewValue:T,\r\n\tmax?:number):number\r\n{\r\n\r\n\tvar count = 0;\r\n\tif(max!==0)\r\n\t{\r\n\t\tif(!max)\r\n\t\t\tmax = Infinity;\r\n\t\telse if(max<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException('max', max, CBL0);\r\n\r\n\t\tfor(let i = (array.length - 1); i>=0; --i)\r\n\t\t{\r\n\t\t\tif(array[i]===old)\r\n\t\t\t{\r\n\t\t\t\tarray[i] = newValue;\r\n\t\t\t\t++count;\r\n\t\t\t\tif(!--max)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n\r\n}\r\n\r\n/**\r\n * Replaces values of an array across a range of indexes.\r\n * @param array\r\n * @param value\r\n * @param index\r\n * @param length\r\n */\r\nexport function updateRange<T>(\r\n\tarray:T[],\r\n\tvalue:T,\r\n\tindex:number,\r\n\tlength:number):void\r\n{\r\n\tInteger.assert(index, 'index');\r\n\tInteger.assert(index, 'length');\r\n\r\n\tvar end = index + length;\r\n\tfor(let i:number = index; i<end; ++i)\r\n\t{\r\n\t\tarray[i] = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Clears (sets to null) values of an array across a range of indexes.\r\n * @param array\r\n * @param index\r\n * @param length\r\n */\r\nexport function clear(\r\n\tarray:any[],\r\n\tindex:number,\r\n\tlength:number):void\r\n{\r\n\tupdateRange(array, null, index, length);\r\n}\r\n\r\n/**\r\n * Ensures a value exists within an array.  If not found, adds to the end.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function register<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tvar len = array.length; // avoid querying .length more than once. *\r\n\tvar ok = !len || !contains(array, item, equalityComparer);\r\n\tif(ok) array[len] = item; // * push would query length again.\r\n\treturn ok;\r\n}\r\n\r\n/**\r\n * Returns the first index of which the provided predicate returns true.\r\n * Returns -1 if always false.\r\n * @param array\r\n * @param predicate\r\n * @returns {number}\r\n */\r\nexport function findIndex<T>(array:IArray<T>, predicate:Predicate<T>):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tif(!Type.isFunction(predicate))\r\n\t\tthrow new ArgumentException('predicate', 'Must be a function.');\r\n\tvar len = array.length;\r\n\tfor(let i = 0; i<len; ++i)\r\n\t{\r\n\t\tif((i)in(array) && predicate(array[i]))\r\n\t\t\treturn i;\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n\r\n/**\r\n * Allows for using \"false\" to cause forEach to break.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param source\r\n * @param fn\r\n * @returns {IArray<T>}\r\n */\r\nexport function forEach<T>(\r\n\tsource:IArray<T>,\r\n\tfn:(value:T, index?:number) => (void|boolean)):IArray<T>\r\n{\r\n\tif(!source)\r\n\t\tthrow new ArgumentNullException('source', CBN);\r\n\r\n\tif(fn)\r\n\t{\r\n\t\tfor(let i = 0; i<source.length; ++i)\r\n\t\t{\r\n\t\t\tif(fn(source[i])===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn source;\r\n}\r\n\r\n\r\n/**\r\n * Is similar to Array.map() but instead of returning a new array, it updates the existing indexes.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param target\r\n * @param fn\r\n * @returns {IArray<T>}\r\n */\r\nexport function applyTo<T>(target:IArray<T>, fn:(a:T) => T):IArray<T>\r\n{\r\n\tif(!target)\r\n\t\tthrow new ArgumentNullException('target', CBN);\r\n\r\n\tif(fn)\r\n\t{\r\n\t\tfor(let i = 0; i<target.length; ++i)\r\n\t\t{\r\n\t\t\ttarget[i] = fn(target[i]);\r\n\t\t}\r\n\t}\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Removes an entry at a specified index.\r\n * @param array\r\n * @param index\r\n * @returns {boolean} True if the value was able to be removed.\r\n */\r\nexport function removeIndex<T>(array:T[], index:number):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\r\n\tInteger.assert(index, 'index');\r\n\tif(index<0) throw new ArgumentOutOfRangeException('index', index, CBL0);\r\n\r\n\r\n\tvar exists = index<array.length;\r\n\tif(exists)\r\n\t\tarray.splice(index, 1);\r\n\treturn exists;\r\n}\r\n\r\n/**\r\n * Finds and removes a value from an array.  Will remove all instances unless a maximum is specified.\r\n * @param array\r\n * @param value\r\n * @param max\r\n * @param {function?} equalityComparer\r\n * @returns {number} The number of times the value was found and removed.\r\n */\r\nexport function remove<T>(\r\n\tarray:T[], value:T, max?:number,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\r\n\tvar count = 0;\r\n\tif(array && array.length && max!==0)\r\n\t{\r\n\t\tif(!max)\r\n\t\t\tmax = Infinity;\r\n\t\telse if(max<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException('max', max, CBL0);\r\n\r\n\t\tfor(let i = (array.length - 1); i>=0; --i)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t++count;\r\n\t\t\t\tif(!--max)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n}\r\n\r\n/**\r\n * Simply repeats a value the number of times specified.\r\n * @param element\r\n * @param count\r\n * @returns {T[]}\r\n */\r\nexport function repeat<T>(element:T, count:number):T[]\r\n{\r\n\tInteger.assert(count, 'count');\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tvar result:T[] = [];\r\n\twhile(count--)\r\n\t{\r\n\t\tresult.push(element);\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Takes any arrays within an array and inserts the values contained within in place of that array.\r\n * For every count higher than 0 in recurseDepth it will attempt an additional pass.  Passing Infinity will flatten all arrays contained.\r\n * @param a\r\n * @param recurseDepth\r\n * @returns {any[]}\r\n */\r\nexport function flatten(a:any[], recurseDepth:number = 0):any[]\r\n{\r\n\tvar result:any[] = [];\r\n\tfor(var i = 0; i<a.length; i++)\r\n\t{\r\n\t\tvar x = a[i];\r\n\t\tif(Array.isArray(x))\r\n\t\t{\r\n\t\t\tif(recurseDepth>0) x = flatten(x, recurseDepth - 1);\r\n\t\t\tfor(var n = 0; n<x.length; n++) result.push(x[n]);\r\n\t\t}\r\n\t\telse result.push(x);\r\n\t}\r\n\treturn result;\r\n}\r\n\r\ninterface DispatchErrorHandler\r\n{\r\n\t(ex?:any, i?:number):void;\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n *\r\n * While dispatching:\r\n * * This is an unsafe method if by chance any of the listeners modify the array.\r\n * * It cannot prevent changes to the payload.\r\n *\r\n * Improving safety:\r\n * * Only use a local array that isn't exposed to the listeners.\r\n * * Use the dispatch method instead as it makes a copy of the listeners array.\r\n * * Freeze the listeners array so it can't be modified.\r\n * * Freeze the payload.\r\n *\r\n * Specifying trap will catch any errors and pass them along if trap is a function.\r\n * A payload is used instead of arguments for easy typing.\r\n *\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n */\r\nexport function dispatchUnsafe<T>(\r\n\tlisteners:IArray<(payload:T)=>any>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):void\r\n{\r\n\tif(listeners && listeners.length)\r\n\t{\r\n\t\tfor(let i = 0, len = listeners.length; i<len; i++)\r\n\t\t{\r\n\t\t\tlet fn:Function = listeners[i];\r\n\t\t\tif(!fn) continue; // Ignore null refs.\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tfn(payload);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tif(!trap)\r\n\t\t\t\t\tthrow ex;\r\n\t\t\t\telse if(Type.isFunction(trap))\r\n\t\t\t\t\ttrap(ex, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n * Makes a copy of the listeners before calling dispatchUnsafe.\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n */\r\nexport function dispatch<T>(\r\n\tlisteners:IArray<(payload:T)=>any>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):void\r\n{\r\n\tdispatchUnsafe(copy(listeners), payload, trap);\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n * Returns the results in an array that matches the indexes of the listeners.\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n * @returns {any}\r\n */\r\nexport function dispatchMapped<T,TResult>(\r\n\tlisteners:IArray<(payload:T)=>TResult>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):TResult[]\r\n{\r\n\r\n\tif(!listeners) return null;\r\n\t// Reuse the copy as the array result.\r\n\tvar result:any[] = copy(listeners);\r\n\tif(listeners.length)\r\n\t{\r\n\r\n\t\tfor(let i = 0, len = result.length; i<len; i++)\r\n\t\t{\r\n\t\t\tlet fn:Function = result[i];\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tresult[i] = fn // Ignore null refs.\r\n\t\t\t\t\t? fn(payload)\r\n\t\t\t\t\t: undefined;\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult[i] = undefined;\r\n\t\t\t\tif(!trap)\r\n\t\t\t\t\tthrow ex;\r\n\t\t\t\telse if(Type.isFunction(trap))\r\n\t\t\t\t\ttrap(ex, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}"]}