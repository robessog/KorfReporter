{"version":3,"sources":["System/Collections/Enumeration/Enumerator.ts"],"names":[],"mappings":";;;;AASA;;;;;;AAEA,IAAA,UAAA,QAAiB,aAAjB,CAAA;AAEA,IAAA,oBAAA,QAA4B,mBAA5B,CAAA;AACA,IAAA,oBAAA,QAA4B,mBAA5B,CAAA;;IAGA;;;;;;;mCAOS;AAEP,mBAAO,KAAP,CAFO;;;;gCAKH;;;kCAEE;;;4BAZI;AAEV,mBAAO,SAAP,CAFU;;;;WAFZ;;;AAiBA,IAAM,QAAQ,IAAI,eAAJ,EAAR;AAGN,SAAA,IAAA,CAAwB,MAAxB,EAAyD;AAGxD,QAAG,CAAC,MAAD,EACF,OAAO,KAAP,CADD;AAGA,QAAG,MAAM,OAAN,CAAc,MAAd,CAAH,EACC,OAAO,IAAI,kBAAA,OAAA,CAAwB,MAA5B,CAAP,CADD;AAIA,QAAG,CAAC,QAAA,OAAA,CAAK,WAAL,CAAiB,MAAjB,CAAD,EACH;AACC,YAAG,QAAA,OAAA,CAAK,WAAL,CAAoB,MAApB,CAAH,EACA;AACC,mBAAO,IAAI,kBAAA,OAAA,CACV,YAAA;AAEC,uBAAO;AACN,4BAAQ,MAAR;AACA,4BAAQ,OAAO,MAAP;AACR,6BAAS,CAAT;AACA,0BAAM,CAAN;iBAJD,CAFD;aAAA,CADD,CADD;SADA;AAcA,YAAG,aAAgB,MAAhB,CAAH,EACC,OAAO,OAAO,aAAP,EAAP,CADD;KAhBD;AAqBA,UAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN,CA/BwD;CAAzD;AAAgB,QAAA,IAAA,GAAI,IAAJ;AAkChB,SAAA,YAAA,CAAgC,QAAhC,EAA4C;AAE3C,WAAO,QAAA,OAAA,CAAK,eAAL,CAAqC,QAArC,EAA+C,eAA/C,EAAgE,QAAA,OAAA,CAAK,QAAL,CAAvE,CAF2C;CAA5C;AAAgB,QAAA,YAAA,GAAY,YAAZ;AAKhB,SAAA,YAAA,CAAgC,QAAhC,EAA4C;AAE3C,WAAO,QAAA,OAAA,CAAK,eAAL,CAAqC,QAArC,EAA+C,UAA/C,EAA2D,QAAA,OAAA,CAAK,QAAL,CAAlE,CAF2C;CAA5C;AAAgB,QAAA,YAAA,GAAY,YAAZ;AAKhB,SAAA,OAAA,CACC,CADD,EAEC,MAFD,EAEyC;AAExC,QAAG,CAAH,EACA;AACC,YAAG,MAAM,OAAN,CAAc,CAAd,CAAH,EACA;AACC,cAAE,OAAF,CAAU,MAAV,EADD;AAEC,mBAFD;SADA;AAMA,YAAG,aAAgB,CAAhB,CAAH,EACA;AACC,gBAAqB,EAAG,aAAH,EAArB,CADD;SADA;AAKA,YAAG,aAAgB,CAAhB,CAAH,EACA;AACC,gBAAI,QAAQ,CAAR,CADL;AAGC,mBAAM,EAAE,QAAF,EAAN,EACA;AACC,oBAAG,OAAO,EAAE,OAAF,EAAW,OAAlB,MAA6B,KAA7B,EACF,MADD;aAFD;SAJD;KAbD;CAJD;AAAgB,QAAA,OAAA,GAAO,OAAP","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"IEnumerable.d.ts\"/>\r\n///<reference path=\"IEnumerator.d.ts\"/>\r\n///<reference path=\"IYield.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../../Types';\r\nimport DisposableBase from '../../Disposable/DisposableBase';\r\nimport ArrayEnumerator from './ArrayEnumerator';\r\nimport IndexEnumerator from './IndexEnumerator';\r\n\r\n\r\nclass EmptyEnumerator implements IEnumerator<any>\r\n{\r\n\tget current():any\r\n\t{\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\treset():void { }\r\n\r\n\tdispose():void { }\r\n}\r\n\r\nconst Empty = new EmptyEnumerator();\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerable<T> | IArray<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(source))\r\n\t\t{\r\n\t\t\treturn new IndexEnumerator<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsource: source,\r\n\t\t\t\t\t\tlength: source.length,\r\n\t\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\t\tstep: 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t\tif(isEnumerable<T>(source))\r\n\t\t\treturn source.getEnumerator();\r\n\r\n\t}\r\n\r\n\tthrow new Error(\"Unknown enumerable.\");\r\n}\r\n\r\nexport function isEnumerable<T>(instance:any):instance is IEnumerable<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerable<T>>(instance, \"getEnumerator\", Type.FUNCTION);\r\n}\r\n\r\nexport function isEnumerator<T>(instance:any):instance is IEnumerator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerator<T>>(instance, \"moveNext\", Type.FUNCTION);\r\n}\r\n\r\nexport function forEach<T>(\r\n\te:T[]|IEnumerator<T>|IEnumerable<T>,\r\n\taction:(element:T, index?:number) => any):void\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tif(Array.isArray(e))\r\n\t\t{\r\n\t\t\te.forEach(action);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(isEnumerable<T>(e))\r\n\t\t{\r\n\t\t\te = (<IEnumerable<T>>e).getEnumerator();\r\n\t\t}\r\n\r\n\t\tif(isEnumerator<T>(e))\r\n\t\t{\r\n\t\t\tvar index = 0;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(e.moveNext())\r\n\t\t\t{\r\n\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]}