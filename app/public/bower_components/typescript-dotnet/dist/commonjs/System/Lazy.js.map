{"version":3,"sources":["System/Lazy.ts","System/Lazy.js"],"names":[],"mappings":";;;;AAOA;;;;;;;;;;AAEA,IAAA,mBAAA,QAA2B,6BAA3B,CAAA;;IAEA;;;AAOC,aAPD,IAOC,CAAoB,QAApB,EAAoC;8BAPrC,MAOqC;;2EAPrC,kBAOqC;;AAAhB,cAAA,QAAA,GAAA,QAAA,CAAgB;AAGnC,cAAK,qBAAL,GAA6B,MAA7B,CAHmC;;KAApC;;iBAPD;;8BAyBO,oBAA2B;AAChC,gBAAI,IAAI,IAAJ,CAD4B;AAGhC,gBAAG,kBAAH,EACC,EAAE,eAAF,GADD;AAGA,gBAAG,CAAC,EAAE,QAAF,EAAY;AACf,oBAAG,kBAAH,EACC,MAAM,IAAI,KAAJ,CAAU,iEAAV,CAAN,CADD;AAEA,uBAAO,KAAP,CAHe;aAAhB,MAKK;AACJ,kBAAE,eAAF,GAAoB,KAApB,CADI;AAEJ,kBAAE,MAAF,GAAW,IAAX,CAFI;AAGJ,uBAAO,IAAP,CAHI;aALL;;;;iCAiBQ,uBAA8B;AAEtC,gBAAI,IAAI,IAAJ,CAFkC;AAItC,cAAE,eAAF,GAJsC;AAMtC,gBAAI;AACH,oBAAG,CAAC,EAAE,eAAF,IAAqB,EAAE,QAAF,EAAY;AACpC,wBAAI,IAAI,EAAE,QAAF,EAAJ,CADgC;AAEpC,sBAAE,MAAF,GAAW,CAAX,CAFoC;AAGpC,sBAAE,eAAF,GAAoB,IAApB,CAHoC;AAIpC,2BAAO,CAAP,CAJoC;iBAArC;aADD,SAQQ;AACP,oBAAG,qBAAH,EACC,EAAE,QAAF,GAAa,IAAb,CADD;aATD;AAaA,mBAAO,EAAE,MAAF,CAnB+B;;;;qCAwBnB;AACnB,iBAAK,QAAL,GAAgB,IAAhB,CADmB;AAEnB,iBAAK,MAAL,GAAc,IAAd,CAFmB;;;;+BAKb,OAAa;AAEnB,mBAAO,QAAM,KAAN,CAFY;;;;oCAKR,OAAa;AAExB,mBAAO,KAAK,MAAL,CAAY,KAAZ,KAAsB,KAAK,KAAL,KAAa,MAAM,KAAN,CAFlB;;;;4BArEP;AAEjB,mBAAO,KAAK,eAAL,CAFU;;;;4BAMN;AAEX,mBAAO,CAAC,KAAK,WAAL,IAAoB,CAAC,CAAE,KAAK,QAAL,CAFpB;;;;4BAwBH;AAER,mBAAO,KAAK,QAAL,EAAP,CAFQ;;;;WA3CV;EACsB,iBAAA,OAAA;;AADtB,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ACsDA,QAAQ,OAAR,GAAkB,IAAlB","file":"System/Lazy.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ILazy.d.ts\"/>\r\n///<reference path=\"FunctionTypes.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport DisposableBase from './Disposable/DisposableBase';\r\n\r\nexport default\r\nclass Lazy<T> extends DisposableBase implements ILazy<T>\r\n{\r\n\r\n\tprivate _isValueCreated:boolean;\r\n\tprivate _value:T;\r\n\r\n\tconstructor(private _closure:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn this._isValueCreated;\r\n\t}\r\n\r\n\t// Adding a 'resettable' mechanism allows for simply resetting a lazy instead of re-instantiating a new one.\r\n\tget canReset():boolean\r\n\t{\r\n\t\treturn !this.wasDisposed && !!(this._closure);\r\n\t}\r\n\r\n\t// Returns true if successfully reset.\r\n\treset(throwIfCannotReset?:boolean):boolean {\r\n\t\tvar _ = this;\r\n\r\n\t\tif(throwIfCannotReset)\r\n\t\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!_._closure) {\r\n\t\t\tif(throwIfCannotReset)\r\n\t\t\t\tthrow new Error(\"Cannot reset.  This Lazy has already de-referenced its closure.\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_._isValueCreated = false;\r\n\t\t\t_._value = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tgetValue(clearClosureReference?:boolean):T {\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\ttry {\r\n\t\t\tif(!_._isValueCreated && _._closure) {\r\n\t\t\t\tvar v = _._closure();\r\n\t\t\t\t_._value = v;\r\n\t\t\t\t_._isValueCreated = true;\r\n\t\t\t\treturn v;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tif(clearClosureReference)\r\n\t\t\t\t_._closure = null;\r\n\t\t}\r\n\r\n\t\treturn _._value;\r\n\r\n\t}\r\n\r\n\r\n\tprotected _onDispose():void {\r\n\t\tthis._closure = null;\r\n\t\tthis._value = null;\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n}\r\n\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst DisposableBase_1 = require('./Disposable/DisposableBase');\nclass Lazy extends DisposableBase_1.default {\n    constructor(_closure) {\n        super();\n        this._closure = _closure;\n        this._disposableObjectName = 'Lazy';\n    }\n    get isValueCreated() {\n        return this._isValueCreated;\n    }\n    get canReset() {\n        return !this.wasDisposed && !!(this._closure);\n    }\n    reset(throwIfCannotReset) {\n        var _ = this;\n        if (throwIfCannotReset)\n            _.throwIfDisposed();\n        if (!_._closure) {\n            if (throwIfCannotReset)\n                throw new Error(\"Cannot reset.  This Lazy has already de-referenced its closure.\");\n            return false;\n        }\n        else {\n            _._isValueCreated = false;\n            _._value = null;\n            return true;\n        }\n    }\n    get value() {\n        return this.getValue();\n    }\n    getValue(clearClosureReference) {\n        var _ = this;\n        _.throwIfDisposed();\n        try {\n            if (!_._isValueCreated && _._closure) {\n                var v = _._closure();\n                _._value = v;\n                _._isValueCreated = true;\n                return v;\n            }\n        }\n        finally {\n            if (clearClosureReference)\n                _._closure = null;\n        }\n        return _._value;\n    }\n    _onDispose() {\n        this._closure = null;\n        this._value = null;\n    }\n    equals(other) {\n        return this == other;\n    }\n    valueEquals(other) {\n        return this.equals(other) || this.value === other.value;\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Lazy;\n"]}