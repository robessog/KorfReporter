{"version":3,"sources":["System/Disposable/Utility.ts"],"names":[],"mappings":";;;;AAOA;;AAEA,IAAA,UAAA,QAAiB,UAAjB,CAAA;AAQA,SAAA,OAAA,GAAoD;sCAAzB;;KAAyB;;AAGnD,yBAAqB,WAArB,EAAkC,KAAlC,EAHmD;CAApD;AAAgB,QAAA,OAAA,GAAO,OAAP;AAahB,SAAA,uBAAA,GAAoE;uCAAzB;;KAAyB;;AAGnE,WAAO,qBAAqB,WAArB,EAAkC,IAAlC,CAAP,CAHmE;CAApE;AAAgB,QAAA,uBAAA,GAAuB,uBAAvB;AAYhB,SAAA,YAAA,CAA6B,WAA7B,EAAwD,cAAxD,EAA+E;AAE9E,WAAO,eAAe,YAAY,MAAZ,GACnB,qBAAqB,YAAY,KAAZ,EAArB,EAA0C,cAA1C,CADI,GAEJ,IAFI,CAFuE;CAA/E;AAAgB,QAAA,YAAA,GAAY,YAAZ;AAsBhB,SAAA,KAAA,CACC,UADD,EAEC,OAFD,EAE4C;AAE3C,QACA;AACC,eAAO,QAAQ,UAAR,CAAP,CADD;KADA,SAKA;AACC,sBAAc,UAAd,EAA0B,KAA1B,EADD;KALA;CAJD;AAAgB,QAAA,KAAA,GAAK,KAAL;AAmBhB,SAAA,aAAA,CACC,UADD,EAEC,cAFD,EAEuB;AAEtB,QAAG,QAAA,OAAA,CAAK,EAAL,CAAQ,UAAR,EAAoB,MAApB,CAA2B,SAA3B,EAAsC,UAAtC,EACH;AACC,YAAG,cAAH,EACA;AACC,gBACA;AACC,2BAAW,OAAX,GADD;aADA,CAIA,OAAM,EAAN,EACA;AACC,uBAAO,EAAP,CADD;aADA;SAND,MAYC,WAAW,OAAX,GAZD;KAFD;AAiBA,WAAO,IAAP,CAnBsB;CAFvB;AA2BA,SAAA,oBAAA,CACC,WADD,EAEC,cAFD,EAGiB;QAAhB,8DAAe,iBAAC;;AAEhB,QAAI,UAAJ,CAFgB;AAGhB,QAAI,MAAM,YAAY,MAAZ,CAHM;AAKhB,WAAM,QAAM,GAAN,EAAW,OAAjB,EACA;AACC,YAAI,OAAO,YAAY,KAAZ,CAAP,CADL;AAEC,YAAG,CAAC,IAAD,EAAO,SAAV;AACA,YAAG,cAAH,EACA;AACC,gBAAI,KAAK,cAAc,IAAd,EAAoB,IAApB,CAAL,CADL;AAEC,gBAAG,EAAH,EACA;AACC,oBAAG,CAAC,UAAD,EAAa,aAAa,EAAb,CAAhB;AACA,2BAAW,IAAX,CAAgB,EAAhB,EAFD;aADA;SAHD,MAUA;AACC,gBAAI,UAAU,KAAV,CADL;AAEC,gBACA;AACC,8BAAc,IAAd,EAAoB,KAApB,EADD;AAEC,0BAAU,IAAV,CAFD;aADA,SAOA;AACC,oBAAG,CAAC,OAAD,IAAY,QAAQ,CAAR,GAAU,GAAV,EACf;AAGC,yCAAqB,WAArB,EAAkC,KAAlC,EAAyC,QAAQ,CAAR,CAAzC,CAHD;iBADA;aARD;AAgBA,gBAAG,CAAC,OAAD,EAAU,MAAb;SA5BD;KAJD;AAoCA,WAAO,UAAP,CAzCgB;CAHjB","file":"System/Disposable/Utility.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IDisposable.d.ts\"/>\r\n///<reference path=\"../Collections/Array/IArray.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\n\r\n/**\r\n * Takes any number of disposables as arguments and attempts to dispose them.\r\n * Any exceptions thrown within a dispose are not trapped.\r\n * Use 'disposeWithoutException' to automatically trap exceptions.\r\n * @param disposables\r\n */\r\nexport function dispose(...disposables:IDisposable[]):void\r\n{\r\n\t// The disposables arguments array is effectively localized so it's safe.\r\n\tdisposeTheseInternal(disposables, false);\r\n}\r\n\r\n\r\n/**\r\n * Takes any number of disposables and traps any errors that occur when disposing.\r\n * Returns an array of the exceptions thrown.\r\n * @param disposables\r\n * @returns {any[]} Returns an array of exceptions that occurred, if there are any.\r\n */\r\nexport function disposeWithoutException(...disposables:IDisposable[]):any[]\r\n{\r\n\t// The disposables arguments array is effectively localized so it's safe.\r\n\treturn disposeTheseInternal(disposables, true);\r\n}\r\n\r\n/**\r\n * Takes an array of disposable objects and ensures they are disposed.\r\n * @param disposables\r\n * @param trapExceptions If true, prevents exceptions from being thrown when disposing.\r\n * @returns {any[]} If 'trapExceptions' is true, returns an array of exceptions that occurred, if there are any.\r\n */\r\nexport function disposeThese(disposables:IDisposable[], trapExceptions?:boolean):any[]\r\n{\r\n\treturn disposables && disposables.length\r\n\t\t? disposeTheseInternal(disposables.slice(), trapExceptions)\r\n\t\t: null;\r\n}\r\n\r\n/**\r\n * Just like in C# this 'using' function will ensure the passed disposable is disposed when the closure has finished.\r\n *\r\n * Usage:\r\n * ```typescript\r\n * using(new DisposableObject(),(myObj)=>{\r\n *   // do work with myObj\r\n * });\r\n * // myObj automatically has it's dispose method called.\r\n * ```\r\n *\r\n * @param disposable Object to be disposed.\r\n * @param closure Function call to execute.\r\n * @returns {TReturn} Returns whatever the closure's return value is.\r\n */\r\nexport function using<TDisposable extends IDisposable,TReturn>(\r\n\tdisposable:TDisposable,\r\n\tclosure:(disposable:TDisposable) => TReturn):TReturn\r\n{\r\n\ttry\r\n\t{\r\n\t\treturn closure(disposable);\r\n\t}\r\n\tfinally\r\n\t{\r\n\t\tdisposeSingle(disposable, false);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * This private function makes disposing more robust for when there's no type checking.\r\n * If trapExceptions is 'true' it catches and returns any exception instead of throwing.\r\n */\r\nfunction disposeSingle(\r\n\tdisposable:IDisposable,\r\n\ttrapExceptions:boolean):any\r\n{\r\n\tif(Type.of(disposable).member('dispose').isFunction)\r\n\t{\r\n\t\tif(trapExceptions)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tdisposable.dispose();\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\treturn ex;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tdisposable.dispose();\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * This dispose method assumes it's working on a local copy and is unsafe for external use.\r\n */\r\nfunction disposeTheseInternal(\r\n\tdisposables:IDisposable[],\r\n\ttrapExceptions:boolean,\r\n\tindex:number = 0):any[]\r\n{\r\n\tvar exceptions:any[];\r\n\tvar len = disposables.length;\r\n\r\n\tfor(; index<len; index++)\r\n\t{\r\n\t\tvar next = disposables[index];\r\n\t\tif(!next) continue;\r\n\t\tif(trapExceptions)\r\n\t\t{\r\n\t\t\tvar ex = disposeSingle(next, true);\r\n\t\t\tif(ex)\r\n\t\t\t{\r\n\t\t\t\tif(!exceptions) exceptions = [];\r\n\t\t\t\texceptions.push(ex);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tvar success = false;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tdisposeSingle(next, false);\r\n\t\t\t\tsuccess = true;\r\n\t\t\t}\r\n\t\t\t\t// Don't trap the exception in order to allow it to propagate the stack trace.\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(!success && index + 1<len)\r\n\t\t\t\t{\r\n\t\t\t\t\t/* If code is 'continued' by the debugger,\r\n\t\t\t\t\t * need to ensure the rest of the disposables are cared for. */\r\n\t\t\t\t\tdisposeTheseInternal(disposables, false, index + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Just in case...  Should never happen, but asserts the intention.\r\n\t\t\tif(!success) break;\r\n\t\t}\r\n\t}\r\n\r\n\treturn exceptions;\r\n}\r\n"]}