{"version":3,"sources":["System/Disposable/DisposableBase.ts","System/Disposable/DisposableBase.js"],"names":[],"mappings":";;;;AAMA;;;;;;AAEA,IAAA,4BAAA,QAAoC,2BAApC,CAAA;;IAEA;AAGC,aAHD,cAGC,CAAoB,UAApB,EAA0C;8BAH3C,gBAG2C;;AAAtB,aAAA,UAAA,GAAA,UAAA,CAAsB;AAIlC,aAAA,YAAA,GAAuB,KAAvB,CAJkC;KAA1C;;iBAHD;;wCAiBE,SAC8C;gBAA9C,mEAAoB,KAAK,qBAAL,gBAA0B;;AAE9C,gBAAG,KAAK,YAAL,EACF,MAAM,IAAI,0BAAA,OAAA,CAAwB,UAA5B,EAAwC,OAAxC,CAAN,CADD;AAEA,mBAAO,IAAP,CAJ8C;;;;kCAQxC;AAEN,gBAAI,IAAI,IAAJ,CAFE;AAGN,gBAAG,CAAC,EAAE,YAAF,EACJ;AAGC,kBAAE,YAAF,GAAiB,IAAjB,CAHD;AAIC,oBACA;AACC,sBAAE,UAAF,GADD;iBADA,SAKA;AACC,wBAAG,EAAE,UAAF,EACF,EAAE,UAAF,GADD;iBAND;aALD;;;;qCAkBmB;;;4BAvCL;AAEd,mBAAO,KAAK,YAAL,CAFO;;;;WARhB;;;AAmDA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;AC1BA,QAAQ,OAAR,GD0Be,cC1Bf","file":"System/Disposable/DisposableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IDisposableAware.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport ObjectDisposedException from './ObjectDisposedException';\r\n\r\nabstract class DisposableBase implements IDisposableAware\r\n{\r\n\r\n\tconstructor(private _finalizer?:() => void)\r\n\t{\r\n\t}\r\n\r\n\tprivate _wasDisposed:boolean = false;\r\n\tget wasDisposed():boolean\r\n\t{\r\n\t\treturn this._wasDisposed;\r\n\t}\r\n\r\n\t// Allow for simple override of name.\r\n\tprotected _disposableObjectName:string;\r\n\r\n\tprotected throwIfDisposed(\r\n\t\tmessage?:string,\r\n\t\tobjectName:string = this._disposableObjectName):boolean\r\n\t{\r\n\t\tif(this._wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._wasDisposed)\r\n\t\t{\r\n\t\t\t// Preemptively set wasDisposed in order to prevent repeated disposing.\r\n\t\t\t// NOTE: in true multi-threaded scenarios, this needs to be synchronized.\r\n\t\t\t_._wasDisposed = true;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onDispose(); // Protected override.\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(_._finalizer) // Private finalizer...\r\n\t\t\t\t\t_._finalizer();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Placeholder for overrides.\r\n\tprotected _onDispose():void { }\r\n\r\n}\r\n\r\nexport default DisposableBase;","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst ObjectDisposedException_1 = require('./ObjectDisposedException');\nclass DisposableBase {\n    constructor(_finalizer) {\n        this._finalizer = _finalizer;\n        this._wasDisposed = false;\n    }\n    get wasDisposed() {\n        return this._wasDisposed;\n    }\n    throwIfDisposed(message, objectName = this._disposableObjectName) {\n        if (this._wasDisposed)\n            throw new ObjectDisposedException_1.default(objectName, message);\n        return true;\n    }\n    dispose() {\n        var _ = this;\n        if (!_._wasDisposed) {\n            _._wasDisposed = true;\n            try {\n                _._onDispose();\n            }\n            finally {\n                if (_._finalizer)\n                    _._finalizer();\n            }\n        }\n    }\n    _onDispose() { }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = DisposableBase;\n"]}