{"version":3,"sources":["System/Validation/ValidationResult.ts","System/Validation/ValidationResult.js"],"names":[],"mappings":";;;;AAOA;;;;;;AAEA,IAAM,QAAQ,IAAI,gBAAJ,CAAqB,IAArB,CAAR;;IAKN;AAOC,aAPD,gBAOC,GAGuB;YAFf,gEAAkB,qBAEH;YADf,gEAAiB,oBACF;YAAf,6DAAW,oBAAI;;8BAVxB,kBAUwB;;AAFf,aAAA,OAAA,GAAA,OAAA,CAEe;AADf,aAAA,OAAA,GAAA,OAAA,CACe;AAAf,aAAA,IAAA,GAAA,IAAA,CAAe;AAItB,eAAO,MAAP,CAAc,IAAd,EAJsB;KAHvB;;iBAPD;;+BAoBQ,OAAuB;AAE7B,gBAAI,IAAI,IAAJ,CAFyB;AAG7B,mBAAO,EAAE,OAAF,KAAY,MAAM,OAAN,IACf,EAAE,OAAF,IAAW,EAAE,OAAF,IACX,EAAE,IAAF,IAAQ,EAAE,IAAF,CALiB;;;;gCAqB7B,SACe;gBAAf,6DAAW,oBAAI;;AAEf,mBAAO,IAAI,gBAAJ,CAAqB,KAArB,EAA4B,OAA5B,EAAqC,IAArC,CAAP,CAFe;;;;4BATA;AACf,mBAAO,KAAP,CADe;;;;WAjCjB;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ACaA,QAAQ,OAAR,GAAkB,gBAAlB","file":"System/Validation/ValidationResult.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/// <reference path=\"IValidationResult.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nconst valid = new ValidationResult(true);\r\n\r\n/**\r\n * A class for generating responses to validation.\r\n */\r\nexport default\r\nclass ValidationResult\r\nimplements IValidationResult, IEquatable<IValidationResult>\r\n{\r\n\t/**\r\n\t * Allows for rare cases that ValidationResult.valid and ValidationResult.invalid() don't cover.\r\n\t */\r\n\tconstructor(\r\n\t\tpublic isValid:boolean = false,\r\n\t\tpublic message:string = null,\r\n\t\tpublic data:any = null)\r\n\t{\r\n\r\n\t\t// Readonly...\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Allows for comparing another IValidationResult to see if they are equal.\r\n\t */\r\n\tequals(other:IValidationResult):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.isValid===other.isValid\r\n\t\t\t&& _.message==_.message\r\n\t\t\t&& _.data==_.data;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Represents a single/shared instance of a valid result.\r\n\t * Allows for returning this instance like you would return 'true'.\r\n\t */\r\n\tstatic get valid():IValidationResult {\r\n\t\treturn valid;\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for easily creating an invalid result.\r\n\t */\r\n\tstatic invalid(\r\n\t\tmessage:string,\r\n\t\tdata:any = null):IValidationResult\r\n\t{\r\n\t\treturn new ValidationResult(false, message, data);\r\n\t}\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst valid = new ValidationResult(true);\nclass ValidationResult {\n    constructor(isValid = false, message = null, data = null) {\n        this.isValid = isValid;\n        this.message = message;\n        this.data = data;\n        Object.freeze(this);\n    }\n    equals(other) {\n        var _ = this;\n        return _.isValid === other.isValid\n            && _.message == _.message\n            && _.data == _.data;\n    }\n    static get valid() {\n        return valid;\n    }\n    static invalid(message, data = null) {\n        return new ValidationResult(false, message, data);\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = ValidationResult;\n"]}