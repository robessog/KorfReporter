{"version":3,"sources":["System/Observable/SubscribableBase.js","System/Observable/SubscribableBase.ts"],"names":["define","require","exports","LinkedList_1","DisposeUtility","Subscription_1","SubscribableBase","this","__subscriptions","prototype","_getSubscribers","toArray","map","s","subscriber","_findEntryNode","node","first","value","next","subscribe","_","n","add","unsubscribe","remove","dispose","_unsubscribeAll","returnSubscribers","_s","u","o","clear","disposeThese","unsubscribeAll","Object","defineProperty"],"mappings":";;;;;;AAMAA,QAAQ,UAAW,UAAW,4BAA6B,wBAAyB,kBAAmB,SAAUC,EAASC,EAASC,EAAcC,EAAgBC,GCGjK,YAQA,IAAAC,GAAA,WAcC,QAAAA,KAECC,KAAKC,gBAAkB,GAAIL,GAAAA,WAkE7B,MA1EWG,GAAAG,UAAAC,gBAAV,WACC,MAAOH,MAAKC,gBACVG,UACAC,IAAI,SAAAC,GAAG,MAAAA,GAAEC,cAQJR,EAAAG,UAAAM,eAAR,SACCD,GAGA,IADA,GAAIE,GAAOT,KAAKC,gBAAgBS,MAC1BD,GAEFA,EAAKE,MAAMJ,aAAaA,GAM1BE,EAAOA,EAAKG,IAId,OAAOH,IAIRV,EAAAG,UAAAW,UAAA,SAAUN,GAET,GAAIO,GAAId,KACJe,EAAID,EAAEN,eAAeD,EACzB,IAAGQ,EACF,MAAOA,GAAEJ,KAEV,IAAIL,GAAI,GAAIR,GAAAA,WAAagB,EAAGP,EAG5B,OAFAO,GAAEb,gBAAgBe,IAAIV,GAEfA,GAGRP,EAAAG,UAAAe,YAAA,SAAYV,GAEX,GAAIQ,GAAIf,KAAKQ,eAAeD,EAC5B,IAAGQ,EACH,CACC,GAAIT,GAAIS,EAAEJ,KACVI,GAAEG,SACFZ,EAAEa,YAIMpB,EAAAG,UAAAkB,gBAAV,SAA0BC,GAAA,SAAAA,IAAAA,GAAA,EACzB,IAAIP,GAAId,KAAMsB,EAAKR,EAAEb,gBACjBK,EAAIgB,EAAGlB,UACPmB,EAAIF,EAAoBf,EAAED,IAAI,SAAAmB,GAAG,MAAAA,GAAEjB,aAAc,IAKrD,OAJAe,GAAGG,QAEH5B,EAAe6B,aAAapB,GAErBiB,GAGRxB,EAAAG,UAAAyB,eAAA,WACC3B,KAAKoB,mBAGNrB,EAAAG,UAAAiB,QAAA,WACCnB,KAAKoB,mBAGPrB,IAlFA6B,QAAAC,eAAAlC,EAAA,cAAAgB,OAAA,ID+CIhB,EAAAA,WAAkBI","file":"System/Observable/SubscribableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\ndefine([\"require\", \"exports\", '../Collections/LinkedList', '../Disposable/Utility', './Subscription'], function (require, exports, LinkedList_1, DisposeUtility, Subscription_1) {\n    'use strict';\n    var SubscribableBase = (function () {\n        function SubscribableBase() {\n            this.__subscriptions = new LinkedList_1.default();\n        }\n        SubscribableBase.prototype._getSubscribers = function () {\n            return this.__subscriptions\n                .toArray()\n                .map(function (s) { return s.subscriber; });\n        };\n        SubscribableBase.prototype._findEntryNode = function (subscriber) {\n            var node = this.__subscriptions.first;\n            while (node) {\n                if (node.value.subscriber === subscriber) {\n                    break;\n                }\n                else {\n                    node = node.next;\n                }\n            }\n            return node;\n        };\n        SubscribableBase.prototype.subscribe = function (subscriber) {\n            var _ = this;\n            var n = _._findEntryNode(subscriber);\n            if (n)\n                return n.value;\n            var s = new Subscription_1.default(_, subscriber);\n            _.__subscriptions.add(s);\n            return s;\n        };\n        SubscribableBase.prototype.unsubscribe = function (subscriber) {\n            var n = this._findEntryNode(subscriber);\n            if (n) {\n                var s = n.value;\n                n.remove();\n                s.dispose();\n            }\n        };\n        SubscribableBase.prototype._unsubscribeAll = function (returnSubscribers) {\n            if (returnSubscribers === void 0) { returnSubscribers = false; }\n            var _ = this, _s = _.__subscriptions;\n            var s = _s.toArray();\n            var u = returnSubscribers ? s.map(function (o) { return o.subscriber; }) : null;\n            _s.clear();\n            DisposeUtility.disposeThese(s);\n            return u;\n        };\n        SubscribableBase.prototype.unsubscribeAll = function () {\n            this._unsubscribeAll();\n        };\n        SubscribableBase.prototype.dispose = function () {\n            this._unsubscribeAll();\n        };\n        return SubscribableBase;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = SubscribableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"../FunctionTypes.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport LinkedList from '../Collections/LinkedList';\r\nimport * as DisposeUtility from '../Disposable/Utility'\r\nimport Subscription from './Subscription';\r\n\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\n\r\nexport default\r\nclass SubscribableBase<TSubscriber>\r\nimplements IDisposable\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedList<Subscription<TSubscriber>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[] {\r\n\t\treturn this.__subscriptions\r\n\t\t\t.toArray()\r\n\t\t\t.map(s=>s.subscriber);\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.__subscriptions = new LinkedList<Subscription<TSubscriber>>();\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedListNode<Subscription<TSubscriber>>\r\n\t{\r\n\t\tvar node = this.__subscriptions.first;\r\n\t\twhile(node)\r\n\t\t{\r\n\t\t\tif(node.value.subscriber===subscriber)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnode = node.next;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn n.value;\r\n\r\n\t\tvar s = new Subscription(_, subscriber);\r\n\t\t_.__subscriptions.add(s);\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tvar n = this._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tvar s = n.value;\r\n\t\t\tn.remove();\r\n\t\t\ts.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[] {\r\n\t\tvar _ = this, _s = _.__subscriptions;\r\n\t\tvar s = _s.toArray();\r\n\t\tvar u = returnSubscribers ? s.map(o=>o.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tDisposeUtility.disposeThese(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void {\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tdispose() {\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n}\r\n"]}