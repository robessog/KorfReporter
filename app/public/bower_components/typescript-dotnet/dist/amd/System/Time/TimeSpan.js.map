{"version":3,"sources":["System/Time/TimeSpan.js","System/Time/TimeSpan.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Types_1","TimeUnit_1","ClockTime_1","TimeQuantity_1","TimeSpan","_super","value","units","Milliseconds","ms","toMilliseconds","call","_","ticks","milliseconds","seconds","minutes","hours","days","defineProperty","get","enumerable","configurable","t","_time","getTotalMilliseconds","add","other","isNumber","Error","total","addUnit","from","fromDays","Days","fromHours","Hours","fromMinutes","Minutes","fromSeconds","Seconds","fromMilliseconds","fromTicks","Ticks","timeSpanZero"],"mappings":";;;;;AAKA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,WAAY,aAAc,cAAe,kBAAmB,SAAUC,EAASC,EAASC,EAASC,EAAYC,EAAaC,GCAxJ,YAWA,IAAAC,GAAA,SAAAC,GAYC,QAAAD,GAAYE,EAAcC,GAAA,SAAAA,IAAAA,EAAiBN,EAAAA,WAASO,aAEnD,IAAIC,GAAKR,EAAAA,WAASS,eAAeJ,EAAOC,EACxCF,GAAAM,KAAAxB,KAAMsB,EAEN,IAAIG,GAAIzB,IACRyB,GAAEC,MAAW,IAAHJ,EACVG,EAAEE,aAAeL,EACjBG,EAAEG,QAAUN,EAAG,IACfG,EAAEI,QAAUP,EAAG,IACfG,EAAEK,MAAQR,EAAG,KACbG,EAAEM,KAAOT,EAAG,MA8Ed,MApGuBvB,WAAAkB,EAAAC,GA6BtBV,OAAAwB,eAAIf,EAAAV,UAAA,SDxBO0B,ICwBX,WAEC,MAAOjC,ODvBGkC,YAAY,EACZC,cAAc,IC2BzB3B,OAAAwB,eAAIf,EAAAV,UAAA,QDxBO0B,ICwBX,WAEC,GAAIR,GAAIzB,KAAMoC,EAAIX,EAAEY,KAEpB,OADID,KAAGX,EAAEY,MAAQD,EAAI,GAAIrB,GAAAA,WAAUU,EAAEa,yBAC9BF,GDtBGF,YAAY,EACZC,cAAc,ICwBzBlB,EAAAV,UAAAgC,IAAA,SAAIC,GAEH,GAAG3B,EAAAA,WAAK4B,SAASD,GAChB,KAAM,IAAIE,OACT,yKAIF,OAAO,IAAIzB,GAASjB,KAAKsC,uBAAyBE,EAAMG,MAAMhB,eAG/DV,EAAAV,UAAAqC,QAAA,SAAQzB,EAAcC,GAErB,MAFqB,UAAAA,IAAAA,EAAiBN,EAAAA,WAASO,cAExC,GAAIJ,GAASjB,KAAKsC,uBAAyBxB,EAAAA,WAASS,eAAeJ,EAAOC,KAI3EH,EAAA4B,KAAP,SAAY1B,EAAcC,GAEzB,MAAO,IAAIH,GAASE,EAAOC,IAGrBH,EAAA6B,SAAP,SAAgB3B,GAEf,MAAO,IAAIF,GAASE,EAAOL,EAAAA,WAASiC,OAG9B9B,EAAA+B,UAAP,SAAiB7B,GAEhB,MAAO,IAAIF,GAASE,EAAOL,EAAAA,WAASmC,QAG9BhC,EAAAiC,YAAP,SAAmB/B,GAElB,MAAO,IAAIF,GAASE,EAAOL,EAAAA,WAASqC,UAG9BlC,EAAAmC,YAAP,SAAmBjC,GAElB,MAAO,IAAIF,GAASE,EAAOL,EAAAA,WAASuC,UAG9BpC,EAAAqC,iBAAP,SAAwBnC,GAEvB,MAAO,IAAIF,GAASE,EAAOL,EAAAA,WAASO,eAG9BJ,EAAAsC,UAAP,SAAiBpC,GAEhB,MAAO,IAAIF,GAASE,EAAOL,EAAAA,WAAS0C,QAIrChD,OAAAwB,eAAWf,EAAA,QD3CAgB,IC2CX,WAEC,MAAOwB,KAAiBA,EAAe,GAAIxC,GAAS,KD1C1CiB,YAAY,EACZC,cAAc,IC2C1BlB,GApGuBD,EAAAA,WADvBR,QAAAwB,eAAApB,EAAA,cAAAO,OAAA,ID+DIP,EAAAA,WAAkBK,CCyCtB,IAAIwC","file":"System/Time/TimeSpan.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Originally based upon .NET source but with many additions and improvements.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", '../Types', './TimeUnit', './ClockTime', './TimeQuantity'], function (require, exports, Types_1, TimeUnit_1, ClockTime_1, TimeQuantity_1) {\n    'use strict';\n    var TimeSpan = (function (_super) {\n        __extends(TimeSpan, _super);\n        function TimeSpan(value, units) {\n            if (units === void 0) { units = TimeUnit_1.default.Milliseconds; }\n            var ms = TimeUnit_1.default.toMilliseconds(value, units);\n            _super.call(this, ms);\n            var _ = this;\n            _.ticks = ms * 10000;\n            _.milliseconds = ms;\n            _.seconds = ms / 1000;\n            _.minutes = ms / 60000;\n            _.hours = ms / 3600000;\n            _.days = ms / 86400000;\n        }\n        Object.defineProperty(TimeSpan.prototype, \"total\", {\n            get: function () {\n                return this;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TimeSpan.prototype, \"time\", {\n            get: function () {\n                var _ = this, t = _._time;\n                if (!t)\n                    _._time = t = new ClockTime_1.default(_.getTotalMilliseconds());\n                return t;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeSpan.prototype.add = function (other) {\n            if (Types_1.default.isNumber(other))\n                throw new Error(\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\n                    \".add only supports quantifiable time values (ITimeTotal).\");\n            return new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\n        };\n        TimeSpan.prototype.addUnit = function (value, units) {\n            if (units === void 0) { units = TimeUnit_1.default.Milliseconds; }\n            return new TimeSpan(this.getTotalMilliseconds() + TimeUnit_1.default.toMilliseconds(value, units));\n        };\n        TimeSpan.from = function (value, units) {\n            return new TimeSpan(value, units);\n        };\n        TimeSpan.fromDays = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Days);\n        };\n        TimeSpan.fromHours = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Hours);\n        };\n        TimeSpan.fromMinutes = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Minutes);\n        };\n        TimeSpan.fromSeconds = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Seconds);\n        };\n        TimeSpan.fromMilliseconds = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Milliseconds);\n        };\n        TimeSpan.fromTicks = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Ticks);\n        };\n        Object.defineProperty(TimeSpan, \"zero\", {\n            get: function () {\n                return timeSpanZero || (timeSpanZero = new TimeSpan(0));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TimeSpan;\n    }(TimeQuantity_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeSpan;\n    var timeSpanZero;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual,compare} from '../Compare';\r\nimport Type from '../Types';\r\nimport TimeUnit from './TimeUnit';\r\nimport ClockTime from './ClockTime';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n/**\r\n * TimeSpan expands on TimeQuantity to provide an class that is similar to .NET's TimeSpan including many useful static methods.\r\n */\r\nexport default\r\nclass TimeSpan extends TimeQuantity implements ITimeMeasurement\r\n{\r\n\r\n\tticks: number;\r\n\tmilliseconds: number;\r\n\tseconds: number;\r\n\tminutes: number;\r\n\thours: number;\r\n\tdays: number;\r\n\r\n\t// In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\r\n\tconstructor(value:number, units:TimeUnit = TimeUnit.Milliseconds)\r\n\t{\r\n\t\tvar ms = TimeUnit.toMilliseconds(value, units);\r\n\t\tsuper(ms);\r\n\r\n\t\tvar _ = this;\r\n\t\t_.ticks = ms*HowMany.Ticks.Per.Millisecond;\r\n\t\t_.milliseconds = ms;\r\n\t\t_.seconds = ms/HowMany.Milliseconds.Per.Second;\r\n\t\t_.minutes = ms/HowMany.Milliseconds.Per.Minute;\r\n\t\t_.hours = ms/HowMany.Milliseconds.Per.Hour;\r\n\t\t_.days = ms/HowMany.Milliseconds.Per.Day;\r\n\t}\r\n\r\n\t/**\r\n\t * Provides an standard interface for acquiring the total time.\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\tget total():TimeSpan\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\t// Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\r\n\tget time():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t) _._time = t = new ClockTime(_.getTotalMilliseconds());\r\n\t\treturn t;\r\n\t}\r\n\r\n\tadd(other:ITimeQuantity):TimeSpan\r\n\t{\r\n\t\tif(Type.isNumber(other))\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\r\n\t\t\t\t\".add only supports quantifiable time values (ITimeTotal).\"\r\n\t\t\t);\r\n\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\r\n\t}\r\n\r\n\taddUnit(value:number, units:TimeUnit = TimeUnit.Milliseconds):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + TimeUnit.toMilliseconds(value, units));\r\n\t}\r\n\r\n\r\n\tstatic from(value:number, units:TimeUnit)\r\n\t{\r\n\t\treturn new TimeSpan(value, units);\r\n\t}\r\n\r\n\tstatic fromDays(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Days);\r\n\t}\r\n\r\n\tstatic fromHours(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Hours);\r\n\t}\r\n\r\n\tstatic fromMinutes(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Minutes);\r\n\t}\r\n\r\n\tstatic fromSeconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Seconds);\r\n\t}\r\n\r\n\tstatic fromMilliseconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Milliseconds);\r\n\t}\r\n\r\n\tstatic fromTicks(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Ticks);\r\n\t}\r\n\r\n\r\n\tstatic get zero():TimeSpan\r\n\t{\r\n\t\treturn timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n\t}\r\n}\r\n\r\n\r\nvar timeSpanZero:TimeSpan;\r\n"]}