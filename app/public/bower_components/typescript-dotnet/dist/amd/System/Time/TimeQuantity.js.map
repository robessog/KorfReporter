{"version":3,"sources":["System/Time/TimeQuantity.js","System/Time/TimeQuantity.ts"],"names":["define","require","exports","Compare_1","TimeUnit_1","TimeQuantity","_quantity","this","prototype","getTotalMilliseconds","Object","defineProperty","get","compare","enumerable","configurable","equals","other","areEqual","total","milliseconds","compareTo","t","_total","ms","freeze","ticks","seconds","minutes","hours","days","getTotal","units","fromMilliseconds","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,aAAc,cAAe,SAAUC,EAASC,EAASC,EAAWC,GCKlG,YAQA,IAAAC,GAAA,WAIC,QAAAA,GAAsBC,GAAV,SAAAA,IAAAA,EAAA,GAAUC,KAAAD,UAAAA,EA2EvB,MAtECD,GAAAG,UAAAC,qBAAA,WAEC,MAAOF,MAAKD,WAObI,OAAAC,eAAIN,EAAAG,UAAA,aDpBOI,ICoBX,WAEC,MAAOT,GAAAU,QAAQN,KAAKE,uBAAwB,IDnBlCK,YAAY,EACZC,cAAc,IC0BzBV,EAAAG,UAAAQ,OAAA,SAAOC,GAEN,MAAOd,GAAAe,SAASX,KAAKE,uBAAwBQ,GAASA,EAAME,OAASF,EAAME,MAAMC,eAQlFf,EAAAG,UAAAa,UAAA,SAAUJ,GAET,MAAOd,GAAAU,QAAQN,KAAKE,uBAAwBQ,GAASA,EAAME,OAASF,EAAME,MAAMC,eAWjFV,OAAAC,eAAIN,EAAAG,UAAA,SDxCOI,ICwCX,WAEC,GAAIU,GAAIf,KAAKgB,MACb,KAAID,EACJ,CACC,GAAIE,GAAKjB,KAAKE,sBAEdF,MAAKgB,OAASD,EAAsBZ,OAAOe,QAC1CC,MAAU,IAAHF,EACPJ,aAAcI,EACdG,QAASH,EAAG,IACZI,QAASJ,EAAG,IACZK,MAAOL,EAAG,KACVM,KAAMN,EAAG,QAGX,MAAOF,IDzCGR,YAAY,EACZC,cAAc,ICgDzBV,EAAAG,UAAAuB,SAAA,SAASC,GAER,MAAO5B,GAAAA,WAAS6B,iBAAiB1B,KAAKE,uBAAwBuB,IAEhE3B,IA/EAK,QAAAC,eAAAT,EAAA,cAAAgC,OAAA,IDmCIhC,EAAAA,WAAkBG","file":"System/Time/TimeQuantity.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", '../Compare', './TimeUnit'], function (require, exports, Compare_1, TimeUnit_1) {\n    'use strict';\n    var TimeQuantity = (function () {\n        function TimeQuantity(_quantity) {\n            if (_quantity === void 0) { _quantity = 0; }\n            this._quantity = _quantity;\n        }\n        TimeQuantity.prototype.getTotalMilliseconds = function () {\n            return this._quantity;\n        };\n        Object.defineProperty(TimeQuantity.prototype, \"direction\", {\n            get: function () {\n                return Compare_1.compare(this.getTotalMilliseconds(), 0);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeQuantity.prototype.equals = function (other) {\n            return Compare_1.areEqual(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\n        };\n        TimeQuantity.prototype.compareTo = function (other) {\n            return Compare_1.compare(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\n        };\n        Object.defineProperty(TimeQuantity.prototype, \"total\", {\n            get: function () {\n                var t = this._total;\n                if (!t) {\n                    var ms = this.getTotalMilliseconds();\n                    this._total = t = Object.freeze({\n                        ticks: ms * 10000,\n                        milliseconds: ms,\n                        seconds: ms / 1000,\n                        minutes: ms / 60000,\n                        hours: ms / 3600000,\n                        days: ms / 86400000,\n                    });\n                }\n                return t;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeQuantity.prototype.getTotal = function (units) {\n            return TimeUnit_1.default.fromMilliseconds(this.getTotalMilliseconds(), units);\n        };\n        return TimeQuantity;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeQuantity;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeQuantity.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual,compare} from '../Compare';\r\nimport TimeUnit from './TimeUnit';\r\n\r\n/**\r\n * This class provides a simple means for storing and calculating time quantities.\r\n */\r\nexport default\r\nclass TimeQuantity implements IEquatable<ITimeQuantity>, IComparable<ITimeQuantity>, ITimeQuantity\r\n{\r\n\r\n\tconstructor(protected _quantity:number = 0)\r\n\t{\r\n\t}\r\n\r\n\t// Provides an overridable mechanism for extending this class.\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\t/**\r\n\t * +1, 0, or -1 depending on the time direction.\r\n\t * @returns {number}\r\n\t */\r\n\tget direction():number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance and return true if the amount of time is the same.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:ITimeQuantity):boolean\r\n\t{\r\n\t\treturn areEqual(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance.\r\n\t * @param other\r\n\t * @returns {CompareResult}\r\n\t */\r\n\tcompareTo(other:ITimeQuantity):number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\r\n\t// Clear this value if sub-class values change.\r\n\tprotected _total:ITimeMeasurement;\r\n\r\n\t/**\r\n\t * Returns an object with all units exposed as totals.\r\n\t * @returns {ITimeMeasurement}\r\n\t */\r\n\tget total():ITimeMeasurement\r\n\t{\r\n\t\tvar t = this._total;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar ms = this.getTotalMilliseconds();\r\n\r\n\t\t\tthis._total = t = <ITimeMeasurement>Object.freeze({\r\n\t\t\t\tticks: ms*HowMany.Ticks.Per.Millisecond,\r\n\t\t\t\tmilliseconds: ms,\r\n\t\t\t\tseconds: ms/HowMany.Milliseconds.Per.Second,\r\n\t\t\t\tminutes: ms/HowMany.Milliseconds.Per.Minute,\r\n\t\t\t\thours: ms/HowMany.Milliseconds.Per.Hour,\r\n\t\t\t\tdays: ms/HowMany.Milliseconds.Per.Day,\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the total amount of time measured in the requested TimeUnit.\r\n\t * @param units\r\n\t * @returns {number}\r\n\t */\r\n\tgetTotal(units:TimeUnit):number\r\n\t{\r\n\t\treturn TimeUnit.fromMilliseconds(this.getTotalMilliseconds(), units);\r\n\t}\r\n}\r\n"]}