{"version":3,"sources":["System/Integer.js","System/Integer.ts"],"names":["define","require","exports","Types_1","ArgumentException_1","Integer","n","r","max","Math","random","assert","is","isNumber","argumentName","i","under","boundary","Object","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,UAAW,kCAAmC,SAAUC,EAASC,EAASC,EAASC,GAC7G,YCGJ,SAAAC,GAAiBC,GAEhB,MAAW,GAAJA,EAGR,GAAOD,IAAP,SAAOA,GAGN,QAAAE,GAAWC,GACV,MAAQC,MAAKC,SAASF,EAAO,EAc9B,QAAAE,GAAuBF,GAGtB,MADAG,GAAOH,EAAI,OACH,GAALA,EAAe,GAClBA,GAAOA,EAAM,EAAI,EAAI,GACdD,EAAEC,IAwBV,QAAAI,GAAmBN,GAElB,MAAOH,GAAAA,WAAKU,SAASP,GAAG,IAAUA,IAAQ,EAAJA,GAGvC,QAAAK,GAAuBL,EAAUQ,GAEhC,GAAIC,GAAIH,EAAGN,EACX,KAAIS,EAEH,KAAM,IAAIX,GAAAA,WAAkBU,GAAgB,IAAK,sBAElD,OAAOC,GAzCQV,EAAAK,OAAMA,CAQtB,IAAcA,IAAd,SAAcA,GAab,QAAAM,GAAsBC,GAErB,MAAOV,GAAEU,GAFMP,EAAAM,MAAKA,GAbRN,EAAAL,EAAAK,SAAAL,EAAAK,YAqBEL,EAAAO,GAAEA,EAKFP,EAAAM,OAAMA,GApDhBN,IAAAA,OAgEPa,OAAAC,eAAAjB,EAAA,cAAAkB,OAAA,IDlCIlB,EAAAA,WCkCWG","file":"System/Integer.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", './Types', './Exceptions/ArgumentException'], function (require, exports, Types_1, ArgumentException_1) {\n    \"use strict\";\n    function Integer(n) {\n        return n | 0;\n    }\n    var Integer;\n    (function (Integer) {\n        function r(max) {\n            return (Math.random() * max) | 0;\n        }\n        function random(max) {\n            assert(max, 'max');\n            if (max == 0)\n                return 0;\n            max += max > 0 ? 1 : -1;\n            return r(max);\n        }\n        Integer.random = random;\n        var random;\n        (function (random) {\n            function under(boundary) {\n                return r(boundary);\n            }\n            random.under = under;\n        })(random = Integer.random || (Integer.random = {}));\n        function is(n) {\n            return Types_1.default.isNumber(n, false) && n == (n | 0);\n        }\n        Integer.is = is;\n        function assert(n, argumentName) {\n            var i = is(n);\n            if (!i) {\n                throw new ArgumentException_1.default(argumentName || 'n', \"Must be an integer.\");\n            }\n            return i;\n        }\n        Integer.assert = assert;\n    })(Integer || (Integer = {}));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Integer;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from './Types';\r\nimport ArgumentException from './Exceptions/ArgumentException';\r\n\r\nfunction Integer(n:number):number\r\n{\r\n\treturn n | 0;\r\n}\r\n\r\nmodule Integer\r\n{\r\n\r\n\tfunction r(max:number):number {\r\n\t\treturn (Math.random()*max) | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a random integer from zero to the max.\r\n\t * Negative numbers are allowed.\r\n\t *\r\n\t * Examples:<br/>\r\n\t * ```Integer.random(1)``` will return 0 or 1.<br/>\r\n\t * ```Integer.random(-2)``` will return 0, -1, or -2.<br/>\r\n\t *\r\n\t * @param max\r\n\t * @returns {number}\r\n\t */\r\n\texport function random(max:number):number\r\n\t{\r\n\t\tassert(max,'max');\r\n\t\tif(max==0) return 0;\r\n\t\tmax += max > 0 ? 1 : -1;\r\n\t\treturn r(max);\r\n\t}\r\n\r\n\texport module random {\r\n\r\n\t\t/**\r\n\t\t * Returns a random integer from zero up to the boundary value.\r\n\t\t * Negative and fractional numbers are allowed.\r\n\t\t *\r\n\t\t * Example:<br/>\r\n\t\t * ```Integer.random(-2)``` will return 0, or -1.<br/>\r\n\t\t * ```Integer.random(5)``` will return 0, 1, 2, 3 or 4.<br/>\r\n\t\t *\r\n\t\t * @param boundary\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\texport function under(boundary:number):number\r\n\t\t{\r\n\t\t\treturn r(boundary)\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn Type.isNumber(n, false) && n==(n | 0);\r\n\t}\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be an integer.\");\r\n\t\t}\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}