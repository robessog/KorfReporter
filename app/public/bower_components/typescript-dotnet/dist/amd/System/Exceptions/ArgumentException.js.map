{"version":3,"sources":["System/Exceptions/ArgumentException.js","System/Exceptions/ArgumentException.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","SystemException_1","Utility_1","NAME","ArgumentException","_super","paramName","message","innerException","beforeSealing","pn","call","trim","_","getName","toString","name","defineProperty","value"],"mappings":";;;;;AAKA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,oBAAqB,mBAAoB,SAAUC,EAASC,EAASC,EAAmBC,GCJtH,YAQA,IAAMC,GAAc,oBAEpBC,EAAA,SAAAC,GAOC,QAAAD,GACCE,EACAC,EACAC,EACAC,GAFA,SAAAF,IAAAA,EAAA,MACA,SAAAC,IAAAA,EAAA,KAGA,IAAIE,GAAKJ,EAAa,IAAMA,EAAY,KAAQ,EAEhDD,GAAAM,KAAAvB,KAAMc,EAAAU,KAAKF,EAAKH,GAAUC,EAAgB,SAACK,GAC1CA,EAAEP,UAAYA,EACXG,GAAeA,EAAcI,KAgBnC,MAhCgC1B,WAAAiB,EAAAC,GAqBrBD,EAAAT,UAAAmB,QAAV,WAEC,MAAOX,IAGRC,EAAAT,UAAAoB,SAAA,WAEC,GAAIF,GAAIzB,IACR,OAAO,IAAMyB,EAAEG,KAAO,KAAOH,EAAEN,QAAU,KAG3CH,GAhCgCH,EAAAA,WADhCL,QAAAqB,eAAAjB,EAAA,cAAAkB,OAAA,IDmBIlB,EAAAA,WAAkBI","file":"System/Exceptions/ArgumentException.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", './SystemException', '../Text/Utility'], function (require, exports, SystemException_1, Utility_1) {\n    'use strict';\n    var NAME = 'ArgumentException';\n    var ArgumentException = (function (_super) {\n        __extends(ArgumentException, _super);\n        function ArgumentException(paramName, message, innerException, beforeSealing) {\n            if (message === void 0) { message = null; }\n            if (innerException === void 0) { innerException = null; }\n            var pn = paramName ? ('{' + paramName + '} ') : '';\n            _super.call(this, Utility_1.trim(pn + message), innerException, function (_) {\n                _.paramName = paramName;\n                if (beforeSealing)\n                    beforeSealing(_);\n            });\n        }\n        ArgumentException.prototype.getName = function () {\n            return NAME;\n        };\n        ArgumentException.prototype.toString = function () {\n            var _ = this;\n            return '[' + _.name + ': ' + _.message + ']';\n        };\n        return ArgumentException;\n    }(SystemException_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ArgumentException;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport Exception from '../Exception';\r\nimport SystemException from './SystemException';\r\nimport {trim} from '../Text/Utility';\r\n\r\n\r\nconst NAME:string = 'ArgumentException';\r\n\r\nexport default\r\nclass ArgumentException extends SystemException\r\n{\r\n\r\n\tparamName:string;\r\n\r\n\t// For simplicity and consistency, lets stick with 1 signature.\r\n\tconstructor(\r\n\t\tparamName:string,\r\n\t\tmessage:string = null,\r\n\t\tinnerException:Error = null,\r\n\t\tbeforeSealing?:(ex:any)=>void)\r\n\t{\r\n\t\tvar pn = paramName ? ('{' + paramName + '} ') : '';\r\n\r\n\t\tsuper(trim(pn + message), innerException, (_)=>{\r\n\t\t\t_.paramName = paramName;\r\n\t\t\tif(beforeSealing) beforeSealing(_);\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprotected getName():string\r\n\t{\r\n\t\treturn NAME;\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn '[' + _.name + ': ' + _.message + ']';\r\n\t}\r\n\r\n}\r\n"]}