{"version":3,"sources":["System/Collections/Array/Sort.js","System/Collections/Array/Sort.ts"],"names":["define","require","exports","Types_1","Compare_1","ensureArray","value","Array","isArray","createComparer","selector","order","equivalentToNaN","NaN","nanHasEquivalent","isTrueNaN","a","b","aValue","bValue","len","Math","min","length","oArray","i","vA","vB","o","r","compare","by"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,cAAe,iBAAkB,SAAUC,EAASC,EAASC,EAASC,GAChG,YCOJ,SAAAC,GAAwBC,GAEvB,MAAOC,OAAMC,QAAQF,GACbA,GACDA,GA0BR,QAAAG,GACCC,EACAC,EACAC,GADA,SAAAD,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAAC,IAEA,IAAIC,IAAoBX,EAAAA,WAAKY,UAAUH,EAEvC,OAAO,UAACI,EAAqBC,GAQ5B,IAAI,GALAC,GAASb,EAAYK,EAASM,IAC9BG,EAASd,EAAYK,EAASO,IAC9BG,EAAMC,KAAKC,IAAIJ,EAAOK,OAAQJ,EAAOI,QAErCC,EAAiBjB,MAAMC,QAAQG,GAASA,EAAQ,KAC5Cc,EAAI,EAAKL,EAAFK,EAAOA,IACtB,CACC,GAAIC,GAAKR,EAAOO,GAAIE,EAAKR,EAAOM,GAC5BG,EAAKJ,EACDC,EAAED,EAAOD,OAASC,EAAOC,GAAK,EACxBd,CAEXG,KAECX,EAAAA,WAAKY,UAAUW,KACjBA,EAAKd,GACHT,EAAAA,WAAKY,UAAUY,KACjBA,EAAKf,GAIP,IAAIiB,GAAIzB,EAAA0B,QAAQJ,EAAIC,EACpB,IAAO,IAAJE,EACF,MAAOD,GAAEC,EAIX,MAAO,IArCO3B,EAAAO,eAAcA,EA0CXP,EAAAA,WAAOO,EACPP,EAAA6B,GAAEtB","file":"System/Collections/Array/Sort.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", '../../Types', '../../Compare'], function (require, exports, Types_1, Compare_1) {\n    \"use strict\";\n    function ensureArray(value) {\n        return Array.isArray(value)\n            ? value\n            : [value];\n    }\n    function createComparer(selector, order, equivalentToNaN) {\n        if (order === void 0) { order = 1; }\n        if (equivalentToNaN === void 0) { equivalentToNaN = NaN; }\n        var nanHasEquivalent = !Types_1.default.isTrueNaN(equivalentToNaN);\n        return function (a, b) {\n            var aValue = ensureArray(selector(a));\n            var bValue = ensureArray(selector(b));\n            var len = Math.min(aValue.length, bValue.length);\n            var oArray = Array.isArray(order) ? order : null;\n            for (var i = 0; i < len; i++) {\n                var vA = aValue[i], vB = bValue[i], o = oArray\n                    ? (i < oArray.length ? oArray[i] : 1)\n                    : order;\n                if (nanHasEquivalent) {\n                    if (Types_1.default.isTrueNaN(vA))\n                        vA = equivalentToNaN;\n                    if (Types_1.default.isTrueNaN(vB))\n                        vB = equivalentToNaN;\n                }\n                var r = Compare_1.compare(vA, vB);\n                if (r !== 0)\n                    return o * r;\n            }\n            return 0;\n        };\n    }\n    exports.createComparer = createComparer;\n    exports.default = createComparer;\n    exports.by = createComparer;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n///<reference path=\"../Sorting/Order.d.ts\"/>\r\n///<reference path=\"../../CompareResult.d.ts\"/>\r\n\r\nimport Type from '../../Types';\r\nimport {compare} from '../../Compare';\r\n\r\nfunction ensureArray<T>(value:T|T[]):T[]\r\n{\r\n\treturn Array.isArray(value)\r\n\t\t? <T[]>value\r\n\t\t: [<T>value];\r\n}\r\n\r\n/**\r\n * A factory function that creates a comparer to be used in multi-dimensional sorting.\r\n *\r\n * <h4>Example</h4>\r\n * ```typescript\r\n * var myArray = [{a:1:b:2},{a:3,b:4},{a:1,b:3}];\r\n *\r\n * // First sort by a, then by b.\r\n * myArray.sort(\r\n *   createComparer(\r\n *     (e)=> [e.a, e.b],\r\n *     [Order.Ascending, Order.Descending]\r\n *   )\r\n * );\r\n *\r\n * // result: [{a:1,b:3},{a:1:b:2},{a:3,b:4}]\r\n * ```\r\n *\r\n * @param selector\r\n * @param order\r\n * @param equivalentToNaN\r\n * @returns {function((TSource|TSource[]), (TSource|TSource[])): CompareResult}\r\n */\r\nexport function createComparer<TSource,TSelect extends Primitive>(\r\n\tselector:Selector<TSource|TSource[],TSelect>,\r\n\torder:Order | Order[] = Order.Ascending,\r\n\tequivalentToNaN:any = NaN):Comparison<TSource|TSource[]>\r\n{\r\n\tvar nanHasEquivalent = !Type.isTrueNaN(equivalentToNaN);\r\n\r\n\treturn (a:TSource|TSource[], b:TSource|TSource[]):CompareResult=>\r\n\t{\r\n\t\t// Use an array always to ensure a single code path.\r\n\t\tvar aValue = ensureArray(selector(a));\r\n\t\tvar bValue = ensureArray(selector(b));\r\n\t\tvar len = Math.min(aValue.length, bValue.length);\r\n\r\n\t\tvar oArray:Order[] = Array.isArray(order) ? order : null;\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar vA = aValue[i], vB = bValue[i],\r\n\t\t\t    o  = oArray\r\n\t\t\t\t    ? (i<oArray.length ? oArray[i] : Order.Ascending)\r\n\t\t\t\t    : <Order>order;\r\n\r\n\t\t\tif(nanHasEquivalent)\r\n\t\t\t{\r\n\t\t\t\tif(Type.isTrueNaN(vA))\r\n\t\t\t\t\tvA = equivalentToNaN;\r\n\t\t\t\tif(Type.isTrueNaN(vB))\r\n\t\t\t\t\tvB = equivalentToNaN;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = compare(vA, vB);\r\n\t\t\tif(r!==CompareResult.Equal)\r\n\t\t\t\treturn o*r;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t};\r\n}\r\n\r\nexport {\r\n\tcreateComparer as default, // Allow for default import.\r\n\tcreateComparer as by // Alias for Sort.by(...) instead of Sort.createComparer\r\n}\r\n"]}