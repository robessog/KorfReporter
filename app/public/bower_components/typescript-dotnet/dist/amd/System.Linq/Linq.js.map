{"version":3,"sources":["System.Linq/Linq.js","System.Linq/Linq.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Values","Arrays","ArrayUtility","Enumerator_1","Types_1","Integer_1","Functions_1","ArrayEnumerator_1","EnumeratorBase_1","Dictionary_1","Queue_1","Utility_1","DisposableBase_1","Exception_1","ObjectDisposedException_1","KeySortedContext_1","createSortContext","orderedEnumerable","currentContext","context","keySelector","order","comparer","parent","throwIfDisposed","disposed","className","VOID0","LinqFunctions","_super","apply","arguments","Greater","a","Lesser","Functions","freeze","UnsupportedEnumerableException","call","Enumerable","_enumeratorFactory","finalizer","fromArray","array","ArrayEnumerable","from","source","isObject","Array","isArray","isEnumerable","getEnumerator","isArrayLike","toArray","slice","result","forEach","e","i","_onDispose","choice","values","yielder","yieldReturn","random","length","cycle","index","empty","False","repeat","element","count","Infinity","isNaN","isFinite","assert","c","repeatWithFinalize","initializer","make","range","start","step","Error","value","current","rangeDown","Math","abs","toInfinity","toNegativeInfinity","rangeTo","to","matches","input","pattern","flags","type","STRING","RegExp","indexOf","regex","match","exec","generate","factory","unfold","seed","valueFactory","skipSeed","isFirst","defer","enumerableFactory","enumerator","moveNext","dispose","enumerable","action","using","map","selector","max","takeUntil","v","aggregate","min","_","predicate","where","x","asEnumerable","toLookup","elementSelector","compareSelector","Identity","dict","key","getValue","push","addByKeyValue","Lookup","toMap","obj","toDictionary","toJoinedString","separator","select","join","doAction","actionResult","yieldBreak","force","defaultAction","skip","skipWhile","skipping","take","takeWhile","includeUntilValue","found","takeExceptLast","q","enqueue","dequeue","takeFromLast","reverse","traverseBreadthFirst","func","resultSelector","buffer","len","nestLevel","next","selectMany","any","traverseDepthFirst","enumeratorStack","disposeThese","flatten","middleEnumerator","pairwise","prev","scan","isUseSeed","WhereSelectEnumerable","collectionSelector","undefined","middleSeq","choose","WhereEnumerable","ofType","typeName","Number","NUMBER","String","Boolean","BOOLEAN","Function","FUNCTION","except","second","keys","containsKey","clear","distinct","distinctUntilChanged","compareKey","initial","shuffle","capacity","selectedIndex","selectedValue","all","every","some","isEmpty","contains","areEqual","lastIndexOf","defaultIfEmpty","defaultValue","zip","firstEnumerator","secondEnumerator","zipMultiple","secondTemp","inner","outerKeySelector","innerKeySelector","outerEnumerator","lookup","innerElements","innerCount","innerElement","get","groupJoin","concatWith","other","merge","enumerables","queue","concat","_i","insertAt","n","isEnumerated","alternateMultiple","sequence","mode","alternateEnumerator","hasAtLeastOne","reset","latest","another","alternateSingle","alternate","intersect","outs","sequenceEqual","equalityComparer","e1","e2","union","orderBy","OrderedEnumerable","orderUsing","comparison","orderUsingReversed","orderByDescending","groupBy","partitionBy","elements","Grouping","group","hasNext","size","initialize","lastOrDefault","average","numberOrNaN","sum","sumInfinite","NaN","maxBy","minBy","product","exists","elementAt","elementAtOrDefault","first","firstOrDefault","last","single","singleOrDefault","share","sharedEnumerator","memoize","cache","catchError","handler","finallyAction","_source","_disposableObjectName","defineProperty","configurable","s","_groupKey","_dictionary","prevSource","prevPredicate","composedPredicate","prevSelector","composedSelector","compare","createOrderedEnumerable","thenBy","thenUsing","thenByDescending","thenUsingReversed","indexes","generateSortedIndexes"],"mappings":"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","file":"System.Linq/Linq.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", '../System/Compare', '../System/Collections/Array/Compare', '../System/Collections/Array/Utility', '../System/Collections/Enumeration/Enumerator', '../System/Types', '../System/Integer', '../System/Functions', '../System/Collections/Enumeration/ArrayEnumerator', '../System/Collections/Enumeration/EnumeratorBase', '../System/Collections/Dictionaries/Dictionary', '../System/Collections/Queue', '../System/Disposable/Utility', '../System/Disposable/DisposableBase', \"../System/Exception\", '../System/Disposable/ObjectDisposedException', \"../System/Collections/Sorting/KeySortedContext\"], function (require, exports, Values, Arrays, ArrayUtility, Enumerator_1, Types_1, Integer_1, Functions_1, ArrayEnumerator_1, EnumeratorBase_1, Dictionary_1, Queue_1, Utility_1, DisposableBase_1, Exception_1, ObjectDisposedException_1, KeySortedContext_1) {\n    'use strict';\n    var VOID0 = void 0;\n    var LinqFunctions = (function (_super) {\n        __extends(LinqFunctions, _super);\n        function LinqFunctions() {\n            _super.apply(this, arguments);\n        }\n        LinqFunctions.prototype.Greater = function (a, b) {\n            return a > b ? a : b;\n        };\n        LinqFunctions.prototype.Lesser = function (a, b) {\n            return a < b ? a : b;\n        };\n        return LinqFunctions;\n    }(Functions_1.default));\n    var Functions = new LinqFunctions();\n    Object.freeze(Functions);\n    var UnsupportedEnumerableException = (function (_super) {\n        __extends(UnsupportedEnumerableException, _super);\n        function UnsupportedEnumerableException() {\n            _super.call(this, \"Unsupported enumerable.\");\n        }\n        return UnsupportedEnumerableException;\n    }(Exception_1.default));\n    var Enumerable = (function (_super) {\n        __extends(Enumerable, _super);\n        function Enumerable(_enumeratorFactory, finalizer) {\n            _super.call(this, finalizer);\n            this._enumeratorFactory = _enumeratorFactory;\n        }\n        Enumerable.fromArray = function (array) {\n            return new ArrayEnumerable(array);\n        };\n        Enumerable.from = function (source) {\n            if (Types_1.default.isObject(source)) {\n                if (source instanceof Enumerable)\n                    return source;\n                if (Array.isArray(source))\n                    return new ArrayEnumerable(source);\n                if (Enumerator_1.isEnumerable(source))\n                    return new Enumerable(function () { return source.getEnumerator(); });\n                if (Types_1.default.isArrayLike(source))\n                    return new ArrayEnumerable(source);\n            }\n            throw new UnsupportedEnumerableException();\n        };\n        Enumerable.toArray = function (source) {\n            if (Types_1.default.isObject(source)) {\n                if (Array.isArray(source))\n                    return source.slice();\n                if (Types_1.default.isArrayLike(source))\n                    source = new ArrayEnumerable(source);\n                if (source instanceof Enumerable)\n                    return source.toArray();\n                if (Enumerator_1.isEnumerable(source)) {\n                    var result = [];\n                    Enumerator_1.forEach(source.getEnumerator(), function (e, i) {\n                        result[i] = e;\n                    });\n                    return result;\n                }\n            }\n            throw new UnsupportedEnumerableException();\n        };\n        Enumerable.prototype.getEnumerator = function () {\n            this.throwIfDisposed();\n            return this._enumeratorFactory();\n        };\n        Enumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._enumeratorFactory = null;\n        };\n        Enumerable.choice = function (values) {\n            return new Enumerable(function () { return new EnumeratorBase_1.default(null, function (yielder) {\n                return yielder.yieldReturn(values[Integer_1.default.random(values.length)]);\n            }); });\n        };\n        Enumerable.cycle = function (values) {\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                }, function (yielder) {\n                    if (index >= values.length)\n                        index = 0;\n                    return yielder.yieldReturn(values[index++]);\n                });\n            });\n        };\n        Enumerable.empty = function () {\n            return new Enumerable(function () { return new EnumeratorBase_1.default(null, Functions.False); });\n        };\n        Enumerable.repeat = function (element, count) {\n            if (count === void 0) { count = Infinity; }\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ? new Enumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () {\n                        index = 0;\n                    }, function (yielder) { return (index++ < c) && yielder.yieldReturn(element); });\n                })\n                : new Enumerable(function () {\n                    return new EnumeratorBase_1.default(null, function (yielder) { return yielder.yieldReturn(element); });\n                });\n        };\n        Enumerable.repeatWithFinalize = function (initializer, finalizer) {\n            return new Enumerable(function () {\n                var element;\n                return new EnumeratorBase_1.default(function () {\n                    element = initializer();\n                }, function (yielder) { return yielder.yieldReturn(element); }, function () {\n                    finalizer(element);\n                });\n            });\n        };\n        Enumerable.make = function (element) {\n            return Enumerable.repeat(element, 1);\n        };\n        Enumerable.range = function (start, count, step) {\n            if (start === void 0) { start = 0; }\n            if (count === void 0) { count = Infinity; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new Error(\"Must have a valid 'start' value.\");\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            if (!isFinite(step))\n                throw new Error(\"Must have a valid 'step' value.\");\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ? new Enumerable(function () {\n                    var value;\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () {\n                        index = 0;\n                        value = start;\n                    }, function (yielder) {\n                        var result = index++ < c\n                            && yielder.yieldReturn(value);\n                        if (result && index < count)\n                            value += step;\n                        return result;\n                    });\n                })\n                : new Enumerable(function () {\n                    var value;\n                    return new EnumeratorBase_1.default(function () {\n                        value = start;\n                    }, function (yielder) {\n                        var current = value;\n                        value += step;\n                        return yielder.yieldReturn(current);\n                    });\n                });\n        };\n        Enumerable.rangeDown = function (start, count, step) {\n            if (start === void 0) { start = 0; }\n            if (count === void 0) { count = Infinity; }\n            if (step === void 0) { step = 1; }\n            step = Math.abs(step) * -1;\n            return Enumerable.range(start, count, step);\n        };\n        Enumerable.toInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return Enumerable.range(start, Infinity, step);\n        };\n        Enumerable.toNegativeInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return Enumerable.rangeDown(start, Infinity, step);\n        };\n        Enumerable.rangeTo = function (start, to, step) {\n            if (start === void 0) { start = 0; }\n            if (to === void 0) { to = Infinity; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new Error(\"Must have a valid 'start' value.\");\n            if (isNaN(to))\n                throw new Error(\"Must have a valid 'to' value.\");\n            if (!isFinite(step))\n                throw new Error(\"Must have a valid 'step' value.\");\n            step = Math.abs(step);\n            if (!isFinite(to))\n                return Enumerable.range(start, Infinity, (start < to) ? (+step) : (-step));\n            return new Enumerable(function () {\n                var value;\n                return start < to\n                    ? new EnumeratorBase_1.default(function () {\n                        value = start;\n                    }, function (yielder) {\n                        var result = value <= to && yielder.yieldReturn(value);\n                        if (result)\n                            value += step;\n                        return result;\n                    })\n                    : new EnumeratorBase_1.default(function () {\n                        value = start;\n                    }, function (yielder) {\n                        var result = value >= to && yielder.yieldReturn(value);\n                        if (result)\n                            value -= step;\n                        return result;\n                    });\n            });\n        };\n        Enumerable.matches = function (input, pattern, flags) {\n            if (flags === void 0) { flags = \"\"; }\n            var type = typeof input;\n            if (type != Types_1.default.STRING)\n                throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\n            if (pattern instanceof RegExp) {\n                flags += (pattern.ignoreCase) ? \"i\" : \"\";\n                flags += (pattern.multiline) ? \"m\" : \"\";\n                pattern = pattern.source;\n            }\n            if (flags.indexOf(\"g\") === -1)\n                flags += \"g\";\n            return new Enumerable(function () {\n                var regex;\n                return new EnumeratorBase_1.default(function () {\n                    regex = new RegExp(pattern, flags);\n                }, function (yielder) {\n                    var match = regex.exec(input);\n                    return (match !== null) ? yielder.yieldReturn(match) : false;\n                });\n            });\n        };\n        Enumerable.generate = function (factory, count) {\n            if (count === void 0) { count = Infinity; }\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ? new Enumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () {\n                        index = 0;\n                    }, function (yielder) {\n                        var current = index++;\n                        return current < c && yielder.yieldReturn(factory(current));\n                    });\n                })\n                : new Enumerable(function () {\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () {\n                        index = 0;\n                    }, function (yielder) { return yielder.yieldReturn(factory(index++)); });\n                });\n        };\n        Enumerable.unfold = function (seed, valueFactory, skipSeed) {\n            if (skipSeed === void 0) { skipSeed = false; }\n            return new Enumerable(function () {\n                var index = 0;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    value = seed;\n                    isFirst = !skipSeed;\n                }, function (yielder) {\n                    var i = index++;\n                    if (isFirst)\n                        isFirst = false;\n                    else\n                        value = valueFactory(value, i);\n                    return yielder.yieldReturn(value);\n                });\n            });\n        };\n        Enumerable.defer = function (enumerableFactory) {\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = enumerableFactory().getEnumerator();\n                }, function (yielder) { return enumerator.moveNext() && yielder.yieldReturn(enumerator.current); }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.forEach = function (enumerable, action) {\n            if (enumerable) {\n                Utility_1.using(Enumerator_1.from(enumerable), function (e) {\n                    Enumerator_1.forEach(e, action);\n                });\n            }\n        };\n        Enumerable.map = function (enumerable, selector) {\n            return enumerable && Utility_1.using(Enumerator_1.from(enumerable), function (e) {\n                var result = [];\n                Enumerator_1.forEach(e, function (e, i) {\n                    result[i] = selector(e);\n                });\n                return result;\n            });\n        };\n        Enumerable.max = function (values) {\n            return values\n                .takeUntil(function (v) { return v == +Infinity; }, true)\n                .aggregate(Functions.Greater);\n        };\n        Enumerable.min = function (values) {\n            return values\n                .takeUntil(function (v) { return v == -Infinity; }, true)\n                .aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            var index = 0;\n            Utility_1.using(_.getEnumerator(), function (e) {\n                while (_.throwIfDisposed() && e.moveNext()) {\n                    if (action(e.current, index++) === false)\n                        break;\n                }\n            });\n        };\n        Enumerable.prototype.toArray = function (predicate) {\n            var result = [];\n            if (predicate)\n                return this.where(predicate).toArray();\n            this.forEach(function (x, i) {\n                result[i] = x;\n            });\n            return result;\n        };\n        Enumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            return new Enumerable(function () { return _.getEnumerator(); });\n        };\n        Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x) {\n                var key = keySelector(x);\n                var element = elementSelector(x);\n                var array = dict.getValue(key);\n                if (array !== VOID0)\n                    array.push(element);\n                else\n                    dict.addByKeyValue(key, [element]);\n            });\n            return new Lookup(dict);\n        };\n        Enumerable.prototype.toMap = function (keySelector, elementSelector) {\n            var obj = {};\n            this.forEach(function (x) {\n                obj[keySelector(x)] = elementSelector(x);\n            });\n            return obj;\n        };\n        Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x) { return dict.addByKeyValue(keySelector(x), elementSelector(x)); });\n            return dict;\n        };\n        Enumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this.select(selector).toArray().join(separator);\n        };\n        Enumerable.prototype.doAction = function (action) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var actionResult = action(enumerator.current, index++);\n                        if (actionResult === false || actionResult === 0)\n                            return yielder.yieldBreak();\n                        if (actionResult !== 2)\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.force = function (defaultAction) {\n            if (defaultAction === void 0) { defaultAction = 0; }\n            this.throwIfDisposed();\n            this.doAction(function (element) { return defaultAction; });\n        };\n        Enumerable.prototype.skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!count || isNaN(count) || count < 0)\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            var c = count;\n            return this.doAction(function (element, index) {\n                return index < c\n                    ? 2\n                    : 1;\n            });\n        };\n        Enumerable.prototype.skipWhile = function (predicate) {\n            this.throwIfDisposed();\n            var skipping = true;\n            return this.doAction(function (element, index) {\n                if (skipping)\n                    skipping = predicate(element, index);\n                return skipping\n                    ? 2\n                    : 1;\n            });\n        };\n        Enumerable.prototype.take = function (count) {\n            if (!count || isNaN(count) || count < 0)\n                return Enumerable.empty();\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                return _;\n            Integer_1.default.assert(count, \"count\");\n            var c = count;\n            return _.doAction(function (element, index) { return index < c; });\n        };\n        Enumerable.prototype.takeWhile = function (predicate) {\n            this.throwIfDisposed();\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 1\n                    : 0;\n            });\n        };\n        Enumerable.prototype.takeUntil = function (predicate, includeUntilValue) {\n            this.throwIfDisposed();\n            if (!includeUntilValue)\n                return this.doAction(function (element, index) {\n                    return predicate(element, index)\n                        ? 0\n                        : 1;\n                });\n            var found = false;\n            return this.doAction(function (element, index) {\n                if (found)\n                    return 0;\n                found = predicate(element, index);\n                return 1;\n            });\n        };\n        Enumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            if (!count || isNaN(count) || count <= 0)\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            var c = count;\n            return new Enumerable(function () {\n                var enumerator;\n                var q;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    q = new Queue_1.default();\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        q.enqueue(enumerator.current);\n                        if (q.count > c)\n                            return yielder.yieldReturn(q.dequeue());\n                    }\n                    return false;\n                }, function () {\n                    Utility_1.dispose(enumerator, q);\n                });\n            });\n        };\n        Enumerable.prototype.takeFromLast = function (count) {\n            if (!count || isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _.reverse();\n            Integer_1.default.assert(count, \"count\");\n            return _.reverse().take(count);\n        };\n        Enumerable.prototype.traverseBreadthFirst = function (func, resultSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var nestLevel = 0;\n                var buffer, len;\n                return new EnumeratorBase_1.default(function () {\n                    nestLevel = 0;\n                    buffer = [];\n                    len = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            buffer[len++] = enumerator.current;\n                            return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\n                        }\n                        if (!len)\n                            return yielder.yieldBreak();\n                        var next = Enumerable\n                            .fromArray(buffer)\n                            .selectMany(func);\n                        if (!next.any()) {\n                            return yielder.yieldBreak();\n                        }\n                        else {\n                            nestLevel++;\n                            buffer = [];\n                            len = 0;\n                            enumerator.dispose();\n                            enumerator = next.getEnumerator();\n                        }\n                    }\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                    buffer.length = 0;\n                });\n            });\n        };\n        Enumerable.prototype.traverseDepthFirst = function (func, resultSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumeratorStack = [];\n                var enumerator;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    len = 0;\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            var value = resultSelector(enumerator.current, len);\n                            enumeratorStack[len++] = enumerator;\n                            enumerator = func(enumerator.current).getEnumerator();\n                            return yielder.yieldReturn(value);\n                        }\n                        if (len == 0)\n                            return false;\n                        enumerator.dispose();\n                        enumerator = enumeratorStack[--len];\n                        enumeratorStack.length = len;\n                    }\n                }, function () {\n                    try {\n                        Utility_1.dispose(enumerator);\n                    }\n                    finally {\n                        Utility_1.disposeThese(enumeratorStack);\n                    }\n                });\n            });\n        };\n        Enumerable.prototype.flatten = function () {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (middleEnumerator != null) {\n                            if (middleEnumerator.moveNext()) {\n                                return yielder.yieldReturn(middleEnumerator.current);\n                            }\n                            else {\n                                middleEnumerator = null;\n                            }\n                        }\n                        if (enumerator.moveNext()) {\n                            var c = enumerator.current;\n                            if (Array.isArray(c)) {\n                                middleEnumerator.dispose();\n                                middleEnumerator = Enumerable.fromArray(c)\n                                    .selectMany(Functions.Identity)\n                                    .flatten()\n                                    .getEnumerator();\n                                continue;\n                            }\n                            else {\n                                return yielder.yieldReturn(enumerator.current);\n                            }\n                        }\n                        return false;\n                    }\n                }, function () {\n                    Utility_1.dispose(enumerator, middleEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.pairwise = function (selector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    enumerator.moveNext();\n                }, function (yielder) {\n                    var prev = enumerator.current;\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(selector(prev, enumerator.current));\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.scan = function (func, seed) {\n            var isUseSeed = seed !== VOID0;\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    isFirst = true;\n                }, function (yielder) {\n                    if (isFirst) {\n                        isFirst = false;\n                        return isUseSeed\n                            ? yielder.yieldReturn(value = seed)\n                            : enumerator.moveNext() && yielder.yieldReturn(value\n                                = enumerator.current);\n                    }\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(value = func(value, enumerator.current))\n                        : false;\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.select = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            if (selector.length < 2)\n                return new WhereSelectEnumerable(_, null, selector);\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return enumerator.moveNext()\n                        ? yielder.yieldReturn(selector(enumerator.current, index++))\n                        : false;\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            var _ = this;\n            if (!resultSelector)\n                resultSelector = function (a, b) { return b; };\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    middleEnumerator = undefined;\n                    index = 0;\n                }, function (yielder) {\n                    if (middleEnumerator === VOID0 && !enumerator.moveNext())\n                        return false;\n                    do {\n                        if (!middleEnumerator) {\n                            var middleSeq = collectionSelector(enumerator.current, index++);\n                            if (!middleSeq)\n                                continue;\n                            middleEnumerator = Enumerator_1.from(middleSeq);\n                        }\n                        if (middleEnumerator.moveNext())\n                            return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\n                        middleEnumerator.dispose();\n                        middleEnumerator = null;\n                    } while (enumerator.moveNext());\n                    return false;\n                }, function () {\n                    Utility_1.dispose(enumerator, middleEnumerator);\n                    enumerator = null;\n                    middleEnumerator = null;\n                });\n            });\n        };\n        Enumerable.prototype.choose = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var result = selector(enumerator.current, index++);\n                        if (result !== null && result !== VOID0)\n                            return yielder.yieldReturn(result);\n                    }\n                    return false;\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.where = function (predicate) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            if (predicate.length < 2)\n                return new WhereEnumerable(_, predicate);\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        if (predicate(enumerator.current, index++))\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.ofType = function (type) {\n            var typeName;\n            switch (type) {\n                case Number:\n                    typeName = Types_1.default.NUMBER;\n                    break;\n                case String:\n                    typeName = Types_1.default.STRING;\n                    break;\n                case Boolean:\n                    typeName = Types_1.default.BOOLEAN;\n                    break;\n                case Function:\n                    typeName = Types_1.default.FUNCTION;\n                    break;\n                default:\n                    return this\n                        .where(function (x) { return x instanceof type; });\n            }\n            return this\n                .where(function (x) { return typeof x === typeName; });\n        };\n        Enumerable.prototype.except = function (second, compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    if (second)\n                        Enumerable.forEach(second, function (key) { return keys.addByKeyValue(key, true); });\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                    keys.clear();\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.distinct = function (compareSelector) {\n            return this.except(null, compareSelector);\n        };\n        Enumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var compareKey;\n                var initial = true;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var key = compareSelector(enumerator.current);\n                        if (initial) {\n                            initial = false;\n                        }\n                        else if (compareKey === key) {\n                            continue;\n                        }\n                        compareKey = key;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.reverse = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var buffer;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    index = buffer.length;\n                }, function (yielder) {\n                    return index > 0\n                        && yielder.yieldReturn(buffer[--index]);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.shuffle = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var buffer;\n                var capacity;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    capacity = len = buffer.length;\n                }, function (yielder) {\n                    if (!len)\n                        return yielder.yieldBreak();\n                    var selectedIndex = Integer_1.default.random(len);\n                    var selectedValue = buffer[selectedIndex];\n                    buffer[selectedIndex] = buffer[--len];\n                    buffer[len] = null;\n                    if (len % 32 == 0)\n                        buffer.length = len;\n                    return yielder.yieldReturn(selectedValue);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var count = 0;\n            if (predicate) {\n                _.forEach(function (x, i) {\n                    if (predicate(x, i))\n                        ++count;\n                });\n            }\n            else {\n                _.forEach(function () {\n                    ++count;\n                });\n            }\n            return count;\n        };\n        Enumerable.prototype.all = function (predicate) {\n            var result = true;\n            this.forEach(function (x) {\n                if (!predicate(x)) {\n                    result = false;\n                    return false;\n                }\n            });\n            return result;\n        };\n        Enumerable.prototype.every = function (predicate) {\n            return this.all(predicate);\n        };\n        Enumerable.prototype.any = function (predicate) {\n            var result = false;\n            if (predicate) {\n                this.forEach(function (x) {\n                    result = predicate(x);\n                    return !result;\n                });\n            }\n            else {\n                this.forEach(function () {\n                    result = true;\n                    return false;\n                });\n            }\n            return result;\n        };\n        Enumerable.prototype.some = function (predicate) {\n            return this.any(predicate);\n        };\n        Enumerable.prototype.isEmpty = function () {\n            return !this.any();\n        };\n        Enumerable.prototype.contains = function (value, compareSelector) {\n            return compareSelector\n                ? this.any(function (v) { return compareSelector(v) === compareSelector(value); })\n                : this.any(function (v) { return v === value; });\n        };\n        Enumerable.prototype.indexOf = function (value, compareSelector) {\n            var found = -1;\n            if (compareSelector)\n                this.forEach(function (element, i) {\n                    if (Values.areEqual(compareSelector(element), compareSelector(value), true)) {\n                        found = i;\n                        return false;\n                    }\n                });\n            else\n                this.forEach(function (element, i) {\n                    if (Values.areEqual(element, value, true)) {\n                        found = i;\n                        return false;\n                    }\n                });\n            return found;\n        };\n        Enumerable.prototype.lastIndexOf = function (value, compareSelector) {\n            var result = -1;\n            if (compareSelector)\n                this.forEach(function (element, i) {\n                    if (Values.areEqual(compareSelector(element), compareSelector(value), true))\n                        result\n                            = i;\n                });\n            else\n                this.forEach(function (element, i) {\n                    if (Values.areEqual(element, value, true))\n                        result = i;\n                });\n            return result;\n        };\n        Enumerable.prototype.defaultIfEmpty = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    isFirst = true;\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    if (enumerator.moveNext()) {\n                        isFirst = false;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    else if (isFirst) {\n                        isFirst = false;\n                        return yielder.yieldReturn(defaultValue);\n                    }\n                    return false;\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.zip = function (second, resultSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(second);\n                }, function (yielder) {\n                    return firstEnumerator.moveNext() && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                }, function () {\n                    Utility_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.zipMultiple = function (second, resultSelector) {\n            var _ = this;\n            if (!second.length)\n                return Enumerable.empty();\n            return new Enumerable(function () {\n                var secondTemp;\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    secondTemp = new Queue_1.default(second);\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = null;\n                }, function (yielder) {\n                    if (firstEnumerator.moveNext()) {\n                        while (true) {\n                            while (!secondEnumerator) {\n                                if (secondTemp.count) {\n                                    var next = secondTemp.dequeue();\n                                    if (next)\n                                        secondEnumerator = Enumerator_1.from(next);\n                                }\n                                else\n                                    return yielder.yieldBreak();\n                            }\n                            if (secondEnumerator.moveNext())\n                                return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                            secondEnumerator.dispose();\n                            secondEnumerator = null;\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    Utility_1.dispose(firstEnumerator, secondTemp);\n                });\n            });\n        };\n        Enumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var outerEnumerator;\n                var lookup;\n                var innerElements = null;\n                var innerCount = 0;\n                return new EnumeratorBase_1.default(function () {\n                    outerEnumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    while (true) {\n                        if (innerElements != null) {\n                            var innerElement = innerElements[innerCount++];\n                            if (innerElement !== VOID0)\n                                return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\n                            innerElement = null;\n                            innerCount = 0;\n                        }\n                        if (outerEnumerator.moveNext()) {\n                            var key = outerKeySelector(outerEnumerator.current);\n                            innerElements = lookup.get(key);\n                        }\n                        else {\n                            return yielder.yieldBreak();\n                        }\n                    }\n                }, function () {\n                    Utility_1.dispose(outerEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var lookup = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current))));\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.concatWith = function (other) {\n            var _ = this;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                return new EnumeratorBase_1.default(function () {\n                    firstEnumerator = _.getEnumerator();\n                }, function (yielder) {\n                    if (firstEnumerator != null) {\n                        if (firstEnumerator.moveNext())\n                            return yielder.yieldReturn(firstEnumerator.current);\n                        secondEnumerator = Enumerator_1.from(other);\n                        firstEnumerator.dispose();\n                        firstEnumerator = null;\n                    }\n                    if (secondEnumerator.moveNext())\n                        return yielder.yieldReturn(secondEnumerator.current);\n                    return false;\n                }, function () {\n                    Utility_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.merge = function (enumerables) {\n            var _ = this;\n            if (!enumerables.length)\n                return _;\n            if (enumerables.length == 1)\n                return _.concatWith(enumerables[0]);\n            return new Enumerable(function () {\n                var enumerator;\n                var queue;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    queue = new Queue_1.default(enumerables);\n                }, function (yielder) {\n                    while (true) {\n                        while (!enumerator && queue.count) {\n                            enumerator = Enumerator_1.from(queue.dequeue());\n                        }\n                        if (enumerator && enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                        if (enumerator) {\n                            enumerator.dispose();\n                            enumerator = null;\n                            continue;\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    Utility_1.dispose(enumerator, queue);\n                });\n            });\n        };\n        Enumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            var _ = this;\n            if (enumerables.length == 0)\n                return _;\n            if (enumerables.length == 1)\n                return _.concatWith(enumerables[0]);\n            return _.merge(enumerables);\n        };\n        Enumerable.prototype.insertAt = function (index, other) {\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            var _ = this;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var count = 0;\n                var isEnumerated = false;\n                return new EnumeratorBase_1.default(function () {\n                    count = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(other);\n                    isEnumerated = false;\n                }, function (yielder) {\n                    if (count == n) {\n                        isEnumerated = true;\n                        if (secondEnumerator.moveNext())\n                            return yielder.yieldReturn(secondEnumerator.current);\n                    }\n                    if (firstEnumerator.moveNext()) {\n                        count++;\n                        return yielder.yieldReturn(firstEnumerator.current);\n                    }\n                    return !isEnumerated\n                        && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(secondEnumerator.current);\n                }, function () {\n                    Utility_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.alternateMultiple = function (sequence) {\n            var _ = this;\n            return new Enumerable(function () {\n                var buffer, mode, enumerator, alternateEnumerator;\n                return new EnumeratorBase_1.default(function () {\n                    alternateEnumerator = new ArrayEnumerator_1.default(Enumerable.toArray(sequence));\n                    enumerator = _.getEnumerator();\n                    var hasAtLeastOne = enumerator.moveNext();\n                    mode = hasAtLeastOne\n                        ? 1\n                        : 0;\n                    if (hasAtLeastOne)\n                        buffer = enumerator.current;\n                }, function (yielder) {\n                    switch (mode) {\n                        case 0:\n                            return yielder.yieldBreak();\n                        case 2:\n                            if (alternateEnumerator.moveNext())\n                                return yielder.yieldReturn(alternateEnumerator.current);\n                            alternateEnumerator.reset();\n                            mode = 1;\n                            break;\n                    }\n                    var latest = buffer;\n                    var another = enumerator.moveNext();\n                    mode = another\n                        ? 2\n                        : 0;\n                    if (another)\n                        buffer = enumerator.current;\n                    return yielder.yieldReturn(latest);\n                }, function () {\n                    Utility_1.dispose(enumerator, alternateEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.alternateSingle = function (value) {\n            return this.alternateMultiple(Enumerable.make(value));\n        };\n        Enumerable.prototype.alternate = function () {\n            var sequence = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                sequence[_i - 0] = arguments[_i];\n            }\n            return this.alternateMultiple(sequence);\n        };\n        Enumerable.prototype.intersect = function (second, compareSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                var outs;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    outs = new Dictionary_1.default(compareSelector);\n                    Enumerable.from(second)\n                        .forEach(function (key) {\n                        keys.addByKeyValue(key, true);\n                    });\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!outs.containsKey(current) && keys.containsKey(current)) {\n                            outs.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            return Utility_1.using(this.getEnumerator(), function (e1) { return Utility_1.using(Enumerable.from(second).getEnumerator(), function (e2) {\n                while (e1.moveNext()) {\n                    if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\n                        return false;\n                }\n                return !e2.moveNext();\n            }); });\n        };\n        Enumerable.prototype.union = function (second, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    firstEnumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                }, function (yielder) {\n                    var current;\n                    if (secondEnumerator === VOID0) {\n                        while (firstEnumerator.moveNext()) {\n                            current = firstEnumerator.current;\n                            if (!keys.containsKey(current)) {\n                                keys.addByKeyValue(current, null);\n                                return yielder.yieldReturn(current);\n                            }\n                        }\n                        secondEnumerator = Enumerable.from(second).getEnumerator();\n                    }\n                    while (secondEnumerator.moveNext()) {\n                        current = secondEnumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, null);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    Utility_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.orderBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, 1);\n        };\n        Enumerable.prototype.orderUsing = function (comparison) {\n            return new OrderedEnumerable(this, null, 1, null, comparison);\n        };\n        Enumerable.prototype.orderUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this, null, -1, null, comparison);\n        };\n        Enumerable.prototype.orderByDescending = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, -1);\n        };\n        Enumerable.prototype.groupBy = function (keySelector, elementSelector, compareSelector) {\n            var _ = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () { return _.toLookup(keySelector, elementSelector, compareSelector)\n                .getEnumerator(); });\n        };\n        Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n            if (resultSelector === void 0) { resultSelector = function (key, elements) { return new Grouping(key, elements); }; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () {\n                var enumerator;\n                var key;\n                var compareKey;\n                var group;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    if (enumerator.moveNext()) {\n                        key = keySelector(enumerator.current);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(enumerator.current)];\n                        len = 1;\n                    }\n                    else\n                        group = null;\n                }, function (yielder) {\n                    if (!group)\n                        return yielder.yieldBreak();\n                    var hasNext, c;\n                    while ((hasNext = enumerator.moveNext())) {\n                        c = enumerator.current;\n                        if (compareKey === compareSelector(keySelector(c)))\n                            group[len++] = elementSelector(c);\n                        else\n                            break;\n                    }\n                    var result = resultSelector(key, group);\n                    if (hasNext) {\n                        c = enumerator.current;\n                        key = keySelector(c);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(c)];\n                        len = 1;\n                    }\n                    else {\n                        group = null;\n                    }\n                    return yielder.yieldReturn(result);\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                    group = null;\n                });\n            });\n        };\n        Enumerable.prototype.buffer = function (size) {\n            if (size < 1 || !isFinite(size))\n                throw new Error(\"Invalid buffer size.\");\n            Integer_1.default.assert(size, \"size\");\n            var _ = this, len;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    var array = ArrayUtility.initialize(size);\n                    len = 0;\n                    while (len < size && enumerator.moveNext) {\n                        array[len++] = enumerator.current;\n                    }\n                    array.length = len;\n                    return len && yielder.yieldReturn(array);\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.aggregate = function (func, seed) {\n            return this.scan(func, seed).lastOrDefault();\n        };\n        Enumerable.prototype.average = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            var count = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite += value > 0 ? (+1) : (-1);\n                ++count;\n            });\n            if (sumInfinite)\n                return sumInfinite * Infinity;\n            return (isNaN(sum) || !count)\n                ? NaN\n                : (sum / count);\n        };\n        Enumerable.prototype.max = function () {\n            return this.aggregate(Functions.Greater);\n        };\n        Enumerable.prototype.min = function () {\n            return this.aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.maxBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.minBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.sum = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite += value > 0 ? (+1) : (-1);\n            });\n            return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\n        };\n        Enumerable.prototype.product = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var result = 1, exists = false;\n            this.forEach(function (x) {\n                exists = true;\n                var value = selector(x);\n                if (isNaN(value)) {\n                    result = NaN;\n                    return false;\n                }\n                if (value == 0) {\n                    result = 0;\n                    return false;\n                }\n                result *= value;\n            });\n            return (exists && isNaN(result)) ? NaN : result;\n        };\n        Enumerable.prototype.elementAt = function (index) {\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x, i) {\n                if (i == n) {\n                    value = x;\n                    found = true;\n                    return false;\n                }\n            });\n            if (!found)\n                throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\n            return value;\n        };\n        Enumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x, i) {\n                if (i == n) {\n                    value = x;\n                    found = true;\n                    return false;\n                }\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.first = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                value = x;\n                found = true;\n                return false;\n            });\n            if (!found)\n                throw new Error(\"first:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.firstOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                value = x;\n                found = true;\n                return false;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            if (!found)\n                throw new Error(\"last:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.single = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                if (!found) {\n                    found = true;\n                    value = x;\n                }\n                else\n                    throw new Error(\"single:sequence contains more than one element.\");\n            });\n            if (!found)\n                throw new Error(\"single:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.singleOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                if (!found) {\n                    found = true;\n                    value = x;\n                }\n                else\n                    throw new Error(\"single:sequence contains more than one element.\");\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.share = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var sharedEnumerator;\n            return new Enumerable(function () {\n                return new EnumeratorBase_1.default(function () {\n                    if (!sharedEnumerator)\n                        sharedEnumerator = _.getEnumerator();\n                }, function (yielder) {\n                    return sharedEnumerator.moveNext()\n                        && yielder.yieldReturn(sharedEnumerator.current);\n                });\n            }, function () {\n                Utility_1.dispose(sharedEnumerator);\n            });\n        };\n        Enumerable.prototype.memoize = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            var cache;\n            var enumerator;\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    if (!enumerator)\n                        enumerator = _.getEnumerator();\n                    if (!cache)\n                        cache = [];\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var i = index++;\n                    if (i >= cache.length) {\n                        return (enumerator.moveNext())\n                            ? yielder.yieldReturn(cache[i] = enumerator.current)\n                            : false;\n                    }\n                    return yielder.yieldReturn(cache[i]);\n                });\n            }, function () {\n                disposed = true;\n                if (cache)\n                    cache.length = 0;\n                cache = null;\n                Utility_1.dispose(enumerator);\n                enumerator = null;\n            });\n        };\n        Enumerable.prototype.catchError = function (handler) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    try {\n                        throwIfDisposed(disposed);\n                        enumerator = _.getEnumerator();\n                    }\n                    catch (e) {\n                    }\n                }, function (yielder) {\n                    try {\n                        throwIfDisposed(disposed);\n                        if (enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    catch (e) {\n                        handler(e);\n                    }\n                    return false;\n                }, function () {\n                    Utility_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.finallyAction = function (action) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(enumerator.current)\n                        : false;\n                }, function () {\n                    try {\n                        Utility_1.dispose(enumerator);\n                    }\n                    finally {\n                        action();\n                    }\n                });\n            });\n        };\n        return Enumerable;\n    }(DisposableBase_1.default));\n    exports.Enumerable = Enumerable;\n    var ArrayEnumerable = (function (_super) {\n        __extends(ArrayEnumerable, _super);\n        function ArrayEnumerable(source) {\n            _super.call(this, function () {\n                _.throwIfDisposed();\n                return new ArrayEnumerator_1.default(function () {\n                    _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\n                    return _._source;\n                });\n            });\n            var _ = this;\n            _._disposableObjectName = \"ArrayEnumerable\";\n            _._source = source;\n        }\n        ArrayEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source = null;\n        };\n        Object.defineProperty(ArrayEnumerable.prototype, \"source\", {\n            get: function () {\n                return this._source;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ArrayEnumerable.prototype.toArray = function () {\n            var s = this.source;\n            if (!s)\n                return [];\n            if (Array.isArray(s))\n                return s.slice();\n            var len = s.length, result = ArrayUtility.initialize(len);\n            for (var i = 0; i < len; ++i) {\n                result[i] = s[i];\n            }\n            return result;\n        };\n        ArrayEnumerable.prototype.asEnumerable = function () {\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            if (source) {\n                for (var i = 0; i < source.length; ++i) {\n                    if (action(source[i], i) === false)\n                        break;\n                }\n            }\n        };\n        ArrayEnumerable.prototype.any = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source ? source.length : 0;\n            return len && (!predicate || _super.prototype.any.call(this, predicate));\n        };\n        ArrayEnumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source ? source.length : 0;\n            return len && (predicate ? _super.prototype.count.call(this, predicate) : len);\n        };\n        ArrayEnumerable.prototype.elementAt = function (index) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (index < source.length && index >= 0)\n                ? source[index]\n                : _super.prototype.elementAt.call(this, index);\n        };\n        ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (index < source.length && index >= 0)\n                ? source[index]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.first = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (source && source.length)\n                ? source[0]\n                : _super.prototype.first.call(this);\n        };\n        ArrayEnumerable.prototype.firstOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (source && source.length)\n                ? source[0]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return (len)\n                ? source[len - 1]\n                : _super.prototype.last.call(this);\n        };\n        ArrayEnumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len\n                ? source[len - 1]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            if (!count || count < 0)\n                return _.asEnumerable();\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, count); });\n        };\n        ArrayEnumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this, len = _._source ? _._source.length : 0;\n            return _.take(len - count);\n        };\n        ArrayEnumerable.prototype.takeFromLast = function (count) {\n            if (!count || count < 0)\n                return Enumerable.empty();\n            var _ = this, len = _._source\n                ? _._source.length\n                : 0;\n            return _.skip(len - count);\n        };\n        ArrayEnumerable.prototype.reverse = function () {\n            var _ = this;\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, _._source\n                ? (_._source.length - 1)\n                : 0, -1); });\n        };\n        ArrayEnumerable.prototype.memoize = function () {\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            if (Array.isArray(second))\n                return Arrays.areEqual(this.source, second, true, equalityComparer);\n            if (second instanceof ArrayEnumerable)\n                return second.sequenceEqual(this.source, equalityComparer);\n            return _super.prototype.sequenceEqual.call(this, second, equalityComparer);\n        };\n        ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            var s = this._source;\n            return !selector && Array.isArray(s)\n                ? s.join(separator)\n                : _super.prototype.toJoinedString.call(this, separator, selector);\n        };\n        return ArrayEnumerable;\n    }(Enumerable));\n    var Grouping = (function (_super) {\n        __extends(Grouping, _super);\n        function Grouping(_groupKey, elements) {\n            _super.call(this, elements);\n            this._groupKey = _groupKey;\n        }\n        Object.defineProperty(Grouping.prototype, \"key\", {\n            get: function () {\n                return this._groupKey;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Grouping;\n    }(ArrayEnumerable));\n    var Lookup = (function () {\n        function Lookup(_dictionary) {\n            this._dictionary = _dictionary;\n        }\n        Object.defineProperty(Lookup.prototype, \"count\", {\n            get: function () {\n                return this._dictionary.count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lookup.prototype.get = function (key) {\n            return this._dictionary.getValue(key);\n        };\n        Lookup.prototype.contains = function (key) {\n            return this._dictionary.containsKey(key);\n        };\n        Lookup.prototype.getEnumerator = function () {\n            var _ = this;\n            var enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = _._dictionary.getEnumerator();\n            }, function (yielder) {\n                if (!enumerator.moveNext())\n                    return false;\n                var current = enumerator.current;\n                return yielder.yieldReturn(new Grouping(current.key, current.value));\n            }, function () {\n                Utility_1.dispose(enumerator);\n            });\n        };\n        return Lookup;\n    }());\n    var WhereEnumerable = (function (_super) {\n        __extends(WhereEnumerable, _super);\n        function WhereEnumerable(prevSource, prevPredicate) {\n            _super.call(this, null);\n            this.prevSource = prevSource;\n            this.prevPredicate = prevPredicate;\n        }\n        WhereEnumerable.prototype.where = function (predicate) {\n            if (predicate.length > 1)\n                return _super.prototype.where.call(this, predicate);\n            var prevPredicate = this.prevPredicate;\n            var composedPredicate = function (x) { return prevPredicate(x) && predicate(x); };\n            return new WhereEnumerable(this.prevSource, composedPredicate);\n        };\n        WhereEnumerable.prototype.select = function (selector) {\n            if (selector.length > 1)\n                return _super.prototype.select.call(this, selector);\n            return new WhereSelectEnumerable(this.prevSource, this.prevPredicate, selector);\n        };\n        WhereEnumerable.prototype.getEnumerator = function () {\n            var predicate = this.prevPredicate;\n            var source = this.prevSource;\n            var enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = source.getEnumerator();\n            }, function (yielder) {\n                while (enumerator.moveNext()) {\n                    if (predicate(enumerator.current))\n                        return yielder.yieldReturn(enumerator.current);\n                }\n                return false;\n            }, function () {\n                Utility_1.dispose(enumerator);\n            });\n        };\n        WhereEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.prevPredicate = null;\n            this.prevSource = null;\n        };\n        return WhereEnumerable;\n    }(Enumerable));\n    var WhereSelectEnumerable = (function (_super) {\n        __extends(WhereSelectEnumerable, _super);\n        function WhereSelectEnumerable(prevSource, prevPredicate, prevSelector) {\n            _super.call(this, null);\n            this.prevSource = prevSource;\n            this.prevPredicate = prevPredicate;\n            this.prevSelector = prevSelector;\n        }\n        WhereSelectEnumerable.prototype.where = function (predicate) {\n            if (predicate.length > 1)\n                return _super.prototype.where.call(this, predicate);\n            return new WhereEnumerable(this, predicate);\n        };\n        WhereSelectEnumerable.prototype.select = function (selector) {\n            if (selector.length > 1)\n                return _super.prototype.select.call(this, selector);\n            var _ = this;\n            var prevSelector = _.prevSelector;\n            var composedSelector = function (x) { return selector(prevSelector(x)); };\n            return new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\n        };\n        WhereSelectEnumerable.prototype.getEnumerator = function () {\n            var _ = this, predicate = _.prevPredicate, source = _.prevSource, selector = _.prevSelector, enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = source.getEnumerator();\n            }, function (yielder) {\n                while (enumerator.moveNext()) {\n                    var c = enumerator.current;\n                    if (predicate == null || predicate(c)) {\n                        return yielder.yieldReturn(selector(c));\n                    }\n                }\n                return false;\n            }, function () {\n                Utility_1.dispose(enumerator);\n            });\n        };\n        WhereSelectEnumerable.prototype._onDispose = function () {\n            var _ = this;\n            _super.prototype._onDispose.call(this);\n            _.prevPredicate = null;\n            _.prevSource = null;\n            _.prevSelector = null;\n        };\n        return WhereSelectEnumerable;\n    }(Enumerable));\n    var OrderedEnumerable = (function (_super) {\n        __extends(OrderedEnumerable, _super);\n        function OrderedEnumerable(source, keySelector, order, parent, comparer) {\n            if (comparer === void 0) { comparer = Values.compare; }\n            _super.call(this, null);\n            this.source = source;\n            this.keySelector = keySelector;\n            this.order = order;\n            this.parent = parent;\n            this.comparer = comparer;\n        }\n        OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, order) {\n            return new OrderedEnumerable(this.source, keySelector, order, this);\n        };\n        OrderedEnumerable.prototype.thenBy = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, 1);\n        };\n        OrderedEnumerable.prototype.thenUsing = function (comparison) {\n            return new OrderedEnumerable(this.source, null, 1, this, comparison);\n        };\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, -1);\n        };\n        OrderedEnumerable.prototype.thenUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this.source, null, -1, this, comparison);\n        };\n        OrderedEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            var buffer;\n            var indexes;\n            var index = 0;\n            return new EnumeratorBase_1.default(function () {\n                index = 0;\n                buffer = Enumerable.toArray(_.source);\n                indexes = createSortContext(_).generateSortedIndexes(buffer);\n            }, function (yielder) {\n                return (index < indexes.length)\n                    ? yielder.yieldReturn(buffer[indexes[index++]])\n                    : false;\n            }, function () {\n                if (buffer)\n                    buffer.length = 0;\n                buffer = null;\n                if (indexes)\n                    indexes.length = 0;\n                indexes = null;\n            });\n        };\n        OrderedEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.source = null;\n            this.keySelector = null;\n            this.order = null;\n            this.parent = null;\n        };\n        return OrderedEnumerable;\n    }(Enumerable));\n    function createSortContext(orderedEnumerable, currentContext) {\n        if (currentContext === void 0) { currentContext = null; }\n        var context = new KeySortedContext_1.default(currentContext, orderedEnumerable.keySelector, orderedEnumerable.order, orderedEnumerable.comparer);\n        if (orderedEnumerable.parent)\n            return createSortContext(orderedEnumerable.parent, context);\n        return context;\n    }\n    function throwIfDisposed(disposed, className) {\n        if (className === void 0) { className = \"Enumerable\"; }\n        if (disposed)\n            throw new ObjectDisposedException_1.default(className);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Enumerable;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../System/Primitive.d.ts\"/>\r\n///<reference path=\"../System/FunctionTypes.d.ts\"/>\r\n///<reference path=\"../System/Collections/Array/IArray.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerator.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerable.d.ts\"/>\r\n///<reference path=\"../System/Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../System/IComparer.d.ts\"/>\r\n///<reference path=\"../System/Collections/Sorting/Order.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as Values from '../System/Compare';\r\nimport * as Arrays from '../System/Collections/Array/Compare';\r\nimport * as ArrayUtility from '../System/Collections/Array/Utility';\r\nimport {from as enumeratorFrom, forEach as enumeratorForEach, isEnumerable} from '../System/Collections/Enumeration/Enumerator';\r\nimport Type from '../System/Types';\r\nimport Integer from '../System/Integer';\r\nimport BaseFunctions from '../System/Functions';\r\nimport ArrayEnumerator from '../System/Collections/Enumeration/ArrayEnumerator';\r\nimport EnumeratorBase from '../System/Collections/Enumeration/EnumeratorBase';\r\nimport Dictionary from '../System/Collections/Dictionaries/Dictionary';\r\nimport Queue from '../System/Collections/Queue';\r\nimport {dispose, disposeThese, using} from '../System/Disposable/Utility';\r\nimport DisposableBase from '../System/Disposable/DisposableBase';\r\nimport Exception from \"../System/Exception\";\r\nimport ArgumentException from '../System/Exceptions/ArgumentException';\r\nimport ObjectDisposedException from '../System/Disposable/ObjectDisposedException';\r\nimport KeySortedContext from \"../System/Collections/Sorting/KeySortedContext\";\r\ntype Comparable = Primitive|IComparable<any>;\r\n\r\n// #region Local Constants.\r\n\r\nconst VOID0:any = void 0;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// #endregion\r\n\r\nclass UnsupportedEnumerableException extends Exception\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(\"Unsupported enumerable.\");\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Defined values for doAction.\r\n */\r\nexport const enum EnumerableAction\r\n{\r\n\tBreak  = 0,\r\n\tReturn = 1,\r\n\tSkip   = 2\r\n}\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends DisposableBase implements IEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t}\r\n\r\n\t/**\r\n\t * Static shortcut for creating an ArrayEnumerable.\r\n\t */\r\n\tstatic fromArray<T>(array:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(array);\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(source:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(Type.isObject(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Array.isArray(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable(()=>source.getEnumerator());\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\tstatic toArray<T>(source:IEnumerable<T> | IArray<T>):T[]\r\n\t{\r\n\t\tif(Type.isObject(source))\r\n\t\t{\r\n\t\t\tif(Array.isArray(source))\r\n\t\t\t\treturn source.slice();\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\tsource = new ArrayEnumerable<T>(<IArray<T>>source);\r\n\r\n\t\t\tif(source instanceof  Enumerable)\r\n\t\t\t\treturn source.toArray();\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t{\r\n\t\t\t\tvar result:T[] = [];\r\n\t\t\t\tenumeratorForEach<T>(\r\n\t\t\t\t\tsource.getEnumerator(), (e, i) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult[i] = e;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\tthis._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(values[Integer.random(values.length)])\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0; // Let the compiler know this is an int.\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic empty<T>():Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\tFunctions.False\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element)\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration does not break.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic make<T>(element:T):Enumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\tstatic range(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\t\t\t\tvar c:number = count; // Force integer evaluation.\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.range(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.rangeDown(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number = 0,\r\n\t\tto:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(to))\r\n\t\t\tthrow new Error(\"Must have a valid 'to' value.\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\t// Range to infinity has a more efficient mechanism.\r\n\t\tif(!isFinite(to))\r\n\t\t\treturn Enumerable.range(start, Infinity, (start<to) ? (+step) : (-step));\r\n\r\n\t\treturn new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn start<to\r\n\r\n\t\t\t\t\t? new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t: new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:any, flags:string = \"\"):Enumerable<RegExpExecArray>\r\n\t{\r\n\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof  RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new Enumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tvar match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = index++;\r\n\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++))\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(seed:T, valueFactory:Selector<T, T>, skipSeed:Boolean = false):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic defer<T>(enumerableFactory:() => IEnumerable<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = enumerableFactory().getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> enumerator.moveNext() && yielder.yieldReturn(enumerator.current),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerable<T> | IArray<T>,\r\n\t\taction:(element:T, index?:number) => any):void\r\n\t{\r\n\t\tif(enumerable)\r\n\t\t{\r\n\t\t\tusing(enumeratorFrom(enumerable), e=>\r\n\t\t\t{\r\n\t\t\t\tenumeratorForEach(e, action);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tstatic map<T,TResult>(\r\n\t\tenumerable:IEnumerable<T> | IArray<T>,\r\n\t\tselector:Selector<T,TResult>):TResult[]\r\n\t{\r\n\r\n\t\treturn enumerable && using(enumeratorFrom(enumerable), e=>\r\n\t\t\t{\r\n\t\t\t\tvar result:TResult[] = [];\r\n\t\t\t\tenumeratorForEach(e, (e, i)=>\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = selector(e);\r\n\t\t\t\t});\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tstatic min(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Instance methods...\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(<any>action(e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\tvar result:T[] = [];\r\n\r\n\t\tif(predicate) return this.where(predicate).toArray();\r\n\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\tresult[i] = x\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar key = keySelector(x);\r\n\t\t\t\tvar element = elementSelector(x);\r\n\r\n\t\t\t\tvar array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach(x=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x)] = elementSelector(x);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Dictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach(x=> dict.addByKeyValue(keySelector(x), elementSelector(x)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this.select(selector).toArray().join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar actionResult = <any>action(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tforce(defaultAction:EnumerableAction = EnumerableAction.Break):void\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.doAction(element => defaultAction);\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Simply return this.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\tvar c:number = count;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<c\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\tskipWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar skipping:boolean = true;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(skipping)\r\n\t\t\t\t\tskipping = predicate(element, index);\r\n\r\n\t\t\t\treturn skipping\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttake(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals no limit.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn _.doAction((element:T, index?:number) => index<c);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return\r\n\t\t\t);\r\n\r\n\t\tvar found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all in reverse.\r\n\t\t\treturn _.reverse();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn _.reverse().take(count);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar nestLevel:number = 0;\r\n\t\t\t\tvar buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tvar next = Enumerable\r\n\t\t\t\t\t\t\t\t.fromArray<T>(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(func);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tvar enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar value = resultSelector(enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tenumerator = func(enumerator.current).getEnumerator();\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdisposeThese(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\t\t\t\tif(Array.isArray(c))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = Enumerable.fromArray<any>(c)\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar prev = enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext() && yielder.yieldReturn(value\r\n\t\t\t\t\t\t\t\t= enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(selector.length<2)\r\n\t\t\treturn new WhereSelectEnumerable(_, null, selector);\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(enumerator.current, index++))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tselectMany<TResult>(collectionSelector:Selector<T, IEnumerable<TResult | IArray<TResult>>>):Enumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerable<TElement> | IArray<TResult>> | Selector<T, IArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, any>,\r\n\t\tresultSelector?:(collection:any, middle:any) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a, b) => b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = undefined;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar middleSeq = collectionSelector(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumeratorFrom(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t\t\t\tenumerator.current, middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tchoose<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = selector(enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(predicate.length<2)\r\n\t\t\treturn new WhereEnumerable(_, predicate);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(predicate(enumerator.current, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (): TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <Enumerable<any>>this\r\n\t\t\t\t\t.where(x=>x instanceof  type);\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.where(x=>typeof x===typeName);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerable<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tEnumerable.forEach(second, key => keys.addByKeyValue(key, true));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):Enumerable<T>\r\n\t{\r\n\t\treturn this.except(null, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0] results in [0,1,2,0];\r\n\tdistinctUntilChanged<TCompare>(compareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar key = compareSelector(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(compareKey===key)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tindex>0\r\n\t\t\t\t\t&& yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar capacity:number;\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tvar selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = null; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar count:number = 0;\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\t_.forEach((x, i) =>\r\n\t\t\t{\r\n\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\t++count;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = true;\r\n\t\tthis.forEach(x =>\r\n\t\t{\r\n\t\t\tif(!predicate(x))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = false;\r\n\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\tthis.forEach(x =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\tresult = true;\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true)) result\r\n\t\t\t\t\t= i;\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tdefaultIfEmpty(defaultValue:T = null):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerable<TSecond> | IArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tfirstEnumerator.moveNext() && secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerable<TSecond> | IArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar secondTemp:Queue<any>;\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(firstEnumerator.current, secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerable<TInner> | IArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tvar innerElements:TInner[] = null;\r\n\t\t\t\tvar innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElement = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar key = outerKeySelector(outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerable<TInner> | IArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey, TInner> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\tenumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcatWith(other:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator!=null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(firstEnumerator.moveNext()) return yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\t\tfirstEnumerator.dispose();\r\n\t\t\t\t\t\t\tfirstEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(secondEnumerator.moveNext()) return yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerable<T> | IArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!enumerables.length)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar queue:Queue<IEnumerable<T> | IArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerable<T> | IArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerable<T> | IArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn _.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tinsertAt(index:number, other:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tvar count:number = 0;\r\n\t\t\t\tvar isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tvar hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tvar another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T,boolean>;\r\n\t\t\t\tvar outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tEnumerable.from<T>(second)\r\n\t\t\t\t\t\t\t.forEach(key=>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);  // Should Dictionary be IDisposable?\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tEnumerable.from<T>(second).getEnumerator(),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerable<T> | IArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = Enumerable.from<T>(second).getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\r\n\tgroupBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => _.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar key:TKey;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar group:TElement[];\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkey = keySelector(enumerator.current);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(enumerator.current)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):IEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tvar _ = this, len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T\r\n\t{\r\n\t\treturn this.scan(func, seed).lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tvar count = 0; // No need to make integer if the result could be a float.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tfunction(x)\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(sumInfinite) // Not zero?\r\n\t\t\treturn sumInfinite*Infinity;\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"first:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"single:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tshare():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar sharedEnumerator:IEnumerator<T>;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// assertIsNotDisposed(disposed);  This doesn't need an assertion since disposing the underlying enumerable disposes the enumerator.\r\n\r\n\t\t\t\t\t\tif(!sharedEnumerator)\r\n\t\t\t\t\t\t\tsharedEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tsharedEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(sharedEnumerator.current)\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmemoize():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tvar i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = null;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:Error) => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:() => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass ArrayEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Could possibly be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = <any>null;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar s = this.source;\r\n\t\tif(!s)\r\n\t\t\treturn [];\r\n\r\n\t\tif(Array.isArray(s))\r\n\t\t\treturn (<any>s).slice();\r\n\r\n\t\tvar len = s.length, result:T[] = ArrayUtility.initialize<T>(len);\r\n\t\tfor(let i = 0; i<len; ++i)\r\n\t\t{\r\n\t\t\tresult[i] = s[i];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tasEnumerable():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\tif(source)\r\n\t\t{\r\n\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\tfor(let i = 0; i<source.length; ++i)\r\n\t\t\t{\r\n\t\t\t\t// _.assertIsNotDisposed(); // Assertion here is unnecessary since we already have a reference to the source array.\r\n\t\t\t\tif(<any>action(source[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: super.elementAt(index);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: super.first();\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || count<0) // Out of bounds? Simply return a unfiltered enumerable.\r\n\t\t\treturn _.asEnumerable();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, len = _._source ? _._source.length : 0;\r\n\t\treturn _.take(len - count);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || count<0) return Enumerable.empty<T>();\r\n\r\n\t\tvar _   = this,\r\n\t\t    len = _._source\r\n\t\t\t    ? _._source.length\r\n\t\t\t    : 0;\r\n\r\n\t\treturn _.skip(len - count);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(Array.isArray(second))\r\n\t\t\treturn Arrays.areEqual(this.source, <IArray<T>>second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof  ArrayEnumerable)\r\n\t\t\treturn (<ArrayEnumerable<T>>second).sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport interface IGrouping<TKey, TElement>\r\nextends Enumerable<TElement>\r\n{\r\n\tkey: TKey;\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\n\r\nexport interface ILookup<TKey, TElement>\r\nextends IEnumerable<IGrouping<TKey, TElement>>\r\n{\r\n\tcount: number;\r\n\tget(key:TKey): TElement[];\r\n\tcontains(key:TKey): boolean;\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:Dictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tvar current = enumerator.current;\r\n\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass WhereEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<T>,\r\n\t\tprivate prevPredicate:Predicate<T>  // predicate.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\tvar prevPredicate = this.prevPredicate;\r\n\t\tvar composedPredicate = (x:T) => prevPredicate(x) && predicate(x);\r\n\t\treturn new WhereEnumerable<T>(this.prevSource, composedPredicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\treturn new WhereSelectEnumerable<T, TSelect>(\r\n\t\t\tthis.prevSource,\r\n\t\t\tthis.prevPredicate,\r\n\t\t\tselector\r\n\t\t);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar predicate = this.prevPredicate;\r\n\t\tvar source = this.prevSource;\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(enumerator.current))\r\n\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.prevPredicate = null;\r\n\t\tthis.prevSource = null;\r\n\t}\r\n}\r\n\r\nclass WhereSelectEnumerable<TSource, T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<TSource>,\r\n\t\tprivate prevPredicate:Predicate<TSource>,  // predicate.length always <= 1\r\n\t\tprivate prevSelector:Selector<TSource, T> // selector.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:(value:T, index?:number) => boolean):Enumerable<T>\r\n\t{\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\treturn new WhereEnumerable<T>(this, predicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t// if selector use index, can't compose\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\tvar _ = this;\r\n\t\tvar prevSelector = _.prevSelector;\r\n\t\tvar composedSelector = (x:TSource) => selector(prevSelector(x));\r\n\t\treturn new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _                             = this,\r\n\t\t    predicate                     = _.prevPredicate,\r\n\t\t    source                        = _.prevSource,\r\n\t\t    selector:Selector<TSource, T> = _.prevSelector, // Type definition needed for correct inference.\r\n\t\t    enumerator:IEnumerator<TSource>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\tif(predicate==null || predicate(c))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selector(c));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.prevPredicate = null;\r\n\t\t_.prevSource = null;\r\n\t\t_.prevSelector = null;\r\n\t}\r\n}\r\n\r\nexport interface IOrderedEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>;\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n}\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends Enumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:(value:T) => TOrderBy,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>,\r\n\t\tpublic comparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:(value:T) => TOrderBy,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_).generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = null;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.source = null;\r\n\t\tthis.keySelector = null;\r\n\t\tthis.order = null;\r\n\t\tthis.parent = null;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T> = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean, className:string = \"Enumerable\"):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(className);\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n"]}