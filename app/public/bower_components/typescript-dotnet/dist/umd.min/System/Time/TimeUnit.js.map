{"version":3,"sources":["System/Time/TimeUnit.js","System/Time/TimeUnit.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","TimeUnit","toMilliseconds","value","units","Milliseconds","Days","Hours","Minutes","Seconds","Ticks","Error","fromMilliseconds","ms","from","quantity","unit","getTotalMilliseconds","assertValid","isNaN","Math","floor","Object","freeze","defineProperty"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YCHJ,IAAKM,IAAL,SAAKA,GAEJA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,QAPIA,IAAAA,MAUL,IAAOA,IAAP,SAAOA,GAGN,QAAAC,GACCC,EACAC,GAGA,OAHA,SAAAA,IAAAA,EAAiBH,EAASI,cAGnBD,GAEN,IAAKH,GAASK,KACbH,GAAS,EACV,KAAKF,GAASM,MACbJ,GAAS,EACV,KAAKF,GAASO,QACbL,GAAS,EACV,KAAKF,GAASQ,QACbN,GAAS,GACV,KAAKF,GAASI,aACb,MAAOF,EACR,KAAKF,GAASS,MACb,MAAOP,GAAM,GACd,SACC,KAAM,IAAIQ,OAAM,sBAInB,QAAAC,GACCC,EACAT,GAEA,OAAOA,GAEN,IAAKH,GAASK,KACb,MAAOO,GAAG,KACX,KAAKZ,GAASM,MACb,MAAOM,GAAG,IACX,KAAKZ,GAASO,QACb,MAAOK,GAAG,GACX,KAAKZ,GAASQ,QACb,MAAOI,GAAG,GACX,KAAKZ,GAASI,aACb,MAAOQ,EACR,KAAKZ,GAASS,MACb,MAAU,KAAHG,CACR,SACC,KAAM,IAAIF,OAAM,sBAInB,QAAAG,GAAqBC,EAAwBC,GAC5C,MAAOD,IAAYH,EAAiBG,EAASE,uBAAuBD,GAIrE,QAAAE,GAA4BF,GAE3B,GAAGG,MAAMH,IAASA,EAAKf,EAASK,MAAQU,EAAKf,EAASS,OAASU,KAAKC,MAAML,KAAQA,EACjF,KAAM,IAAIL,OAAM,oBAEjB,QAAO,EAzDQV,EAAAC,eAAcA,EAwBdD,EAAAW,iBAAgBA,EAuBhBX,EAAAa,KAAIA,EAKJb,EAAAiB,YAAWA,GAvDrBjB,IAAAA,OAiEPqB,OAAOC,OAAOtB,GAEdqB,OAAAE,eAAA7B,EAAA,cAAAQ,OAAA,IDVIR,EAAAA,WCUWM","file":"System/Time/TimeUnit.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Originally based upon .NET source but with many additions and improvements.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var TimeUnit;\n    (function (TimeUnit) {\n        TimeUnit[TimeUnit[\"Ticks\"] = 0] = \"Ticks\";\n        TimeUnit[TimeUnit[\"Milliseconds\"] = 1] = \"Milliseconds\";\n        TimeUnit[TimeUnit[\"Seconds\"] = 2] = \"Seconds\";\n        TimeUnit[TimeUnit[\"Minutes\"] = 3] = \"Minutes\";\n        TimeUnit[TimeUnit[\"Hours\"] = 4] = \"Hours\";\n        TimeUnit[TimeUnit[\"Days\"] = 5] = \"Days\";\n    })(TimeUnit || (TimeUnit = {}));\n    var TimeUnit;\n    (function (TimeUnit) {\n        function toMilliseconds(value, units) {\n            if (units === void 0) { units = TimeUnit.Milliseconds; }\n            switch (units) {\n                case TimeUnit.Days:\n                    value *= 24;\n                case TimeUnit.Hours:\n                    value *= 60;\n                case TimeUnit.Minutes:\n                    value *= 60;\n                case TimeUnit.Seconds:\n                    value *= 1000;\n                case TimeUnit.Milliseconds:\n                    return value;\n                case TimeUnit.Ticks:\n                    return value / 10000;\n                default:\n                    throw new Error(\"Invalid TimeUnit.\");\n            }\n        }\n        TimeUnit.toMilliseconds = toMilliseconds;\n        function fromMilliseconds(ms, units) {\n            switch (units) {\n                case TimeUnit.Days:\n                    return ms / 86400000;\n                case TimeUnit.Hours:\n                    return ms / 3600000;\n                case TimeUnit.Minutes:\n                    return ms / 60000;\n                case TimeUnit.Seconds:\n                    return ms / 1000;\n                case TimeUnit.Milliseconds:\n                    return ms;\n                case TimeUnit.Ticks:\n                    return ms * 10000;\n                default:\n                    throw new Error(\"Invalid TimeUnit.\");\n            }\n        }\n        TimeUnit.fromMilliseconds = fromMilliseconds;\n        function from(quantity, unit) {\n            return quantity && fromMilliseconds(quantity.getTotalMilliseconds(), unit);\n        }\n        TimeUnit.from = from;\n        function assertValid(unit) {\n            if (isNaN(unit) || unit > TimeUnit.Days || unit < TimeUnit.Ticks || Math.floor(unit) !== unit)\n                throw new Error(\"Invalid TimeUnit.\");\n            return true;\n        }\n        TimeUnit.assertValid = assertValid;\n    })(TimeUnit || (TimeUnit = {}));\n    Object.freeze(TimeUnit);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeUnit;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeQuantity.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n\r\n\r\nenum TimeUnit\r\n{\r\n\tTicks,\r\n\tMilliseconds,\r\n\tSeconds,\r\n\tMinutes,\r\n\tHours,\r\n\tDays\r\n} // Earth Days\r\n\r\nmodule TimeUnit\r\n{\r\n\r\n\texport function toMilliseconds(\r\n\t\tvalue:number,\r\n\t\tunits:TimeUnit = TimeUnit.Milliseconds):number\r\n\t{\r\n\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\tvalue *= HowMany.Hours.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\tvalue *= HowMany.Minutes.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\tvalue *= HowMany.Seconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\tvalue *= HowMany.Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn value;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn value/HowMany.Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function fromMilliseconds(\r\n\t\tms:number,\r\n\t\tunits:TimeUnit)\r\n\t{\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\treturn ms/HowMany.Milliseconds.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\treturn ms/HowMany.Milliseconds.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\treturn ms/HowMany.Milliseconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\treturn ms/HowMany.Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn ms;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn ms*HowMany.Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function from(quantity:ITimeQuantity, unit:TimeUnit):number {\r\n\t\treturn quantity && fromMilliseconds(quantity.getTotalMilliseconds(),unit);\r\n\t}\r\n\r\n\r\n\texport function assertValid(unit:TimeUnit):boolean\r\n\t{\r\n\t\tif(isNaN(unit) || unit>TimeUnit.Days || unit<TimeUnit.Ticks || Math.floor(unit)!==unit)\r\n\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nObject.freeze(TimeUnit);\r\n\r\nexport default TimeUnit;\r\n"]}