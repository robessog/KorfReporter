{"version":3,"sources":["System/Utility/clone.js","System/Utility/clone.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","clone","source","depth","Types_1","isObject","result","Array","isArray","slice","i","length","k","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,YAAaN,IAEhD,SAAUI,EAASF,GAClB,YCLJ,SAAAM,GAA8BC,EAAYC,GAEzC,GAFyC,SAAAA,IAAAA,EAAA,GAEhC,EAANA,EACF,MAAOD,EAGR,KAAIE,EAAAA,WAAKC,SAASH,GAAS,MAAOA,EAElC,IAAII,EACJ,IAAGC,MAAMC,QAAQN,IAGhB,GADAI,EAAeJ,EAAQO,QACpBN,EAAM,EAER,IAAI,GAAIO,GAAI,EAAGA,EAAEJ,EAAOK,OAAQD,IAE/BJ,EAAOI,GAAKT,EAAMK,EAAOI,GAAIP,EAAQ,OAOvC,IADAG,KACGH,EAAM,EAAG,IAAI,GAAIS,KAAKV,GAGxBI,EAAOM,GAAKX,EAAMC,EAAOU,GAAIT,EAAQ,EAIvC,OAAOG,GAhCR,GAAAF,GAAAP,EAAiB,WAEjBgB,QAAAC,eAAAnB,EAAA,cAAAoB,OAAA,IDgCIpB,EAAAA,WAAkBM","file":"System/Utility/clone.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../Types'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require('../Types');\n    function clone(source, depth) {\n        if (depth === void 0) { depth = 0; }\n        if (depth < 0)\n            return source;\n        if (!Types_1.default.isObject(source))\n            return source;\n        var result;\n        if (Array.isArray(source)) {\n            result = source.slice();\n            if (depth > 0) {\n                for (var i = 0; i < result.length; i++) {\n                    result[i] = clone(result[i], depth - 1);\n                }\n            }\n        }\n        else {\n            result = {};\n            if (depth > 0)\n                for (var k in source) {\n                    result[k] = clone(source[k], depth - 1);\n                }\n        }\n        return result;\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = clone;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from '../Types';\r\n\r\nexport default function clone(source:any, depth:number = 0):any\r\n{\r\n\tif(depth<0)\r\n\t\treturn source;\r\n\r\n\t// return primitives as is.\r\n\tif(!Type.isObject(source)) return source;\r\n\r\n\tvar result:any;\r\n\tif(Array.isArray(source))\r\n\t{\r\n\t\tresult = (<any>source).slice();\r\n\t\tif(depth>0)\r\n\t\t{\r\n\t\t\tfor(let i = 0; i<result.length; i++)\r\n\t\t\t{\r\n\t\t\t\tresult[i] = clone(result[i], depth - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tresult = {};\r\n\t\tif(depth>0) for(let k in source)\r\n\t\t{\r\n\t\t\t//noinspection JSUnfilteredForInLoop\r\n\t\t\tresult[k] = clone(source[k], depth - 1);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n"]}