{"version":3,"sources":["System/ExceptionType.js","System/ExceptionType.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Error","EvalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YCKJA,GAAAM,MAAQ,QAMRN,EAAAO,UAAY,YAMZP,EAAAQ,WAAa,aAObR,EAAAS,eAAiB,iBAMjBT,EAAAU,YAAc,cAMdV,EAAAW,UAAY,YAMZX,EAAAY,SAAW","file":"System/ExceptionType.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    exports.Error = 'Error';\n    exports.EvalError = 'EvalError';\n    exports.RangeError = 'RangeError';\n    exports.ReferenceError = 'ReferenceError';\n    exports.SyntaxError = 'SyntaxError';\n    exports.TypeError = 'TypeError';\n    exports.URIError = 'URIError';\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/*\r\n * Since the 'Error' type in JavaScript is simply {name:string, message:string},\r\n * Exception types provide a means for identifying and properly reusing 'name'.\r\n *\r\n * This is mostly for reference.\r\n */\r\n\r\n\r\n/**\r\n * An error in the eval() function has occurred.\r\n */\r\nexport const\r\nError = 'Error';\r\n\r\n/**\r\n * An error in the eval() function has occurred.\r\n */\r\nexport const\r\nEvalError = 'EvalError';\r\n\r\n/**\r\n * Out of range number value has occurred.\r\n */\r\nexport const\r\nRangeError = 'RangeError';\r\n\r\n\r\n/**\r\n * An illegal reference has occurred.\r\n */\r\nexport const\r\nReferenceError = 'ReferenceError';\r\n\r\n/**\r\n * A syntax error within code inside the eval() function has occurred. All other syntax errors are not caught by try/catch/finally, and will trigger the default browser error message associated with the error. To catch actual syntax errors, you may use the onerror event.\r\n */\r\nexport const\r\nSyntaxError = 'SyntaxError';\r\n\r\n/**\r\n * An error in the expected variable type has occurred.\r\n */\r\nexport const\r\nTypeError = 'TypeError';\r\n\r\n/**\r\n * An error when encoding or decoding the URI has occurred (ie: when calling encodeURI()).\r\n */\r\nexport const\r\nURIError = 'URIError';\r\n\r\n"]}