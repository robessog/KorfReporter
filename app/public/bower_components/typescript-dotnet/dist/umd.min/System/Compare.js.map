{"version":3,"sources":["System/Compare.js","System/Compare.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","areEqual","a","b","strict","isTrueNaN","compare","Types_1","hasMember","COMPARE_TO","compareTo","VOID0","NaN"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAYN,IAE/C,SAAUI,EAASF,GAClB,YCGJ,SAAAM,GAAyBC,EAAOC,EAAOC,GAEtC,MAFsC,UAAAA,IAAAA,GAAA,GAE/BF,IAAIC,IAAMC,GAAUF,GAAGC,GAAKE,EAAUH,IAAMG,EAAUF,GAO9D,QAAAG,GAAwBJ,EAAOC,EAAOC,GAGrC,MAHqC,UAAAA,IAAAA,GAAA,GAGlCH,EAASC,EAAGC,EAAGC,GACV,EAELF,GAAKK,EAAAA,WAAKC,UAAUN,EAAGO,GAClBP,EAAEQ,UAAUP,GACZA,GAAKI,EAAAA,WAAKC,UAAUL,EAAGM,IACtBN,EAAEO,UAAUR,GAIlBA,EAAEC,GAAKC,IAAe,IAAJF,GAAY,GAAHC,GAAY,OAAJD,GAAYC,IAAIQ,GAC9C,EAELR,EAAED,GAAKE,IAAe,IAAJD,GAAY,GAAHD,GAAY,OAAJC,GAAYD,IAAIS,GAC9C,GAEDC,IAnCR,GAAAL,GAAAV,EAAiB,WACVQ,EAAYE,EAAAA,WAAKF,UAElBM,EAAY,MAIFhB,GAAAM,SAAQA,CAKxB,IAAMQ,GAAa,WAIHd,GAAAW,QAAOA","file":"System/Compare.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './Types'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require('./Types');\n    var isTrueNaN = Types_1.default.isTrueNaN;\n    var VOID0 = void 0;\n    function areEqual(a, b, strict) {\n        if (strict === void 0) { strict = true; }\n        return a === b || !strict && a == b || isTrueNaN(a) && isTrueNaN(b);\n    }\n    exports.areEqual = areEqual;\n    var COMPARE_TO = \"compareTo\";\n    function compare(a, b, strict) {\n        if (strict === void 0) { strict = true; }\n        if (areEqual(a, b, strict))\n            return 0;\n        if (a && Types_1.default.hasMember(a, COMPARE_TO))\n            return a.compareTo(b);\n        else if (b && Types_1.default.hasMember(b, COMPARE_TO))\n            return -b.compareTo(a);\n        if (a > b || strict && (a === 0 && b == 0 || a === null && b === VOID0))\n            return 1;\n        if (b > a || strict && (b === 0 && a == 0 || b === null && a === VOID0))\n            return -1;\n        return NaN;\n    }\n    exports.compare = compare;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IComparable.d.ts\"/>\r\n///<reference path=\"Primitive.d.ts\"/>\r\n///<reference path=\"CompareResult.d.ts\"/>\r\nimport Type from './Types';\r\nimport isTrueNaN = Type.isTrueNaN;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n\r\n// Used for special equals cases like NaN.\r\nexport function areEqual(a:any, b:any, strict:boolean = true):boolean\r\n{\r\n\treturn a===b || !strict && a==b || isTrueNaN(a) && isTrueNaN(b);\r\n}\r\n\r\nconst COMPARE_TO = \"compareTo\";\r\n\r\nexport function compare<T>(a:IComparable<T>, b:IComparable<T>):number;\r\nexport function compare<T extends Primitive>(a:T, b:T, strict?:boolean):CompareResult;\r\nexport function compare(a:any, b:any, strict:boolean = true):CompareResult\r\n{\r\n\r\n\tif(areEqual(a, b, strict))\r\n\t\treturn CompareResult.Equal;\r\n\r\n\tif(a && Type.hasMember(a, COMPARE_TO))\r\n\t\treturn a.compareTo(b);\r\n\telse if(b && Type.hasMember(b, COMPARE_TO))\r\n\t\treturn -b.compareTo(a);\r\n\r\n\t// Allow for special inequality..\r\n\r\n\tif(a>b || strict && (a===0 && b==0 || a===null && b===VOID0))\r\n\t\treturn CompareResult.Greater;\r\n\r\n\tif(b>a || strict && (b===0 && a==0 || b===null && a===VOID0))\r\n\t\treturn CompareResult.Less;\r\n\r\n\treturn NaN;\r\n}\r\n"]}