{"version":3,"sources":["System/Collections/Dictionaries/OrderedStringKeyDictionary.js","System/Collections/Dictionaries/OrderedStringKeyDictionary.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","ArrayUtility","StringKeyDictionary_1","ArgumentOutOfRangeException_1","VOID0","OrderedStringKeyDictionary","_super","call","_order","indexOfKey","key","indexOf","getValueByIndex","index","getValue","setValue","value","keepIndex","_","exists","remove","push","setByIndex","order","length","importValues","values","handleUpdate","changed","i","setValues","_i","arguments","removeByIndex","getKeys","filter","containsKey","defineProperty"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,mBAAoB,wBAAyB,gDAAiDN,IAEjI,SAAUI,EAASF,GCXtB,YAEA,IAAYM,GAAYJ,EAAM,oBAC9BK,EAAAL,EAAgC,yBAChCM,EAAAN,EAAwC,gDAElCO,EAAY,OAElBC,EAAA,SAAAC,GAQC,QAAAD,KAECC,EAAAC,KAAAxB,MAJOA,KAAAyB,UA2ET,MA/EQ1B,WAAAuB,EAAAC,GAWPD,EAAAf,UAAAmB,WAAA,SAAWC,GAEV,MAAO3B,MAAKyB,OAAOG,QAAQD,EAAK,IAGjCL,EAAAf,UAAAsB,gBAAA,SAAgBC,GAEf,MAAO9B,MAAK+B,SAAS/B,KAAKyB,OAAOK,KAIlCR,EAAAf,UAAAyB,SAAA,SAASL,EAAYM,EAAcC,GAElC,GAAIC,GAAInC,KAAMoC,EAA6B,IAApBD,EAAET,WAAWC,EAMpC,OALIS,IAAWH,IAAQZ,IAASa,EAExBE,GAAUH,IAAQZ,IAAUa,GACnChB,EAAamB,OAAOF,EAAEV,OAAQE,GAF9BQ,EAAEV,OAAOa,KAAKX,GAIRJ,EAAAhB,UAAMyB,SAAQR,KAAAxB,KAAC2B,EAAKM,IAG5BX,EAAAf,UAAAgC,WAAA,SAAWT,EAAcG,GAExB,GAAIE,GAAInC,KAAMwC,EAAQL,EAAEV,MACxB,IAAS,EAANK,EACF,KAAM,IAAIV,GAAAA,WAA4B,QAASU,EAAO,qBACvD,IAAGA,GAAOU,EAAMC,OACf,KAAM,IAAIrB,GAAAA,WAA4B,QAASU,EAAO,6BACvD,OAAOK,GAAEH,SAASQ,EAAMV,GAAQG,IAIjCX,EAAAf,UAAAmC,aAAA,SAAaC,GAEZ,GAAIR,GAAInC,IACR,OAAOmC,GAAES,aACR,WAGC,IAAI,GADAC,IAAkB,EACdC,EAAI,EAAGA,EAAEH,EAAOF,OAAQK,IAE5BX,EAAEI,WAAWO,EAAGH,EAAOG,MACzBD,GAAU,EAEZ,OAAOA,MAOVvB,EAAAf,UAAAwC,UAAA,WDfW,ICeD,GAAAJ,MAAAK,EAAA,EAAAA,EAAAC,UAAAR,OAAAO,IAAAL,EAAAK,EAAA,GAAAC,UAAAD,EAET,OAAOhD,MAAK0C,aAAaC,IAG1BrB,EAAAf,UAAA2C,cAAA,SAAcpB,GAEb,MAAO9B,MAAKuC,WAAWT,EAAOf,SAGrBO,EAAAf,UAAA4C,QAAV,WAEC,GAAIhB,GAAInC,IACR,OAAOmC,GAAEV,OAAO2B,OAAO,SAAAzB,GAAM,MAAAQ,GAAEkB,YAAY1B,MAG7CL,GA/EQH,EAAAA,WAFRX,QAAA8C,eAAA1C,EAAA,cAAAqB,OAAA,IDiEIrB,EAAAA,WAAkBU","file":"System/Collections/Dictionaries/OrderedStringKeyDictionary.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../Array/Utility', './StringKeyDictionary', '../../Exceptions/ArgumentOutOfRangeException'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var ArrayUtility = require('../Array/Utility');\n    var StringKeyDictionary_1 = require('./StringKeyDictionary');\n    var ArgumentOutOfRangeException_1 = require('../../Exceptions/ArgumentOutOfRangeException');\n    var VOID0 = void 0;\n    var OrderedStringKeyDictionary = (function (_super) {\n        __extends(OrderedStringKeyDictionary, _super);\n        function OrderedStringKeyDictionary() {\n            _super.call(this);\n            this._order = [];\n        }\n        OrderedStringKeyDictionary.prototype.indexOfKey = function (key) {\n            return this._order.indexOf(key, 0);\n        };\n        OrderedStringKeyDictionary.prototype.getValueByIndex = function (index) {\n            return this.getValue(this._order[index]);\n        };\n        OrderedStringKeyDictionary.prototype.setValue = function (key, value, keepIndex) {\n            var _ = this, exists = _.indexOfKey(key) != -1;\n            if (!exists && (value !== VOID0 || keepIndex))\n                _._order.push(key);\n            else if (exists && value === VOID0 && !keepIndex)\n                ArrayUtility.remove(_._order, key);\n            return _super.prototype.setValue.call(this, key, value);\n        };\n        OrderedStringKeyDictionary.prototype.setByIndex = function (index, value) {\n            var _ = this, order = _._order;\n            if (index < 0)\n                throw new ArgumentOutOfRangeException_1.default('index', index, 'Is less than zero.');\n            if (index >= order.length)\n                throw new ArgumentOutOfRangeException_1.default('index', index, 'Is greater than the count.');\n            return _.setValue(order[index], value);\n        };\n        OrderedStringKeyDictionary.prototype.importValues = function (values) {\n            var _ = this;\n            return _.handleUpdate(function () {\n                var changed = false;\n                for (var i = 0; i < values.length; i++) {\n                    if (_.setByIndex(i, values[i]))\n                        changed = true;\n                }\n                return changed;\n            });\n        };\n        OrderedStringKeyDictionary.prototype.setValues = function () {\n            var values = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                values[_i - 0] = arguments[_i];\n            }\n            return this.importValues(values);\n        };\n        OrderedStringKeyDictionary.prototype.removeByIndex = function (index) {\n            return this.setByIndex(index, undefined);\n        };\n        OrderedStringKeyDictionary.prototype.getKeys = function () {\n            var _ = this;\n            return _._order.filter(function (key) { return _.containsKey(key); });\n        };\n        return OrderedStringKeyDictionary;\n    }(StringKeyDictionary_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = OrderedStringKeyDictionary;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as ArrayUtility from '../Array/Utility';\r\nimport StringKeyDictionary from './StringKeyDictionary';\r\nimport ArgumentOutOfRangeException from '../../Exceptions/ArgumentOutOfRangeException'\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport default\r\nclass OrderedStringKeyDictionary<TValue>\r\nextends StringKeyDictionary<TValue> implements IOrderedDictionary<string, TValue>\r\n{\r\n\r\n\t// noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _order:string[] = []; // Maintains indexes.\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tindexOfKey(key:string):number\r\n\t{\r\n\t\treturn this._order.indexOf(key, 0);\r\n\t}\r\n\r\n\tgetValueByIndex(index:number):TValue\r\n\t{\r\n\t\treturn this.getValue(this._order[index]);\r\n\t}\r\n\r\n\t// adding keepIndex allows for clearing a value while still retaining it's index.\r\n\tsetValue(key:string, value:TValue, keepIndex?:boolean):boolean\r\n\t{\r\n\t\tvar _ = this, exists = _.indexOfKey(key)!= -1;\r\n\t\tif(!exists && (value!==VOID0 || keepIndex))\r\n\t\t\t_._order.push(key);\r\n\t\telse if(exists && value===VOID0 && !keepIndex)\r\n\t\t\tArrayUtility.remove(_._order, key);\r\n\r\n\t\treturn super.setValue(key, value);\r\n\t}\r\n\r\n\tsetByIndex(index:number, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, order = _._order;\r\n\t\tif(index<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is less than zero.');\r\n\t\tif(index>=order.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is greater than the count.');\r\n\t\treturn _.setValue(order[index], value);\r\n\t}\r\n\r\n\t// importValues([x,y,z]);\r\n\timportValues(values:TValue[]):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let i = 0; i<values.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_.setByIndex(i, values[i]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t// setValues(x,y,z);\r\n\tsetValues(...values:TValue[]):boolean\r\n\t{\r\n\t\treturn this.importValues(values);\r\n\t}\r\n\r\n\tremoveByIndex(index:number):boolean\r\n\t{\r\n\t\treturn this.setByIndex(index, undefined);\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _._order.filter(key=> _.containsKey(key));\r\n\t}\r\n\r\n}\r\n"]}