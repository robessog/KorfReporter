{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.js","System/Collections/Dictionaries/Dictionary.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","callHasOwnProperty","target","key","call","computeHashCode","obj","VOID0","toString","Types_1","FUNCTION","Compare_1","Functions_1","DictionaryBase_1","EnumeratorBase_1","LinkedNodeList_1","HashEntry","value","previous","next","Dictionary","_super","_compareSelector","Identity","_count","_entries","_buckets","setKV","allowOverwrite","entry","_","buckets","entries","comparer","compareKey","hash","equal","areEqual","array","i","length","old","Error","changed","removeNode","splice","replace","_onValueUpdate","push","addNode","addByKeyValue","getValue","_i","array_1","setValue","containsKey","len","clear","count","getCount","getEnumerator","currentEntry","first","yielder","result","yieldReturn","yieldBreak","getKeys","e","getValues","defineProperty"],"mappings":"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","file":"System/Collections/Dictionaries/Dictionary.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../../Compare', '../../Types', '../../Functions', './DictionaryBase', '../Enumeration/EnumeratorBase', '../LinkedNodeList'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Compare_1 = require('../../Compare');\n    var Types_1 = require('../../Types');\n    var Functions_1 = require('../../Functions');\n    var DictionaryBase_1 = require('./DictionaryBase');\n    var EnumeratorBase_1 = require('../Enumeration/EnumeratorBase');\n    var LinkedNodeList_1 = require('../LinkedNodeList');\n    var VOID0 = void 0;\n    var HashEntry = (function () {\n        function HashEntry(key, value, previous, next) {\n            this.key = key;\n            this.value = value;\n            this.previous = previous;\n            this.next = next;\n        }\n        return HashEntry;\n    }());\n    function callHasOwnProperty(target, key) {\n        return Object.prototype.hasOwnProperty.call(target, key);\n    }\n    function computeHashCode(obj) {\n        if (obj === null)\n            return \"null\";\n        if (obj === VOID0)\n            return \"undefined\";\n        return (typeof obj.toString === Types_1.default.FUNCTION)\n            ? obj.toString()\n            : Object.prototype.toString.call(obj);\n    }\n    var Dictionary = (function (_super) {\n        __extends(Dictionary, _super);\n        function Dictionary(_compareSelector) {\n            if (_compareSelector === void 0) { _compareSelector = Functions_1.default.Identity; }\n            _super.call(this);\n            this._compareSelector = _compareSelector;\n            this._count = 0;\n            this._entries = new LinkedNodeList_1.default();\n            this._buckets = {};\n        }\n        Dictionary.prototype.setKV = function (key, value, allowOverwrite) {\n            var _ = this, buckets = _._buckets, entries = _._entries, comparer = _._compareSelector, compareKey = comparer(key), hash = computeHashCode(compareKey), entry;\n            if (callHasOwnProperty(buckets, hash)) {\n                var equal = Compare_1.areEqual;\n                var array = buckets[hash];\n                for (var i = 0; i < array.length; i++) {\n                    var old = array[i];\n                    if (comparer(old.key) === compareKey) {\n                        if (!allowOverwrite)\n                            throw new Error(\"Key already exists.\");\n                        var changed = !equal(old.value, value);\n                        if (changed) {\n                            if (value === VOID0) {\n                                entries.removeNode(old);\n                                array.splice(i, 1);\n                                if (!array.length)\n                                    delete buckets[hash];\n                                --_._count;\n                            }\n                            else {\n                                entry = new HashEntry(key, value);\n                                entries.replace(old, entry);\n                                array[i] = entry;\n                            }\n                            _._onValueUpdate(key, value, old.value);\n                        }\n                        return changed;\n                    }\n                }\n                array.push(entry = entry || new HashEntry(key, value));\n            }\n            else {\n                if (value === VOID0) {\n                    if (allowOverwrite)\n                        return false;\n                    else\n                        throw new Error(\"Cannot add 'undefined' value.\");\n                }\n                buckets[hash] = [entry = new HashEntry(key, value)];\n            }\n            ++_._count;\n            entries.addNode(entry);\n            _._onValueUpdate(key, value, undefined);\n            return true;\n        };\n        Dictionary.prototype.addByKeyValue = function (key, value) {\n            this.setKV(key, value, false);\n        };\n        Dictionary.prototype.getValue = function (key) {\n            var buckets = this._buckets, comparer = this._compareSelector;\n            var compareKey = comparer(key);\n            var hash = computeHashCode(compareKey);\n            if (!callHasOwnProperty(buckets, hash))\n                return undefined;\n            var array = buckets[hash];\n            for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n                var entry = array_1[_i];\n                if (comparer(entry.key) === compareKey)\n                    return entry.value;\n            }\n            return undefined;\n        };\n        Dictionary.prototype.setValue = function (key, value) {\n            return this.setKV(key, value, true);\n        };\n        Dictionary.prototype.containsKey = function (key) {\n            var _ = this, buckets = _._buckets, comparer = _._compareSelector;\n            var compareKey = comparer(key);\n            var hash = computeHashCode(compareKey);\n            if (!callHasOwnProperty(buckets, hash))\n                return false;\n            var array = buckets[hash];\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (comparer(array[i].key) === compareKey)\n                    return true;\n            }\n            return false;\n        };\n        Dictionary.prototype.clear = function () {\n            var _ = this, buckets = _._buckets, count = _super.prototype.clear.call(this);\n            _._count = 0;\n            for (var key in buckets) {\n                if (buckets.hasOwnProperty(key))\n                    delete buckets[key];\n            }\n            _._entries.clear();\n            return count;\n        };\n        Dictionary.prototype.getCount = function () {\n            return this._count;\n        };\n        Dictionary.prototype.getEnumerator = function () {\n            var _ = this, currentEntry;\n            return new EnumeratorBase_1.default(function () { currentEntry = _._entries.first; }, function (yielder) {\n                if (currentEntry != null) {\n                    var result = { key: currentEntry.key, value: currentEntry.value };\n                    currentEntry = currentEntry.next;\n                    return yielder.yieldReturn(result);\n                }\n                return yielder.yieldBreak();\n            });\n        };\n        Dictionary.prototype.getKeys = function () {\n            var _ = this, result = [];\n            var e = _._entries.first;\n            while (e) {\n                result.push(e.key);\n                e = e.next;\n            }\n            return result;\n        };\n        Dictionary.prototype.getValues = function () {\n            var _ = this, result = [];\n            var e = _._entries.first;\n            while (e) {\n                result.push(e.value);\n                e = e.next;\n            }\n            return result;\n        };\n        return Dictionary;\n    }(DictionaryBase_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Dictionary;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n///<reference path=\"../ILinkedListNode.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual} from '../../Compare';\r\nimport Type from '../../Types';\r\nimport Functions from '../../Functions';\r\nimport DictionaryBase from './DictionaryBase';\r\nimport EnumeratorBase from '../Enumeration/EnumeratorBase';\r\nimport LinkedNodeList from '../LinkedNodeList';\r\n\r\nconst VOID0:any = void 0;\r\n\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\nimplements ILinkedNode<HashEntry<TKey, TValue>>\r\n{\r\n\tconstructor(\r\n\t\tpublic key?:TKey,\r\n\t\tpublic value?:TValue,\r\n\t\tpublic previous?:HashEntry<TKey, TValue>,\r\n\t\tpublic next?:HashEntry<TKey, TValue>)\r\n\t{ }\r\n}\r\n\r\n// static utility methods\r\nfunction callHasOwnProperty(target:any, key:string)\r\n{\r\n\treturn Object.prototype.hasOwnProperty.call(target, key);\r\n}\r\n\r\nfunction computeHashCode(obj:any):string\r\n{\r\n\tif(obj===null) return \"null\";\r\n\tif(obj===VOID0) return \"undefined\";\r\n\r\n\treturn (typeof obj.toString===Type.FUNCTION)\r\n\t\t? obj.toString()\r\n\t\t: Object.prototype.toString.call(obj);\r\n}\r\n\r\n\r\nexport default\r\nclass Dictionary<TKey, TValue> extends DictionaryBase<TKey, TValue>\r\n{\r\n\tprivate _count:number = 0;\r\n\tprivate _entries = new LinkedNodeList<HashEntry<TKey, TValue>>();\r\n\tprivate _buckets:IMap<HashEntry<TKey, TValue>[]> = {};\r\n\r\n\tconstructor(private _compareSelector:Selector<TKey,any> = Functions.Identity)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\r\n\tprivate setKV(key:TKey, value:TValue, allowOverwrite:boolean):boolean\r\n\t{\r\n\t\tvar _           = this,\r\n\t\t    buckets     = _._buckets,\r\n\t\t    entries     = _._entries,\r\n\t\t    comparer    = _._compareSelector,\r\n\r\n\t\t    compareKey  = comparer(key),\r\n\t\t    hash:string = computeHashCode(compareKey), // TODO: need to find a way to guarantee hashing is a string?\r\n\r\n\t\t    entry:HashEntry<TKey, TValue>;\r\n\r\n\t\tif(callHasOwnProperty(buckets, hash))\r\n\t\t{\r\n\t\t\tvar equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\t\tvar array = buckets[hash];\r\n\t\t\tfor(let i = 0; i<array.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar old = array[i];\r\n\t\t\t\tif(comparer(old.key)===compareKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!allowOverwrite)\r\n\t\t\t\t\t\tthrow new Error(\"Key already exists.\");\r\n\r\n\t\t\t\t\tvar changed = !equal(old.value, value);\r\n\t\t\t\t\tif(changed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(value===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tentries.removeNode(old);\r\n\t\t\t\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t\t\t\tif(!array.length)\r\n\t\t\t\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\t\t\t--_._count;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tentry = new HashEntry<TKey, TValue>(key, value);\r\n\t\t\t\t\t\t\tentries.replace(old, entry);\r\n\t\t\t\t\t\t\tarray[i] = entry;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_._onValueUpdate(key, value, old.value);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn changed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tarray.push(entry = entry || new HashEntry<TKey, TValue>(key, value));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif(allowOverwrite)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(\"Cannot add 'undefined' value.\");\r\n\t\t\t}\r\n\t\t\tbuckets[hash] = [entry = new HashEntry<TKey, TValue>(key, value)];\r\n\t\t}\r\n\t\t++_._count;\r\n\t\tentries.addNode(entry);\r\n\t\t_._onValueUpdate(key, value, undefined);\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddByKeyValue(key:TKey, value:TValue):void\r\n\t{\r\n\t\tthis.setKV(key, value, false);\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue\r\n\t{\r\n\t\tvar buckets = this._buckets, comparer = this._compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey);\r\n\t\tif(!callHasOwnProperty(buckets, hash)) return undefined;\r\n\r\n\t\tvar array = buckets[hash];\r\n\t\tfor(let entry of array)\r\n\t\t{\r\n\t\t\tif(comparer(entry.key)===compareKey) return entry.value;\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tsetValue(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\treturn this.setKV(key, value, true);\r\n\t}\r\n\r\n\tcontainsKey(key:TKey):boolean\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, comparer = _._compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey);\r\n\t\tif(!callHasOwnProperty(buckets, hash)) return false;\r\n\r\n\t\tvar array = buckets[hash];\r\n\t\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t\t{\r\n\t\t\tif(comparer(array[i].key)===compareKey) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, count = super.clear(); // Remove one by one to allow for signaling.\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\t_._count = 0;\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t\tdelete buckets[key];\r\n\t\t}\r\n\r\n\t\t_._entries.clear();\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tvar _ = this, currentEntry:HashEntry<TKey, TValue>;\r\n\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() => { currentEntry = _._entries.first; },\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry!=null)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tvar _ = this, result:TKey[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.key);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.value);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n"]}