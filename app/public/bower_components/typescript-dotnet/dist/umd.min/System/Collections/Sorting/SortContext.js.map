{"version":3,"sources":["System/Collections/Sorting/SortContext.js","System/Collections/Sorting/SortContext.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Values","SortContext","_next","_comparer","_order","compare","this","Object","defineProperty","prototype","get","enumerable","configurable","generateSortedIndexes","source","_this","result","map","s","i","sort","a","b","_","d","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,iBAAkBN,IAErD,SAAUI,EAASF,GCFtB,YAEA,IAAYM,GAAMJ,EAAM,iBAIxBK,EAAA,WAWC,QAAAA,GACWC,EACAC,EACAC,GADV,SAAAD,IAAAA,EAAoCH,EAAOK,SAC3C,SAAAD,IAAAA,EAAA,GAFUE,KAAAJ,MAAAA,EACAI,KAAAH,UAAAA,EACAG,KAAAF,OAAAA,EA+BZ,MArCCG,QAAAC,eAAIP,EAAAQ,UAAA,SDAOC,ICAX,WACE,MAAOJ,MAAKF,QDAHO,YAAY,EACZC,cAAc,ICczBX,EAAAQ,UAAAI,sBAAA,SAAsBC,GAAtB,GAAAC,GAAAT,IAEC,IAAW,MAARQ,EAAc,QACjB,IAAIE,GAAkBF,EAAOG,IAAI,SAACC,EAAGC,GAAI,MAAAA,IAEzC,OADAH,GAAOI,KAAK,SAACC,EAAGC,GAAM,MAAAP,GAAKV,QAAQS,EAAOO,GAAIP,EAAOQ,MAC9CN,GASRf,EAAAQ,UAAAJ,QAAA,SAAQgB,EAAKC,GAEZ,GAAIC,GAAIjB,KACJkB,EAAID,EAAEpB,UAAUkB,EAAGC,EACvB,OAAM,IAAHE,GAAQD,EAAErB,MAAcqB,EAAErB,MAAMG,QAAQgB,EAAGC,GACvCC,EAAEnB,OAAOoB,GAElBvB,IA7CAM,QAAAC,eAAAd,EAAA,cAAA+B,OAAA,ID8BI/B,EAAAA,WAAkBO","file":"System/Collections/Sorting/SortContext.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../../Compare'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Values = require('../../Compare');\n    var SortContext = (function () {\n        function SortContext(_next, _comparer, _order) {\n            if (_comparer === void 0) { _comparer = Values.compare; }\n            if (_order === void 0) { _order = 1; }\n            this._next = _next;\n            this._comparer = _comparer;\n            this._order = _order;\n        }\n        Object.defineProperty(SortContext.prototype, \"order\", {\n            get: function () { return this._order; },\n            enumerable: true,\n            configurable: true\n        });\n        SortContext.prototype.generateSortedIndexes = function (source) {\n            var _this = this;\n            if (source == null)\n                return [];\n            var result = source.map(function (s, i) { return i; });\n            result.sort(function (a, b) { return _this.compare(source[a], source[b]); });\n            return result;\n        };\n        SortContext.prototype.compare = function (a, b) {\n            var _ = this;\n            var d = _._comparer(a, b);\n            if (d == 0 && _._next)\n                return _._next.compare(a, b);\n            return _._order * d;\n        };\n        return SortContext;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = SortContext;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n///<reference path=\"../../IComparer.d.ts\"/>\r\n///<reference path=\"../Array/IArray.d.ts\"/>\r\n///<reference path=\"Order.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as Values from '../../Compare'\r\nimport Integer from '../../Integer'\r\nimport forEach from \"../Enumeration/forEach\"\r\n\r\nexport default\r\nclass SortContext<T> implements IComparer<T>\r\n{\r\n\r\n\t/**\r\n\t * Direction of the comparison.\r\n\t * @type {Order}\r\n\t */\r\n\tget order():Order\r\n\t{ return this._order; }\r\n\r\n\tconstructor(\r\n\t\tprotected _next:IComparer<T>,\r\n\t\tprotected _comparer:Comparison<T> = Values.compare,\r\n\t\tprotected _order:Order = Order.Ascending)\r\n\t{\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Generates an array of indexes from the source in order of their expected sort without modifying the source.\r\n\t * @param source\r\n\t * @returns {number[]}\r\n\t */\r\n\tgenerateSortedIndexes(source:T[]):number[]\r\n\t{\r\n\t\tif(source==null) return [];\r\n\t\tvar result:number[] = source.map((s, i)=>i);\r\n\t\tresult.sort((a, b) => this.compare(source[a], source[b]));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares two values based upon SortContext parameters.\r\n\t * @param a\r\n\t * @param b\r\n\t * @returns {any}\r\n\t */\r\n\tcompare(a:T, b:T):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar d = _._comparer(a, b);\r\n\t\tif(d==0 && _._next) return _._next.compare(a, b);\r\n\t\treturn _._order*d;\r\n\t}\r\n}\r\n"]}