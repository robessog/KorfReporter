{"version":3,"sources":["System/Uri/Uri.js","System/Uri/Uri.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","copyUri","from","to","field","i","Fields","value","getScheme","scheme","s","Types_1","isString","Scheme_1","Utility_1","trim","toLowerCase","replace","EMPTY","isNaN","ArgumentOutOfRangeException_1","isNumber","getAuthority","uri","host","userInfo","ArgumentException_1","port","result","AT","SLASH2","formatQuery","query","indexOf","QM","formatFragment","fragment","HASH","getPathAndQuery","path","SLASH","uriToString","authority","pathAndQuery","tryParse","url","out","substring","c","test","ex","parseInt","QueryParams","Uri","_","this","encode","Object","freeze","queryParams","parseToMap","absoluteUri","getAbsoluteUri","baseUri","prototype","equals","other","toString","defaults","u","parse","throwIfInvalid","copyOf","map","copyTo","updateQuery","toMap","defineProperty","get","match","enumerable","configurable"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,qBAAsB,kBAAmB,gBAAiB,kCAAmC,6CAA8CN,IAE1L,SAAUI,EAASF,GCHtB,YA4QA,SAAAM,GAAiBC,EAAWC,GAE3B,GAAWC,GAAPC,EAAI,CAER,KADIF,IAAIA,MACFC,EAAQE,EAAOD,MACrB,CACC,GAAIE,GAAcL,EAAME,EACrBG,KAAaJ,EAAIC,GAASG,GAE9B,MAAOJ,GAKR,QAAAK,GAAmBC,GAElB,GAAIC,GAAQD,CACZ,IAAGE,EAAAA,WAAKC,SAASF,GACjB,CACC,IAAIA,EAAG,MAIP,IAFAA,EAAIG,EAAAA,WAAeC,EAAAC,KAAKL,GAAGM,cAAcC,QAAQ,kBAAmBC,IAEjEC,MAAMT,GACR,KAAM,IAAIU,GAAAA,WAA4B,SAAUX,EAAQ,mBAG1D,GAAGE,EAAAA,WAAKU,SAASX,GAAG,GACpB,CAEC,GADAA,EAAIG,EAAAA,WAAkBH,IAClBA,EACH,KAAM,IAAIU,GAAAA,WAA4B,SAAUX,EAAQ,kBAEzD,OAAOC,IAMT,QAAAY,GAAsBC,GAGrB,IAAIA,EAAIC,KACR,CACC,GAAGD,EAAIE,SACN,KAAM,IAAIC,GAAAA,WAAkB,OAAQ,kDAErC,IAAGf,EAAAA,WAAKU,SAASE,EAAII,MAAM,GAC1B,KAAM,IAAID,GAAAA,WAAkB,OAAQ,gDAOtC,GAAIE,GAASL,EAAIC,MAAQN,CASzB,OAPGU,KAECL,EAAIE,WAAUG,EAASL,EAAIE,SAAWI,EAAKD,GAC1CT,MAAMI,EAAII,QAAOC,GAAU,IAAML,EAAII,MACzCC,EAASE,EAASF,GAGZA,EAGR,QAAAG,GAAqBC,GAEpB,MAAOA,KAA+B,IAApBA,EAAMC,QAAQC,GAAWA,EAAKhB,GAASc,EAG1D,QAAAG,GAAwBC,GAEvB,MAAOA,KAAuC,IAAzBA,EAASH,QAAQI,GAAaA,EAAOnB,GAASkB,EAGpE,QAAAE,GAAyBf,GAGxB,GAAIgB,GAAOhB,EAAIgB,KACdP,EAAQT,EAAIS,KAEb,OAAOd,IACHqB,IAAgC,IAAtBA,EAAKN,QAAQO,GAAcA,EAAQtB,GAASqB,GAASrB,IAC/Da,EAAYC,IAAUd,GAI3B,QAAAuB,GAAqBlB,GAKpB,GAAId,GAASD,EAAUe,EAAId,QAC1BiC,EAAYpB,EAAaC,GACzBoB,EAAeL,EAAgBf,GAC/Ba,EAAWD,EAAeZ,EAAIa,SAE/B,OAAOlB,IACFT,GAAWA,EAAS,KAASS,IAC9BwB,GAAaxB,IACbyB,GAAgBzB,IAChBkB,GAAYlB,GAKjB,QAAA0B,GAAkBC,EAAYC,GAE7B,IAAID,EACH,MAAO,IAAInB,GAAAA,WAAkB,MAAO,oBAOrC,IAAIrB,GAAUuB,IAoBd,IAjBAvB,EAAIwC,EAAIZ,QAAQI,GACT,IAAJhC,IAEFuB,EAAOQ,SAAWS,EAAIE,UAAU1C,GAChCwC,EAAMA,EAAIE,UAAU,EAAG1C,IAIxBA,EAAIwC,EAAIZ,QAAQC,GACT,IAAJ7B,IAEFuB,EAAOI,MAAQa,EAAIE,UAAU1C,GAC7BwC,EAAMA,EAAIE,UAAU,EAAG1C,IAIxBA,EAAIwC,EAAIZ,QAAQH,GACT,IAAJzB,EACH,CACC,GAAII,GAASK,EAAAC,KAAK8B,EAAIE,UAAU,EAAG1C,IAAK2C,EAAI,IAC5C,KAAIA,EAAEC,KAAKxC,GACV,MAAO,IAAIiB,GAAAA,WAAkB,MAAO,kCAErCjB,GAASK,EAAAC,KAAKN,EAAOQ,QAAQ+B,EAAG9B,GAChC,KAECU,EAAOnB,OAASD,EAAUC,IAAWX,OAEtC,MAAMoD,GAEL,MAAOA,GAGRL,EAAMA,EAAIE,UAAU1C,EAAI,GAqBzB,GAjBAA,EAAIwC,EAAIZ,QAAQO,GACT,IAAJnC,IAEFuB,EAAOW,KAAOM,EAAIE,UAAU1C,IAAMP,OAClC+C,EAAMA,EAAIE,UAAU,EAAG1C,IAIxBA,EAAIwC,EAAIZ,QAAQJ,GACT,IAAJxB,IAEFuB,EAAOH,SAAWoB,EAAIE,UAAU,EAAG1C,IAAMP,OACzC+C,EAAMA,EAAIE,UAAU1C,EAAI,IAIzBA,EAAIwC,EAAIZ,QAAQ,KACT,IAAJ5B,EACH,CACC,GAAIsB,GAAOwB,SAASrC,EAAAC,KAAK8B,EAAIE,UAAU1C,EAAI,IAC3C,IAAGc,MAAMQ,GACR,MAAO,IAAID,GAAAA,WAAkB,MAAO,oBAErCE,GAAOD,KAAOA,EACdkB,EAAMA,EAAIE,UAAU,EAAG1C,GAUxB,MAPAwC,GAAM/B,EAAAC,KAAK8B,GACRA,IACFjB,EAAOJ,KAAOqB,GAEfC,EAAI7C,EAAQ2B,IAGL,KA1cR,GAAAjB,GAAAd,EAAiB,YACLuD,EAAWvD,EAAM,sBAC7BiB,EAAAjB,EAAmB,mBACnBgB,EAAAhB,EAAsB,iBAEtB6B,EAAA7B,EAA8B,mCAE9BuB,EAAAvB,EAAwC,6CAQxCwD,EAAA,WAsBC,QAAAA,GACC5C,EACAgB,EACAD,EACAG,EACAY,EACAP,EACAI,GAEA,GAAIkB,GAAIC,IACRD,GAAE7C,OAASD,EAAUC,IAAW,KAChC6C,EAAE7B,SAAWA,GAAY,KACzB6B,EAAE9B,KAAOA,GAAQ,KACjB8B,EAAE3B,KAAOA,GAAQ,KAEjB2B,EAAEZ,UAAYY,EAAEhC,gBAAkB,KAElCgC,EAAEf,KAAOA,GAAQ,KAGb5B,EAAAA,WAAKC,SAASoB,KACjBA,EAAQoB,EAAYI,OAAyDxB,IAE9EsB,EAAEtB,MAAQD,EAAoBC,IAAU,KACxCyB,OAAOC,OAAOJ,EAAEK,YACbL,EAAEtB,MACFoB,EAAYQ,WAAWN,EAAEtB,WAG5BsB,EAAEX,aAAeW,EAAEhB,mBAAqB,KAExCgB,EAAElB,SAAWD,EAAeC,IAAa,KAGzCkB,EAAEO,YAAcP,EAAEQ,iBAElBR,EAAES,QAAUT,EAAEO,YAAY5C,QAAQ,SAAS,IAG3CwC,OAAOC,OAAOJ,GAiLhB,MAzKCD,GAAAW,UAAAC,OAAA,SAAOC,GAEN,MAAOX,QAAOW,GAASX,KAAKM,aAAaR,EAAIc,SAASD,IAUhDb,EAAAnD,KAAP,SAAYqB,EAAiB6C,GAE5B,GAAIC,IAAM9C,GAAOZ,EAAAA,WAAKC,SAASW,GAC5B8B,EAAIiB,MAAc/C,GAAaA,CAElC,OAAO,IAAI8B,GACVgB,EAAE5D,QAAU2D,GAAYA,EAAS3D,OACjC4D,EAAE5C,UAAY2C,GAAYA,EAAS3C,SACnC4C,EAAE7C,MAAQ4C,GAAYA,EAAS5C,KAC/BL,MAAMkD,EAAE1C,MAAQyC,GAAYA,EAASzC,KAAO0C,EAAE1C,KAC9C0C,EAAE9B,MAAQ6B,GAAYA,EAAS7B,KAC/B8B,EAAErC,OAASoC,GAAYA,EAASpC,MAChCqC,EAAEjC,UAAYgC,GAAYA,EAAShC,WAU9BiB,EAAAiB,MAAP,SAAazB,EAAY0B,GAAA,SAAAA,IAAAA,GAAA,EAExB,IAAI3C,GAAc,KACdsB,EAAKN,EAASC,EAAK,SAACC,GAAQlB,EAASkB,GACzC,IAAGyB,GAAkBrB,EAAI,KAAMA,EAC/B,OAAOtB,IASDyB,EAAAT,SAAP,SAAgBC,EAAYC,GAE3B,OAAQF,EAASC,EAAKC,IAGhBO,EAAAmB,OAAP,SAAcC,GAEb,MAAOxE,GAAQwE,IAGhBpB,EAAAW,UAAAU,OAAA,SAAOD,GAEN,MAAOxE,GAAQsD,KAAMkB,IAGtBpB,EAAAW,UAAAW,YAAA,SAAY3C,GAEX,GAAIyC,GAAMlB,KAAKqB,OAEf,OADAH,GAAIzC,MAAaA,EACVqB,EAAInD,KAAKuE,IAOPpB,EAAAW,UAAAF,eAAV,WAEC,MAAOrB,GAAYc,OAMVF,EAAAW,UAAA1C,aAAV,WAEC,MAAOA,GAAaiC,OAMXF,EAAAW,UAAA1B,gBAAV,WAEC,MAAOA,GAAgBiB,OAgCxBE,OAAAoB,eAAIxB,EAAAW,UAAA,gBDzIOc,ICyIX,WAEC,MAAOvB,MAAKhB,KAAKwC,MAAM,8BDxIbC,YAAY,EACZC,cAAc,IC8IzB5B,EAAAW,UAAAY,MAAA,WAEC,MAAOrB,MAAKmB,YAMbrB,EAAAW,UAAAG,SAAA,WAEC,MAAOZ,MAAKM,aAQNR,EAAAc,SAAP,SAAgB5C,GAEf,MAAOA,aAAe8B,GACb9B,EAAKsC,YACXpB,EAAYlB,IAQT8B,EAAA/B,aAAP,SAAoBC,GAEnB,MAAOD,GAAaC,IAItB8B,IA9OAI,QAAAoB,eAAAlF,EAAA,cAAAY,OAAA,ID+EIZ,EAAAA,WAAkB0D,ECiKtB,SAAY/C,GACXA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,SAAA,GAAA,YAPWX,EAAAW,SAAAX,EAAAW,WAAZ,IAAYA,GAAAX,EAAAW,MASZmD,QAAOC,OAAOpD,EAcd,IAAMkC,GAAQ,IAAKV,EAAS,KAAMI,EAAK,IAAKG,EAAO,IAAKnB,EAAQ,GAAIW,EAAK","file":"System/Uri/Uri.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based on: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../Types', '../Uri/QueryParams', '../Text/Utility', '../Uri/Scheme', '../Exceptions/ArgumentException', '../Exceptions/ArgumentOutOfRangeException'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Types_1 = require('../Types');\n    var QueryParams = require('../Uri/QueryParams');\n    var Utility_1 = require('../Text/Utility');\n    var Scheme_1 = require('../Uri/Scheme');\n    var ArgumentException_1 = require('../Exceptions/ArgumentException');\n    var ArgumentOutOfRangeException_1 = require('../Exceptions/ArgumentOutOfRangeException');\n    var Uri = (function () {\n        function Uri(scheme, userInfo, host, port, path, query, fragment) {\n            var _ = this;\n            _.scheme = getScheme(scheme) || null;\n            _.userInfo = userInfo || null;\n            _.host = host || null;\n            _.port = port || null;\n            _.authority = _.getAuthority() || null;\n            _.path = path || null;\n            if (!Types_1.default.isString(query))\n                query = QueryParams.encode(query);\n            _.query = formatQuery(query) || null;\n            Object.freeze(_.queryParams\n                = _.query\n                    ? QueryParams.parseToMap(_.query)\n                    : {});\n            _.pathAndQuery = _.getPathAndQuery() || null;\n            _.fragment = formatFragment(fragment) || null;\n            _.absoluteUri = _.getAbsoluteUri();\n            _.baseUri = _.absoluteUri.replace(/[?#].*/, '');\n            Object.freeze(_);\n        }\n        Uri.prototype.equals = function (other) {\n            return this === other || this.absoluteUri == Uri.toString(other);\n        };\n        Uri.from = function (uri, defaults) {\n            var u = (!uri || Types_1.default.isString(uri))\n                ? Uri.parse(uri) : uri;\n            return new Uri(u.scheme || defaults && defaults.scheme, u.userInfo || defaults && defaults.userInfo, u.host || defaults && defaults.host, isNaN(u.port) ? defaults && defaults.port : u.port, u.path || defaults && defaults.path, u.query || defaults && defaults.query, u.fragment || defaults && defaults.fragment);\n        };\n        Uri.parse = function (url, throwIfInvalid) {\n            if (throwIfInvalid === void 0) { throwIfInvalid = true; }\n            var result = null;\n            var ex = tryParse(url, function (out) { result = out; });\n            if (throwIfInvalid && ex)\n                throw ex;\n            return result;\n        };\n        Uri.tryParse = function (url, out) {\n            return !tryParse(url, out);\n        };\n        Uri.copyOf = function (map) {\n            return copyUri(map);\n        };\n        Uri.prototype.copyTo = function (map) {\n            return copyUri(this, map);\n        };\n        Uri.prototype.updateQuery = function (query) {\n            var map = this.toMap();\n            map.query = query;\n            return Uri.from(map);\n        };\n        Uri.prototype.getAbsoluteUri = function () {\n            return uriToString(this);\n        };\n        Uri.prototype.getAuthority = function () {\n            return getAuthority(this);\n        };\n        Uri.prototype.getPathAndQuery = function () {\n            return getPathAndQuery(this);\n        };\n        Object.defineProperty(Uri.prototype, \"pathSegments\", {\n            get: function () {\n                return this.path.match(/^[/]|[^/]*[/]|[^/]+$/g);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Uri.prototype.toMap = function () {\n            return this.copyTo({});\n        };\n        Uri.prototype.toString = function () {\n            return this.absoluteUri;\n        };\n        Uri.toString = function (uri) {\n            return uri instanceof Uri\n                ? uri.absoluteUri\n                : uriToString(uri);\n        };\n        Uri.getAuthority = function (uri) {\n            return getAuthority(uri);\n        };\n        return Uri;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Uri;\n    (function (Fields) {\n        Fields[Fields[\"scheme\"] = 0] = \"scheme\";\n        Fields[Fields[\"userInfo\"] = 1] = \"userInfo\";\n        Fields[Fields[\"host\"] = 2] = \"host\";\n        Fields[Fields[\"port\"] = 3] = \"port\";\n        Fields[Fields[\"path\"] = 4] = \"path\";\n        Fields[Fields[\"query\"] = 5] = \"query\";\n        Fields[Fields[\"fragment\"] = 6] = \"fragment\";\n    })(exports.Fields || (exports.Fields = {}));\n    var Fields = exports.Fields;\n    Object.freeze(Fields);\n    function copyUri(from, to) {\n        var i = 0, field;\n        if (!to)\n            to = {};\n        while (field = Fields[i++]) {\n            var value = from[field];\n            if (value)\n                to[field] = value;\n        }\n        return to;\n    }\n    var SLASH = '/', SLASH2 = '//', QM = '?', HASH = '#', EMPTY = '', AT = '@';\n    function getScheme(scheme) {\n        var s = scheme;\n        if (Types_1.default.isString(s)) {\n            if (!s)\n                return undefined;\n            s = Scheme_1.default[Utility_1.trim(s).toLowerCase().replace(/[^a-z0-9+.-]+$/g, EMPTY)];\n            if (isNaN(s))\n                throw new ArgumentOutOfRangeException_1.default('scheme', scheme, 'Invalid scheme.');\n        }\n        if (Types_1.default.isNumber(s, false)) {\n            s = Scheme_1.default[s];\n            if (!s)\n                throw new ArgumentOutOfRangeException_1.default('scheme', scheme, 'Invalid scheme.');\n            return s;\n        }\n        return undefined;\n    }\n    function getAuthority(uri) {\n        if (!uri.host) {\n            if (uri.userInfo)\n                throw new ArgumentException_1.default('host', 'Cannot include user info when there is no host.');\n            if (Types_1.default.isNumber(uri.port, false))\n                throw new ArgumentException_1.default('host', 'Cannot include a port when there is no host.');\n        }\n        var result = uri.host || EMPTY;\n        if (result) {\n            if (uri.userInfo)\n                result = uri.userInfo + AT + result;\n            if (!isNaN(uri.port))\n                result += ':' + uri.port;\n            result = SLASH2 + result;\n        }\n        return result;\n    }\n    function formatQuery(query) {\n        return query && ((query.indexOf(QM) == -1 ? QM : EMPTY) + query);\n    }\n    function formatFragment(fragment) {\n        return fragment && ((fragment.indexOf(HASH) == -1 ? HASH : EMPTY) + fragment);\n    }\n    function getPathAndQuery(uri) {\n        var path = uri.path, query = uri.query;\n        return EMPTY\n            + (path && ((path.indexOf(SLASH) == -1 ? SLASH : EMPTY) + path) || EMPTY)\n            + (formatQuery(query) || EMPTY);\n    }\n    function uriToString(uri) {\n        var scheme = getScheme(uri.scheme), authority = getAuthority(uri), pathAndQuery = getPathAndQuery(uri), fragment = formatFragment(uri.fragment);\n        return EMPTY\n            + ((scheme && (scheme + ':')) || EMPTY)\n            + (authority || EMPTY)\n            + (pathAndQuery || EMPTY)\n            + (fragment || EMPTY);\n    }\n    function tryParse(url, out) {\n        if (!url)\n            return new ArgumentException_1.default('url', 'Nothing to parse.');\n        var i, result = {};\n        i = url.indexOf(HASH);\n        if (i != -1) {\n            result.fragment = url.substring(i);\n            url = url.substring(0, i);\n        }\n        i = url.indexOf(QM);\n        if (i != -1) {\n            result.query = url.substring(i);\n            url = url.substring(0, i);\n        }\n        i = url.indexOf(SLASH2);\n        if (i != -1) {\n            var scheme = Utility_1.trim(url.substring(0, i)), c = /:$/;\n            if (!c.test(scheme))\n                return new ArgumentException_1.default('url', 'Scheme was improperly formatted');\n            scheme = Utility_1.trim(scheme.replace(c, EMPTY));\n            try {\n                result.scheme = getScheme(scheme) || undefined;\n            }\n            catch (ex) {\n                return ex;\n            }\n            url = url.substring(i + 2);\n        }\n        i = url.indexOf(SLASH);\n        if (i != -1) {\n            result.path = url.substring(i) || undefined;\n            url = url.substring(0, i);\n        }\n        i = url.indexOf(AT);\n        if (i != -1) {\n            result.userInfo = url.substring(0, i) || undefined;\n            url = url.substring(i + 1);\n        }\n        i = url.indexOf(':');\n        if (i != -1) {\n            var port = parseInt(Utility_1.trim(url.substring(i + 1)));\n            if (isNaN(port))\n                return new ArgumentException_1.default('url', 'Port was invalid.');\n            result.port = port;\n            url = url.substring(0, i);\n        }\n        url = Utility_1.trim(url);\n        if (url)\n            result.host = url;\n        out(copyUri(result));\n        return null;\n    }\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\r\n */\r\n\r\n///<reference path=\"IUri.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport * as QueryParams from '../Uri/QueryParams';\r\nimport {trim} from '../Text/Utility';\r\nimport UriScheme from '../Uri/Scheme';\r\nimport Exception from '../Exception';\r\nimport ArgumentException from '../Exceptions/ArgumentException';\r\nimport ArgumentNullException from '../Exceptions/ArgumentNullException';\r\nimport ArgumentOutOfRangeException from '../Exceptions/ArgumentOutOfRangeException';\r\n\r\n/**\r\n * Provides an read-only model representation of a uniform resource identifier (URI) and easy access to the parts of the URI.\r\n *\r\n * The read-only model (frozen) is easier for debugging than exposing accessors for each property.\r\n * ICloneable&lt;Uri&gt; is not used to prevent unnecessary copying of values that won't change.\r\n */\r\nexport default class Uri implements IUri, IEquatable<IUri>\r\n{\r\n\r\n\tscheme:SchemeValue;\r\n\tuserInfo:string;\r\n\thost:string;\r\n\tport:number;\r\n\tpath:string;\r\n\tquery:string;\r\n\tfragment:string;\r\n\r\n\tqueryParams:IMap<Primitive|Primitive[]>;\r\n\r\n\t/**\r\n\t * @param scheme The user name, password, or other user-specific information associated with the specified URI.\r\n\t * @param userInfo The host component of this instance.\r\n\t * @param host The port number of this URI.\r\n\t * @param port The absolute path of the URI.\r\n\t * @param path The absolute path of the URI.\r\n\t * @param query Any query information included in the specified URI.\r\n\t * @param fragment The escaped URI fragment.\r\n\t */\r\n\tconstructor(\r\n\t\tscheme:UriScheme|SchemeValue,\r\n\t\tuserInfo:string,\r\n\t\thost:string,\r\n\t\tport:number,\r\n\t\tpath:string,\r\n\t\tquery?:QueryParamsConvertible,\r\n\t\tfragment?:string)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.scheme = getScheme(scheme) || null;\r\n\t\t_.userInfo = userInfo || null;\r\n\t\t_.host = host || null;\r\n\t\t_.port = port || null;\r\n\r\n\t\t_.authority = _.getAuthority() || null;\r\n\r\n\t\t_.path = path || null;\r\n\r\n\r\n\t\tif(!Type.isString(query))\r\n\t\t\tquery = QueryParams.encode(<IUriComponentMap|StringKeyValuePair<Primitive>[]>query);\r\n\r\n\t\t_.query = formatQuery(<string>query) || null;\r\n\t\tObject.freeze(_.queryParams\r\n\t\t\t= _.query\r\n\t\t\t? QueryParams.parseToMap(_.query)\r\n\t\t\t: {});\r\n\r\n\t\t_.pathAndQuery = _.getPathAndQuery() || null;\r\n\r\n\t\t_.fragment = formatFragment(fragment) || null;\r\n\r\n\t\t// This should validate the uri...\r\n\t\t_.absoluteUri = _.getAbsoluteUri();\r\n\r\n\t\t_.baseUri = _.absoluteUri.replace(/[?#].*/,'');\r\n\r\n\t\t// Intended to be read-only.  Call .toMap() to get a writable copy.\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\t/**\r\n\t *  Compares the values of another IUri via toString comparison.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:IUri):boolean\r\n\t{\r\n\t\treturn this===other || this.absoluteUri==Uri.toString(other);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Parses or clones values from existing Uri values.\r\n\t * @param uri\r\n\t * @param defaults\r\n\t * @returns {Uri}\r\n\t */\r\n\tstatic from(uri:string|IUri, defaults?:IUri):Uri\r\n\t{\r\n\t\tvar u = (!uri || Type.isString(uri))\r\n\t\t\t? Uri.parse(<string>uri) : <IUri>uri;\r\n\r\n\t\treturn new Uri(\r\n\t\t\tu.scheme || defaults && defaults.scheme,\r\n\t\t\tu.userInfo || defaults && defaults.userInfo,\r\n\t\t\tu.host || defaults && defaults.host,\r\n\t\t\tisNaN(u.port) ? defaults && defaults.port : u.port,\r\n\t\t\tu.path || defaults && defaults.path,\r\n\t\t\tu.query || defaults && defaults.query,\r\n\t\t\tu.fragment || defaults && defaults.fragment\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param throwIfInvalid Defaults to true.\r\n\t * @returns {IUri} Returns a map of the values or *null* if invalid and *throwIfInvalid* is <b>false</b>.\r\n\t */\r\n\tstatic parse(url:string, throwIfInvalid:boolean = true):IUri\r\n\t{\r\n\t\tvar result:IUri = null;\r\n\t\tvar ex = tryParse(url, (out)=> {result = out;});\r\n\t\tif(throwIfInvalid && ex) throw ex;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param out A delegate to capture the value.\r\n\t * @returns {boolean} True if valid.  False if invalid.\r\n\t */\r\n\tstatic tryParse(url:string, out:(result:IUri)=>void):boolean\r\n\t{\r\n\t\treturn !tryParse(url, out); // return type is Exception.\r\n\t}\r\n\r\n\tstatic copyOf(map:IUri):IUri\r\n\t{\r\n\t\treturn copyUri(map);\r\n\t}\r\n\r\n\tcopyTo(map:IUri):IUri\r\n\t{\r\n\t\treturn copyUri(this, map);\r\n\t}\r\n\r\n\tupdateQuery(query:QueryParamsConvertible):Uri\r\n\t{\r\n\t\tvar map = this.toMap();\r\n\t\tmap.query = <any>query;\r\n\t\treturn Uri.from(map);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAbsoluteUri():string\r\n\t{\r\n\t\treturn uriToString(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAuthority():string\r\n\t{\r\n\t\treturn getAuthority(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getPathAndQuery():string\r\n\t{\r\n\t\treturn getPathAndQuery(this);\r\n\t}\r\n\r\n\t/**\r\n\t * The absolute URI.\r\n\t */\r\n\tabsoluteUri:string;\r\n\r\n\t/**\r\n\t * Gets the Domain Name System (DNS) host name or IP address and the port number for a server.\r\n\t */\r\n\tauthority:string;\r\n\r\n\t/**\r\n\t * Gets the path and Query properties separated by a question mark (?).\r\n\t */\r\n\tpathAndQuery:string;\r\n\r\n\t/**\r\n\t * Gets the full path without the query or fragment.\r\n\t */\r\n\tbaseUri:string;\r\n\r\n\t/**\r\n\t * The segments that represent a path.<br/>\r\n\t * https://msdn.microsoft.com/en-us/library/system.uri.segments%28v=vs.110%29.aspx\r\n\t *\r\n\t * <h5><b>Example:</b></h5>\r\n\t * If the path value equals: ```/tree/node/index.html```<br/>\r\n\t * The result will be: ```['/','tree/','node/','index.html']```\r\n\t * @returns {string[]}\r\n\t */\r\n\tget pathSegments():string[]\r\n\t{\r\n\t\treturn this.path.match(/^[/]|[^/]*[/]|[^/]+$/g);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a writable copy.\r\n\t * @returns {IUri}\r\n\t */\r\n\ttoMap():IUri\r\n\t{\r\n\t\treturn this.copyTo({});\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {string} The full absolute uri.\r\n\t */\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.absoluteUri;\r\n\t}\r\n\r\n\t/**\r\n\t * Properly converts an existing URI to a string.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic toString(uri:IUri):string\r\n\t{\r\n\t\treturn uri instanceof Uri\r\n\t\t\t? (<Uri>uri).absoluteUri\r\n\t\t\t: uriToString(uri);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the authority segment of an URI.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getAuthority(uri:IUri):string\r\n\t{\r\n\t\treturn getAuthority(uri);\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport enum Fields {\r\n\tscheme,\r\n\tuserInfo,\r\n\thost,\r\n\tport,\r\n\tpath,\r\n\tquery,\r\n\tfragment\r\n}\r\nObject.freeze(Fields);\r\n\r\nfunction copyUri(from:IUri, to?:IUri)\r\n{\r\n\tvar i = 0, field:string;\r\n\tif(!to) to = {};\r\n\twhile(field = Fields[i++])\r\n\t{\r\n\t\tvar value = (<any>from)[field];\r\n\t\tif(value) (<any>to)[field] = value;\r\n\t}\r\n\treturn to;\r\n}\r\n\r\nconst SLASH = '/', SLASH2 = '//', QM = '?', HASH = '#', EMPTY = '', AT = '@';\r\n\r\nfunction getScheme(scheme:UriScheme|string):SchemeValue\r\n{\r\n\tvar s:any = scheme;\r\n\tif(Type.isString(s))\r\n\t{\r\n\t\tif(!s) return undefined;\r\n\r\n\t\ts = UriScheme[<any>trim(s).toLowerCase().replace(/[^a-z0-9+.-]+$/g, EMPTY)];\r\n\r\n\t\tif(isNaN(s))\r\n\t\t\tthrow new ArgumentOutOfRangeException('scheme', scheme, 'Invalid scheme.');\r\n\t}\r\n\r\n\tif(Type.isNumber(s, false))\r\n\t{\r\n\t\ts = UriScheme[<number>s];\r\n\t\tif(!s)\r\n\t\t\tthrow new ArgumentOutOfRangeException('scheme', scheme, 'Invalid scheme.');\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\treturn undefined;\r\n}\r\n\r\nfunction getAuthority(uri:IUri):string\r\n{\r\n\r\n\tif(!uri.host)\r\n\t{\r\n\t\tif(uri.userInfo)\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include user info when there is no host.');\r\n\r\n\t\tif(Type.isNumber(uri.port, false))\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include a port when there is no host.');\r\n\t}\r\n\r\n\t/*\r\n\t * [//[user:password@]host[:port]]\r\n\t */\r\n\r\n\tvar result = uri.host || EMPTY;\r\n\r\n\tif(result)\r\n\t{\r\n\t\tif(uri.userInfo) result = uri.userInfo + AT + result;\r\n\t\tif(!isNaN(uri.port)) result += ':' + uri.port;\r\n\t\tresult = SLASH2 + result;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction formatQuery(query:string):string\r\n{\r\n\treturn query && ((query.indexOf(QM)== -1 ? QM : EMPTY) + query);\r\n}\r\n\r\nfunction formatFragment(fragment:string):string\r\n{\r\n\treturn fragment && ((fragment.indexOf(HASH)== -1 ? HASH : EMPTY) + fragment);\r\n}\r\n\r\nfunction getPathAndQuery(uri:IUri):string\r\n{\r\n\r\n\tvar path = uri.path,\r\n\t\tquery = uri.query;\r\n\r\n\treturn EMPTY\r\n\t\t+ (path && ((path.indexOf(SLASH)== -1 ? SLASH : EMPTY) + path) || EMPTY)\r\n\t\t+ (formatQuery(query) || EMPTY);\r\n\r\n}\r\n\r\nfunction uriToString(uri:IUri):string\r\n{\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\t// {scheme}{authority}{path}{query}{fragment}\r\n\r\n\tvar scheme = getScheme(uri.scheme),\r\n\t\tauthority = getAuthority(uri),\r\n\t\tpathAndQuery = getPathAndQuery(uri),\r\n\t\tfragment = formatFragment(uri.fragment);\r\n\r\n\treturn EMPTY\r\n\t\t+ ((scheme && (scheme + ':')) || EMPTY)\r\n\t\t+ (authority || EMPTY)\r\n\t\t+ (pathAndQuery || EMPTY)\r\n\t\t+ (fragment || EMPTY)\r\n\r\n}\r\n\r\n\r\nfunction tryParse(url:string, out:(result:IUri)=>void):Exception\r\n{\r\n\tif(!url)\r\n\t\treturn new ArgumentException('url', 'Nothing to parse.');\r\n\r\n\r\n\t// Could use a regex here, but well follow some rules instead.\r\n\t// The intention is to 'gather' the pieces.  This isn't validation (yet).\r\n\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\tvar i:number, result:IUri = {};\r\n\r\n\t// Anything after the first # is the fragment.\r\n\ti = url.indexOf(HASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.fragment = url.substring(i);\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Anything after the first ? is the query.\r\n\ti = url.indexOf(QM);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.query = url.substring(i);\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Guarantees a separation.\r\n\ti = url.indexOf(SLASH2);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tvar scheme = trim(url.substring(0, i)), c = /:$/;\r\n\t\tif(!c.test(scheme))\r\n\t\t\treturn new ArgumentException('url', 'Scheme was improperly formatted');\r\n\r\n\t\tscheme = trim(scheme.replace(c, EMPTY));\r\n\t\ttry\r\n\t\t{\r\n\t\t\tresult.scheme = getScheme(scheme) || undefined;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn ex;\r\n\t\t}\r\n\r\n\t\turl = url.substring(i + 2);\r\n\t}\r\n\r\n\t// Find any path information.\r\n\ti = url.indexOf(SLASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.path = url.substring(i) || undefined;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Separate user info.\r\n\ti = url.indexOf(AT);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.userInfo = url.substring(0, i) || undefined;\r\n\t\turl = url.substring(i + 1);\r\n\t}\r\n\r\n\t// Remaining is host and port.\r\n\ti = url.indexOf(':');\r\n\tif(i!= -1)\r\n\t{\r\n\t\tvar port = parseInt(trim(url.substring(i + 1)));\r\n\t\tif(isNaN(port))\r\n\t\t\treturn new ArgumentException('url', 'Port was invalid.');\r\n\r\n\t\tresult.port = port;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\turl = trim(url);\r\n\tif(url)\r\n\t\tresult.host = url;\r\n\r\n\tout(copyUri(result));\r\n\r\n\t// null is good! (here)\r\n\treturn null;\r\n\r\n}\r\n"]}