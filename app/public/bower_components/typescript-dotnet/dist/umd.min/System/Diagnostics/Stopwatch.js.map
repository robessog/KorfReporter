{"version":3,"sources":["System/Diagnostics/Stopwatch.js","System/Diagnostics/Stopwatch.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","TimeSpan_1","Stopwatch","this","reset","getTimestampMilliseconds","Date","getTime","Object","defineProperty","prototype","get","_isRunning","enumerable","configurable","startNew","s","start","measure","closure","record","e","_elapsed","milliseconds","_","_startTimeStamp","stop","currentLapMilliseconds","NaN","lap","t","zero","timeElapsed","elapsedMilliseconds","value"],"mappings":"CAAA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,oBAAqBN,IAExD,SAAUI,EAASF,GCHtB,YAEA,IAAAM,GAAAJ,EAAqB,oBAGrBK,EAAA,WAkBC,QAAAA,KAECC,KAAKC,QAkGP,MAlHQF,GAAAG,yBAAP,WAEC,OAAO,GAAKC,OAAQC,WAOrBC,OAAAC,eAAIP,EAAAQ,UAAA,aDJOC,ICIX,WAEC,MAAOR,MAAKS,YDHFC,YAAY,EACZC,cAAc,ICUlBZ,EAAAa,SAAP,WAEC,GAAIC,GAAI,GAAId,EAEZ,OADAc,GAAEC,QACKD,GAGDd,EAAAgB,QAAP,SAAeC,GAEd,GAAIF,GAAQf,EAAUG,0BAEtB,OADAc,KACO,GAAIlB,GAAAA,WAASC,EAAUG,2BAA6BY,IAG5Df,EAAAQ,UAAAU,OAAA,SAAOD,GAGN,GAAIE,GAAInB,EAAUgB,QAAQC,EAE1B,OADAhB,MAAKmB,UAAYD,EAAEE,aACZF,GAGRnB,EAAAQ,UAAAO,MAAA,WAEC,GAAIO,GAAIrB,IACJqB,GAAEZ,aACLY,EAAEC,gBAAkBvB,EAAUG,2BAC9BmB,EAAEZ,YAAa,IAIjBV,EAAAQ,UAAAgB,KAAA,WAEC,GAAIF,GAAIrB,IACLqB,GAAEZ,aACJY,EAAEF,UAAYE,EAAEG,uBAChBH,EAAEZ,YAAa,IAIjBV,EAAAQ,UAAAN,MAAA,WAEC,GAAIoB,GAAIrB,IACRqB,GAAEF,SAAW,EACbE,EAAEZ,YAAa,EACfY,EAAEC,gBAAkBG,KAKrB1B,EAAAQ,UAAAmB,IAAA,WAEC,GAAIL,GAAIrB,IACR,IAAGqB,EAAEZ,WAAY,CAChB,GAAIkB,GAAI5B,EAAUG,2BACdW,EAAIQ,EAAEC,gBACNJ,EAAIS,EAAId,CAGZ,OAFAQ,GAAEC,gBAAkBK,EACpBN,EAAEF,UAAYD,EACP,GAAIpB,GAAAA,WAASoB,GAGpB,MAAOpB,GAAAA,WAAS8B,MAGlBvB,OAAAC,eAAIP,EAAAQ,UAAA,0BDxBOC,ICwBX,WAEC,MAAOR,MAAKS,WACRV,EAAUG,2BAA6BF,KAAKsB,gBAC7C,GDvBOZ,YAAY,EACZC,cAAc,ICyBzBN,OAAAC,eAAIP,EAAAQ,UAAA,cDtBOC,ICsBX,WAEC,MAAOR,MAAKS,WACT,GAAIX,GAAAA,WAASE,KAAKwB,wBAClB1B,EAAAA,WAAS8B,MDrBFlB,YAAY,EACZC,cAAc,ICuBzBN,OAAAC,eAAIP,EAAAQ,UAAA,uBDpBOC,ICoBX,WAEC,GAAIa,GAAIrB,KACJ6B,EAAcR,EAAEF,QAKpB,OAHGE,GAAEZ,aACJoB,GAAeR,EAAEG,wBAEXK,GDrBGnB,YAAY,EACZC,cAAc,ICuBzBN,OAAAC,eAAIP,EAAAQ,UAAA,WDpBOC,ICoBX,WAEC,MAAO,IAAIV,GAAAA,WAASE,KAAK8B,sBDnBfpB,YAAY,EACZC,cAAc,ICqB1BZ,IAtHAM,QAAAC,eAAAd,EAAA,cAAAuC,OAAA,IDsGIvC,EAAAA,WAAkBO","file":"System/Diagnostics/Stopwatch.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../Time/TimeSpan'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var TimeSpan_1 = require('../Time/TimeSpan');\n    var Stopwatch = (function () {\n        function Stopwatch() {\n            this.reset();\n        }\n        Stopwatch.getTimestampMilliseconds = function () {\n            return (new Date()).getTime();\n        };\n        Object.defineProperty(Stopwatch.prototype, \"isRunning\", {\n            get: function () {\n                return this._isRunning;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Stopwatch.startNew = function () {\n            var s = new Stopwatch();\n            s.start();\n            return s;\n        };\n        Stopwatch.measure = function (closure) {\n            var start = Stopwatch.getTimestampMilliseconds();\n            closure();\n            return new TimeSpan_1.default(Stopwatch.getTimestampMilliseconds() - start);\n        };\n        Stopwatch.prototype.record = function (closure) {\n            var e = Stopwatch.measure(closure);\n            this._elapsed += e.milliseconds;\n            return e;\n        };\n        Stopwatch.prototype.start = function () {\n            var _ = this;\n            if (!_._isRunning) {\n                _._startTimeStamp = Stopwatch.getTimestampMilliseconds();\n                _._isRunning = true;\n            }\n        };\n        Stopwatch.prototype.stop = function () {\n            var _ = this;\n            if (_._isRunning) {\n                _._elapsed += _.currentLapMilliseconds;\n                _._isRunning = false;\n            }\n        };\n        Stopwatch.prototype.reset = function () {\n            var _ = this;\n            _._elapsed = 0;\n            _._isRunning = false;\n            _._startTimeStamp = NaN;\n        };\n        Stopwatch.prototype.lap = function () {\n            var _ = this;\n            if (_._isRunning) {\n                var t = Stopwatch.getTimestampMilliseconds();\n                var s = _._startTimeStamp;\n                var e = t - s;\n                _._startTimeStamp = t;\n                _._elapsed += e;\n                return new TimeSpan_1.default(e);\n            }\n            else\n                return TimeSpan_1.default.zero;\n        };\n        Object.defineProperty(Stopwatch.prototype, \"currentLapMilliseconds\", {\n            get: function () {\n                return this._isRunning\n                    ? (Stopwatch.getTimestampMilliseconds() - this._startTimeStamp)\n                    : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"currentLap\", {\n            get: function () {\n                return this._isRunning\n                    ? new TimeSpan_1.default(this.currentLapMilliseconds)\n                    : TimeSpan_1.default.zero;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"elapsedMilliseconds\", {\n            get: function () {\n                var _ = this;\n                var timeElapsed = _._elapsed;\n                if (_._isRunning)\n                    timeElapsed += _.currentLapMilliseconds;\n                return timeElapsed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"elapsed\", {\n            get: function () {\n                return new TimeSpan_1.default(this.elapsedMilliseconds);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Stopwatch;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Stopwatch;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport TimeSpan from '../Time/TimeSpan';\r\n\r\n\r\nexport default\r\nclass Stopwatch\r\n{\r\n\r\n\tstatic getTimestampMilliseconds():number\r\n\t{\r\n\t\treturn (new Date()).getTime();\r\n\t}\r\n\r\n\tprivate _elapsed:number;\r\n\tprivate _startTimeStamp:number;\r\n\r\n\tprivate _isRunning:boolean;\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn this._isRunning;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tstatic startNew():Stopwatch\r\n\t{\r\n\t\tvar s = new Stopwatch();\r\n\t\ts.start();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tstatic measure(closure:()=>void):TimeSpan\r\n\t{\r\n\t\tvar start = Stopwatch.getTimestampMilliseconds();\r\n\t\tclosure();\r\n\t\treturn new TimeSpan(Stopwatch.getTimestampMilliseconds() - start);\r\n\t}\r\n\r\n\trecord(closure:() => void):TimeSpan\r\n\t{\r\n\t\t// Although a reasonably thread safe way to record, it may not correctly represent time in an async scenario.\r\n\t\tvar e = Stopwatch.measure(closure);\r\n\t\tthis._elapsed += e.milliseconds;\r\n\t\treturn e;\r\n\t}\r\n\r\n\tstart():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._isRunning) {\r\n\t\t\t_._startTimeStamp = Stopwatch.getTimestampMilliseconds();\r\n\t\t\t_._isRunning = true;\r\n\t\t}\r\n\t}\r\n\r\n\tstop():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._isRunning) {\r\n\t\t\t_._elapsed += _.currentLapMilliseconds;\r\n\t\t\t_._isRunning = false;\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._elapsed = 0;\r\n\t\t_._isRunning = false;\r\n\t\t_._startTimeStamp = NaN;\r\n\t}\r\n\r\n\t// Effectively calls a stop start and continues timing...\r\n\t// Can also be called to effectively start a lap before calling it again to get the elapsed lap time.\r\n\tlap():TimeSpan\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._isRunning) {\r\n\t\t\tvar t = Stopwatch.getTimestampMilliseconds();\r\n\t\t\tvar s = _._startTimeStamp;\r\n\t\t\tvar e = t - s;\r\n\t\t\t_._startTimeStamp = t;\r\n\t\t\t_._elapsed += e;\r\n\t\t\treturn new TimeSpan(e);\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn TimeSpan.zero;\r\n\t}\r\n\r\n\tget currentLapMilliseconds():number\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? (Stopwatch.getTimestampMilliseconds() - this._startTimeStamp)\r\n\t\t\t: 0;\r\n\t}\r\n\r\n\tget currentLap():TimeSpan\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? new TimeSpan(this.currentLapMilliseconds)\r\n\t\t\t: TimeSpan.zero;\r\n\t}\r\n\r\n\tget elapsedMilliseconds():number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar timeElapsed = _._elapsed;\r\n\r\n\t\tif(_._isRunning)\r\n\t\t\ttimeElapsed += _.currentLapMilliseconds;\r\n\r\n\t\treturn timeElapsed;\r\n\t}\r\n\r\n\tget elapsed():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.elapsedMilliseconds);\r\n\t}\r\n\r\n}\r\n"]}