{"version":3,"sources":["System/Exceptions/ArgumentOutOfRangeException.js","System/Exceptions/ArgumentOutOfRangeException.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","ArgumentException_1","NAME","ArgumentOutOfRangeException","_super","paramName","actualValue","message","innerException","call","_","getName","defineProperty","value"],"mappings":";;;;;AAKA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,uBAAwBN,IAE3D,SAAUI,EAASF,GAClB,YCVJ,IAAAM,GAAAJ,EAA8B,uBAIxBK,EAAc,8BAEpBC,EAAA,SAAAC,GAKC,QAAAD,GACCE,EACAC,EACAC,EACAC,GADA,SAAAD,IAAAA,EAAA,KACA,SAAAC,IAAAA,EAAA,MAEAJ,EAAAK,KAAA1B,KAAMsB,EAAWE,EAASC,EAAgB,SAACE,GAC1CA,EAAEJ,YAAcA,IAUnB,MArB0CxB,WAAAqB,EAAAC,GAgB/BD,EAAAb,UAAAqB,QAAV,WAEC,MAAOT,IAGTC,GArB0CF,EAAAA,WAD1CV,QAAAqB,eAAAjB,EAAA,cAAAkB,OAAA,IDuBIlB,EAAAA,WAAkBQ","file":"System/Exceptions/ArgumentOutOfRangeException.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './ArgumentException'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var ArgumentException_1 = require('./ArgumentException');\n    'use strict';\n    var NAME = 'ArgumentOutOfRangeException';\n    var ArgumentOutOfRangeException = (function (_super) {\n        __extends(ArgumentOutOfRangeException, _super);\n        function ArgumentOutOfRangeException(paramName, actualValue, message, innerException) {\n            if (message === void 0) { message = ' '; }\n            if (innerException === void 0) { innerException = null; }\n            _super.call(this, paramName, message, innerException, function (_) {\n                _.actualValue = actualValue;\n            });\n        }\n        ArgumentOutOfRangeException.prototype.getName = function () {\n            return NAME;\n        };\n        return ArgumentOutOfRangeException;\n    }(ArgumentException_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ArgumentOutOfRangeException;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\nimport Type from '../Types';\r\nimport Exception from '../Exception';\r\nimport ArgumentException from './ArgumentException';\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n\r\nconst NAME:string = 'ArgumentOutOfRangeException';\r\n\r\nexport default\r\nclass ArgumentOutOfRangeException extends ArgumentException\r\n{\r\n\tactualValue:string|number|boolean;\r\n\r\n\tconstructor(\r\n\t\tparamName:string,\r\n\t\tactualValue:string|number|boolean,\r\n\t\tmessage:string = ' ',\r\n\t\tinnerException:Exception = null)\r\n\t{\r\n\t\tsuper(paramName, message, innerException, (_)=>{\r\n\t\t\t_.actualValue = actualValue;\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprotected getName():string\r\n\t{\r\n\t\treturn NAME;\r\n\t}\r\n\r\n}\r\n"]}