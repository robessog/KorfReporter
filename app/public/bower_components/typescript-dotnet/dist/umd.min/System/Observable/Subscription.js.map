{"version":3,"sources":["System/Observable/Subscription.js","System/Observable/Subscription.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Subscription","_subscribable","_subscriber","this","Object","defineProperty","prototype","get","enumerable","configurable","dispose","subscriber","subscribable","unsubscribe","value"],"mappings":";;;;;;CAMA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GCHtB,YAKA,IAAAM,GAAA,WAGC,QAAAA,GACSC,EACAC,GAER,GAHQC,KAAAF,cAAAA,EACAE,KAAAD,YAAAA,GAEHD,IAAkBC,EACtB,KAAM,8CA0CT,MAvCCE,QAAAC,eAAIL,EAAAM,UAAA,cDHOC,ICGX,WACC,MAAOJ,MAAKD,aDDFM,YAAY,EACZC,cAAc,ICkBzBL,OAAAC,eAAIL,EAAAM,UAAA,eDfOC,ICeX,WAEC,OAAQJ,KAAKF,gBAAkBE,KAAKD,aDd1BM,YAAY,EACZC,cAAc,ICgBzBT,EAAAM,UAAAI,QAAA,WAEC,GAAIC,GAAaR,KAAKQ,WAClBC,EAAeT,KAAKF,aAGxBE,MAAKD,YAAc,KACnBC,KAAKF,cAAgB,KAGjBU,GAAcC,GAEjBA,EAAaC,YAAYF,IAG5BX,IAlDAI,QAAAC,eAAAX,EAAA,cAAAoB,OAAA,IDiCIpB,EAAAA,WAAkBM","file":"System/Observable/Subscription.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Subscription = (function () {\n        function Subscription(_subscribable, _subscriber) {\n            this._subscribable = _subscribable;\n            this._subscriber = _subscriber;\n            if (!_subscribable || !_subscriber)\n                throw 'Subscribable and subscriber cannot be null.';\n        }\n        Object.defineProperty(Subscription.prototype, \"subscriber\", {\n            get: function () {\n                return this._subscriber;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Subscription.prototype, \"wasDisposed\", {\n            get: function () {\n                return !this._subscribable || !this._subscriber;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Subscription.prototype.dispose = function () {\n            var subscriber = this.subscriber;\n            var subscribable = this._subscribable;\n            this._subscriber = null;\n            this._subscribable = null;\n            if (subscriber && subscribable) {\n                subscribable.unsubscribe(subscriber);\n            }\n        };\n        return Subscription;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Subscription;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n///<reference path=\"ISubscribable.d.ts\"/>\r\n///<reference path=\"IObservable.d.ts\"/>\r\n///<reference path=\"../Disposable/IDisposableAware.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n/**\r\n * A registration that an IObservable returns that can be disposed in order to cancel sending data to the observer.\r\n */\r\nexport default\r\nclass Subscription<T> implements IDisposableAware\r\n{\r\n\tconstructor(\r\n\t\tprivate _subscribable: ISubscribable<T>,\r\n\t\tprivate _subscriber: T)\r\n\t{\r\n\t\tif (!_subscribable || !_subscriber)\r\n\t\t\tthrow 'Subscribable and subscriber cannot be null.';\r\n\t}\r\n\r\n\tget subscriber():T {\r\n\t\treturn this._subscriber;\r\n\t}\r\n\r\n\t/*\r\n\t In the case where we could possibly have the following happen:\r\n\r\n\t var u = observable.subscribe(observer);\r\n\r\n\t ...\r\n\r\n\t u.dispose(); // Should only be allowed to unsubscribe once and then it's useless.\r\n\r\n\t // Resubscribing creates a new instance.\r\n\t var x = observable.subscribe(observer);\r\n\r\n\t u.dispose(); // Calling this again should do nothing and 'x' should still work.\r\n\t */\r\n\r\n\tget wasDisposed(): boolean\r\n\t{\r\n\t\treturn !this._subscribable || !this._subscriber;\r\n\t}\r\n\r\n\tdispose(): void\r\n\t{\r\n\t\tvar subscriber = this.subscriber;\r\n\t\tvar subscribable = this._subscribable;\r\n\r\n\t\t// Release the references.  Will prevent potential unwanted recursion.\r\n\t\tthis._subscriber = null;\r\n\t\tthis._subscribable = null;\r\n\r\n\r\n\t\tif (subscriber && subscribable)\r\n\t\t{\r\n\t\t\tsubscribable.unsubscribe(subscriber);\r\n\t\t}\r\n\t}\r\n}\r\n"]}